/*
	DronaHQ Native Container SDK - v7.3.1
    Author: Mohit Agarwal
    Date: 17/3/2022
*/
;
(function () {
    var DronaHQ = {};

    //Check device type
    var userAgent = window.navigator.userAgent;
    DronaHQ.onIos = /(iPad|iPhone|iPod)/i.test(userAgent);
    DronaHQ.onAndroid = /Crosswalk/i.test(userAgent);
    DronaHQ.onWindowsPhone = /Windows Phone 8/i.test(userAgent);
    DronaHQ.onWin10 = /Windows Phone 10|Windows NT 10/i.test(userAgent);
    DronaHQ.onElectron = /Electron/i.test(userAgent);


    //REFER CL #1
    //If 'Drona' is not present in userAgent, will treat current session as Web Session
    if ((userAgent.indexOf('Drona')) === -1) {
        DronaHQ.onIos = DronaHQ.onAndroid = DronaHQ.onWindowsPhone = DronaHQ.onWin10 = DronaHQ.onElectron = false;
    }
    //REFER CL #1 END

    DronaHQ.IsReady = false;
    DronaHQ.plugins = {
        camera: true,
        device: true,
        inappbrowser: true,
        dronahq: true,
        file: true,
        filetransfer: true,
        geo: false, //We only need this on iOS,
        sqlite: true,
        keyboard: false,
        DecimalKeyboard: true,
        kvstorage: true,
        localnotification: true,
        calendar: false
    };

    /*jshint -W079 */
    /*jshint -W020 */
    var require,
        define;

    (function () {
        var modules = {},
            // Stack of moduleIds currently being built.
            requireStack = [],
            // Map of module ID -> index into requireStack of modules currently being built.
            inProgressModules = {},
            SEPARATOR = ".";

        function build(module) {
            var factory = module.factory,
                localRequire = function (id) {
                    var resultantId = id;
                    //Its a relative path, so lop off the last portion and add the id (minus "./")
                    if (id.charAt(0) === ".") {
                        resultantId = module.id.slice(0, module.id.lastIndexOf(SEPARATOR)) + SEPARATOR + id.slice(2);
                    }
                    return require(resultantId);
                };
            module.exports = {};
            delete module.factory;
            factory(localRequire, module.exports, module);
            return module.exports;
        }

        require = function (id) {
            if (!modules[id]) {
                throw "module " + id + " not found";
            } else if (id in inProgressModules) {
                var cycle = requireStack.slice(inProgressModules[id]).join('->') + '->' + id;
                throw "Cycle in require graph: " + cycle;
            }
            if (modules[id].factory) {
                try {
                    inProgressModules[id] = requireStack.length;
                    requireStack.push(id);
                    return build(modules[id]);
                } finally {
                    delete inProgressModules[id];
                    requireStack.pop();
                }
            }
            return modules[id].exports;
        };

        define = function (id, factory) {
            if (modules[id]) {
                throw "module " + id + " already defined";
            }

            modules[id] = {
                id: id,
                factory: factory
            };
        };

        define.remove = function (id) {
            delete modules[id];
        };

        define.moduleMap = modules;
    })();

    //Export for use in node
    if (typeof module === "object" && typeof require === "function") {
        module.exports.require = require;
        module.exports.define = define;
    }

    var _fnCordovaPlugins = function () {
        //Device
        cordova.define("cordova-plugin-device.device", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            channel.createSticky('onCordovaInfoReady');
            // Tell cordova channel to wait on the CordovaInfoReady event
            channel.waitForInitialization('onCordovaInfoReady');

            /**
             * This represents the mobile device, and provides properties for inspecting the model, version, UUID of the
             * phone, etc.
             * @constructor
             */
            function Device() {
                this.available = false;
                this.platform = null;
                this.version = null;
                this.uuid = null;
                this.cordova = null;
                this.model = null;
                this.manufacturer = null;

                var me = this;

                channel.onCordovaReady.subscribe(function () {
                    me.getInfo(function (info) {
                        //ignoring info.cordova returning from native, we should use value from cordova.version defined in cordova.js
                        //TODO: CB-5105 native implementations should not return info.cordova
                        var buildLabel = cordova.version;
                        me.available = true;
                        me.platform = info.platform;
                        me.version = info.version;
                        me.uuid = info.uuid;
                        me.cordova = buildLabel;
                        me.model = info.model;
                        me.manufacturer = info.manufacturer || 'unknown';
                        channel.onCordovaInfoReady.fire();
                    }, function (e) {
                        me.available = false;
                        utils.alert("[ERROR] Error initializing Cordova: " + e);
                    });
                });
            }

            /**
             * Get device info
             *
             * @param {Function} successCallback The function to call when the heading data is available
             * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)
             */
            Device.prototype.getInfo = function (successCallback, errorCallback) {
                argscheck.checkArgs('fF', 'Device.getInfo', arguments);
                exec(successCallback, errorCallback, "Device", "getDeviceInfo", []);
            };

            module.exports = new Device();
        });

        //Camera
        cordova.define("cordova-plugin-camera.camera", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                Camera = require('./Camera');
            // XXX: commented out
            //CameraPopoverHandle = require('./CameraPopoverHandle');

            var cameraExport = {};

            // Tack on the Camera Constants to the base camera plugin.
            for (var key in Camera) {
                cameraExport[key] = Camera[key];
            }

            /**
             * Gets a picture from source defined by "options.sourceType", and returns the
             * image as defined by the "options.destinationType" option.

             * The defaults are sourceType=CAMERA and destinationType=FILE_URI.
             *
             * @param {Function} successCallback
             * @param {Function} errorCallback
             * @param {Object} options
             */
            cameraExport.getPicture = function (successCallback, errorCallback, options) {
                argscheck.checkArgs('fFO', 'Camera.getPicture', arguments);
                options = options || {};
                var getValue = argscheck.getValue;

                var quality = getValue(options.quality, 50);
                var destinationType = getValue(options.destinationType, Camera.DestinationType.FILE_URI);
                var sourceType = getValue(options.sourceType, Camera.PictureSourceType.CAMERA);
                var targetWidth = getValue(options.targetWidth, -1);
                var targetHeight = getValue(options.targetHeight, -1);
                var encodingType = getValue(options.encodingType, Camera.EncodingType.JPEG);
                var mediaType = getValue(options.mediaType, Camera.MediaType.PICTURE);
                var allowEdit = !!options.allowEdit;
                var correctOrientation = !!options.correctOrientation;
                var saveToPhotoAlbum = !!options.saveToPhotoAlbum;
                var popoverOptions = getValue(options.popoverOptions, null);
                var cameraDirection = getValue(options.cameraDirection, Camera.Direction.BACK);

                var args = [quality, destinationType, sourceType, targetWidth, targetHeight, encodingType,
                    mediaType, allowEdit, correctOrientation, saveToPhotoAlbum, popoverOptions, cameraDirection
                ];

                exec(successCallback, errorCallback, "Camera", "takePicture", args);
                // XXX: commented out
                //return new CameraPopoverHandle();
            };

            cameraExport.cleanup = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "Camera", "cleanup", []);
            };

            module.exports = cameraExport;
        });
        cordova.define("cordova-plugin-camera.Camera", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            module.exports = {
                DestinationType: {
                    DATA_URL: 0, // Return base64 encoded string
                    FILE_URI: 1, // Return file uri (content://media/external/images/media/2 for Android)
                    NATIVE_URI: 2 // Return native uri (eg. asset-library://... for iOS)
                },
                EncodingType: {
                    JPEG: 0, // Return JPEG encoded image
                    PNG: 1 // Return PNG encoded image
                },
                MediaType: {
                    PICTURE: 0, // allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType
                    VIDEO: 1, // allow selection of video only, ONLY RETURNS URL
                    ALLMEDIA: 2 // allow selection from all media types
                },
                PictureSourceType: {
                    PHOTOLIBRARY: 0, // Choose image from picture library (same as SAVEDPHOTOALBUM for Android)
                    CAMERA: 1, // Take picture from camera
                    SAVEDPHOTOALBUM: 2 // Choose image from picture library (same as PHOTOLIBRARY for Android)
                },
                PopoverArrowDirection: {
                    ARROW_UP: 1, // matches iOS UIPopoverArrowDirection constants to specify arrow location on popover
                    ARROW_DOWN: 2,
                    ARROW_LEFT: 4,
                    ARROW_RIGHT: 8,
                    ARROW_ANY: 15
                },
                Direction: {
                    BACK: 0,
                    FRONT: 1
                }
            };
        });
        cordova.define("cordova-plugin-camera.CameraPopoverHandle", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec');

            /**
             * A handle to an image picker popover.
             */
            var CameraPopoverHandle = function () {
                this.setPosition = function (popoverOptions) {
                    console.log('CameraPopoverHandle.setPosition is only supported on iOS.');
                };
            };

            module.exports = CameraPopoverHandle;
        });
        cordova.define("cordova-plugin-camera.CameraPopoverOptions", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var Camera = require('./Camera');

            /**
             * Encapsulates options for iOS Popover image picker
             */
            var CameraPopoverOptions = function (x, y, width, height, arrowDir) {
                // information of rectangle that popover should be anchored to
                this.x = x || 0;
                this.y = y || 32;
                this.width = width || 320;
                this.height = height || 480;
                // The direction of the popover arrow
                this.arrowDir = arrowDir || Camera.PopoverArrowDirection.ARROW_ANY;
            };

            module.exports = CameraPopoverOptions;
        });

        //InAppBrowser
        cordova.define("cordova-plugin-inappbrowser.inappbrowser", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec');
            var channel = require('cordova/channel');
            var modulemapper = require('cordova/modulemapper');
            var urlutil = require('cordova/urlutil');

            function InAppBrowser() {
                this.channels = {
                    'loadstart': channel.create('loadstart'),
                    'loadstop': channel.create('loadstop'),
                    'loaderror': channel.create('loaderror'),
                    'exit': channel.create('exit')
                };
            }

            InAppBrowser.prototype = {
                _eventHandler: function (event) {
                    if (event && (event.type in this.channels)) {
                        this.channels[event.type].fire(event);
                    }
                },
                close: function (eventname) {
                    exec(null, null, "InAppBrowser", "close", []);
                },
                show: function (eventname) {
                    exec(null, null, "InAppBrowser", "show", []);
                },
                addEventListener: function (eventname, f) {
                    if (eventname in this.channels) {
                        this.channels[eventname].subscribe(f);
                    }
                },
                removeEventListener: function (eventname, f) {
                    if (eventname in this.channels) {
                        this.channels[eventname].unsubscribe(f);
                    }
                },

                executeScript: function (injectDetails, cb) {
                    if (injectDetails.code) {
                        exec(cb, null, "InAppBrowser", "injectScriptCode", [injectDetails.code, !!cb]);
                    } else if (injectDetails.file) {
                        exec(cb, null, "InAppBrowser", "injectScriptFile", [injectDetails.file, !!cb]);
                    } else {
                        throw new Error('executeScript requires exactly one of code or file to be specified');
                    }
                },

                insertCSS: function (injectDetails, cb) {
                    if (injectDetails.code) {
                        exec(cb, null, "InAppBrowser", "injectStyleCode", [injectDetails.code, !!cb]);
                    } else if (injectDetails.file) {
                        exec(cb, null, "InAppBrowser", "injectStyleFile", [injectDetails.file, !!cb]);
                    } else {
                        throw new Error('insertCSS requires exactly one of code or file to be specified');
                    }
                }
            };

            module.exports = function (strUrl, strWindowName, strWindowFeatures, callbacks) {
                // Don't catch calls that write to existing frames (e.g. named iframes).
                if (window.frames && window.frames[strWindowName]) {
                    var origOpenFunc = modulemapper.getOriginalSymbol(window, 'open');
                    return origOpenFunc.apply(window, arguments);
                }

                strUrl = urlutil.makeAbsolute(strUrl);
                var iab = new InAppBrowser();

                callbacks = callbacks || {};
                for (var callbackName in callbacks) {
                    iab.addEventListener(callbackName, callbacks[callbackName]);
                }

                var cb = function (eventname) {
                    iab._eventHandler(eventname);
                };

                strWindowFeatures = strWindowFeatures || "";

                exec(cb, cb, "InAppBrowser", "open", [strUrl, strWindowName, strWindowFeatures]);
                return iab;
            };
        });

        //DronaHQ User
        cordova.define("cordova-plugin-dronahq.user", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            function User() { };

            /**
             * Get user info
             *
             * @param {Function} successCallback The function to call when the heading data is available
             * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)
             */
            User.prototype.getProfile = function (successCallback, errorCallback) {
                argscheck.checkArgs('fF', 'DronaHQ.getProfile', arguments);
                exec(successCallback, errorCallback, "DronaHQ", "getUserProfile", []);
            };
            User.prototype.setLoginDetails = function (successCallback, errorCallback, cookieVal) {
                exec(successCallback, errorCallback, "DronaHQ", "setLoginViaOAuthDetails", [cookieVal]);
            };
            User.prototype.verifyNonce = function (successCallback, errorCallback, nonce) {
                argscheck.checkArgs('FFS', 'DronaHQ.verifyNonce', arguments);
                exec(successCallback, errorCallback, "DronaHQ", "verifyNonce", [nonce]);
            };


            module.exports = new User();
        });

        //DronaHQ Notification
        cordova.define("cordova-plugin-dronahq.notification", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            function Notification() { };

            Notification.prototype.getNotification = function (notiId, successCallback, errorCallback) {
                argscheck.checkArgs('sfF', 'DronaHQ.getNotification', arguments);
                exec(successCallback, errorCallback, "DronaHQ", "getNotification", [notiId]);
            };

            Notification.prototype.getAllNotification = function (successCallback, errorCallback) {
                argscheck.checkArgs('fF', 'DronaHQ.getNotification', arguments);
                exec(successCallback, errorCallback, "DronaHQ", "getAllNotification", []);
            };

            module.exports = new Notification();
        });

        //DronaHQ App
        cordova.define("cordova-plugin-dronahq.app", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            //Add custom document events
            cordova.addDocumentEventHandler('dronahq.app.profileupdate'); //Fingers Crossed
            cordova.addDocumentEventHandler('dronahq.app.dronahqresumewithdata'); //To Get Deep Link Data

            function App() { };

            App.prototype.navigate = function (objNavigate) {
                argscheck.checkArgs('o', 'DronaHQ.navigate()', arguments);

                var destination = objNavigate.dest || '';
                var destId = objNavigate.dest_id || '0';
                var folderCatId = objNavigate.folder_id || '0';
                var destType = objNavigate.dest_type || '';
                var parameter = objNavigate.parameter || '';

                var args = [destination, destId, destType, folderCatId, parameter];

                exec(null, null, "DronaHQ", "navigation", args);
            };

            App.prototype.exitApp = function () {
                exec(null, null, "DronaHQ", "exitApp", []);
            };

            App.prototype.getApp = function (successCallback, errorCallback, appId, folderId) {
                exec(successCallback, errorCallback, "DHQApp", "getAppDetails", [appId, folderId]);
            }

            App.prototype.handleMedia = function (successCallback, errorCallback, mediaUrl, mediaType, options) {
                var androidPackageName, iOSURLscheme = "";
                if (options) {
                    androidPackageName = options.androidPackageName || "";
                    iOSURLscheme = options.iOSURLscheme || "";
                }
                exec(successCallback, errorCallback, "DronaHQ", "handleMedia", [mediaUrl, mediaType, androidPackageName, iOSURLscheme]);
            }

            App.prototype.addReminder = function (successCallback, errorCallback, options) {
                let identifier = options.identifier;
                let title = options.title;
                let description = options.description;
                let time = options.time;
                let repetition = options.repetition;
                let payload = options.payload;
                let notificationType = options.notificationType;

                let arg = [identifier, title, description, time, repetition, payload, notificationType];
                exec(successCallback, errorCallback, "DHQReminder", "addReminder", arg);
            }

            App.prototype.editReminder = function (successCallback, errorCallback, options) {

                let identifier = options.identifier;
                let title = options.title;
                let description = options.description;
                let time = options.time;
                let repetition = options.repetition;
                let payload = options.payload;
                let notificationType = options.notificationType;

                let arg = [identifier, title, description, time, repetition, payload, notificationType];
                exec(successCallback, errorCallback, "DHQReminder", "editReminder", arg);
            }

            App.prototype.deleteReminder = function (successCallback, errorCallback, identifier) {
                let arg = [identifier];
                exec(successCallback, errorCallback, "DHQReminder", "deleteReminder", arg);
            }

            App.prototype.deleteAllReminders = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQReminder", "deleteAllReminders", []);
            }

            App.prototype.getAllReminders = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQReminder", "getAllReminders", []);
            }

            App.prototype.getReminder = function (successCallback, errorCallback, identifier) {
                let arg = [identifier];
                exec(successCallback, errorCallback, "DHQReminder", "getReminder", arg);
            }

            App.prototype.setStatusBarColor = function (successCallback, errorCallback, objStatusBar) {

                var isHidden = objStatusBar.StatusBarToBeHidden || '';
                var isGradient = objStatusBar.isGradientColor || '';
                var color1 = objStatusBar.color1 || '';
                var color2 = objStatusBar.color2 || '';
                var cordinate1 = objStatusBar.firstCordinate || '';
                var cordinate2 = objStatusBar.secondCordinate || '';

                exec(successCallback, errorCallback, "DronaHQ", "setStatusBarColor", [isHidden, isGradient, color1, color2, cordinate1, cordinate2]);
            }

            App.prototype.setBottomBarColor = function (successCallback, errorCallback, objBottomBar) {

                var isHidden = objBottomBar.StatusBarToBeHidden || '';
                var isGradient = objBottomBar.isGradientColor || '';
                var color1 = objBottomBar.color1 || '';
                var color2 = objBottomBar.color2 || '';
                var cordinate1 = objBottomBar.firstCordinate || '';
                var cordinate2 = objBottomBar.secondCordinate || '';

                exec(successCallback, errorCallback, "DronaHQ", "setBottomBarColor", [isHidden, isGradient, color1, color2, cordinate1, cordinate2]);
            }

            App.prototype.resetiPhoneXColor = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "resetiPhoneXColor", []);
            }
            App.prototype.setStatusBar = function (successCallback, errorCallback, objStatusBar) {

                var isHidden = objStatusBar.StatusBarToBeHidden || false;
                var color1 = objStatusBar.color1 || "d5d5d5";
                var color2 = objStatusBar.color2 || '';
                var isTextThemeDark = objStatusBar.isTextThemeDark || true;
                exec(successCallback, errorCallback, "DronaHQ", "setStatusBar", [isHidden, color1, color2, isTextThemeDark]);
            }

            App.prototype.setBottomBar = function (successCallback, errorCallback, objBottomBar) {

                var isHidden = objBottomBar.StatusBarToBeHidden || '';
                var color1 = objBottomBar.color1 || '';
                var color2 = objBottomBar.color2 || '';

                exec(successCallback, errorCallback, "DronaHQ", "setBottomBar", [isHidden, color1, color2]);
            }
            App.prototype.resetStatusBarAndBottomBar = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "resetStatusBarAndBottomBar", []);
            }

            App.prototype.openAppBugFeedback = function (successCallback, errorCallback, type, title, description) {
                exec(successCallback, errorCallback, "DHQApp", "openBugFeedbackScreen", [type, title, description]);
            }

            App.prototype.getAppBugFeedback = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQApp", "getBugFeedbackScreenDetails", []);
            }

            App.prototype.submitBugFeedbackData = function (successCallback, errorCallback, type, title, desc, image) {
                exec(successCallback, errorCallback, "DHQApp", "submitBugFeedbackData", [type, title, desc, image]);

            }
            App.prototype.passDeepLinkDataCallback = function (successCallback, errorCallback, data) {
                exec(successCallback, errorCallback, "DronaHQ", "passDeepLinkDataCallback", [data]);
            }
            App.prototype.exitAllApps = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "exitAllApps", []);
            }
            App.prototype.getDeepLinkData = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getDeepLinkData", []);
            }

            //image and video compressor
            App.prototype.openFilePicker = function (successCallback, errorCallback, type) {
                exec(successCallback, errorCallback, "DronaHQ", "openFilePicker", [type]);
            }
            App.prototype.compressFile = function (successCallback, errorCallback, filePath) {
                exec(successCallback, errorCallback, "DronaHQ", "compressFile", [filePath]);
            }
            //CL2 exitContainer function added, Closes Container 
            App.prototype.exitContainer = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "exitContainer", []);
            }
            //CL2 END
            App.prototype.getMeta = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getApplicationDetails", []);
            }
            App.prototype.openImageEditor = function (successCallback, errorCallback, filePath) {
                exec(successCallback, errorCallback, "DronaHQ", "openImageEditor", [filePath]);
            }
            App.prototype.downloadMicroApps = function (successCallback, errorCallback, args) {
                exec(successCallback, errorCallback, "DronaHQ", "downloadMicroApps", args);
            }




            module.exports = new App();
        });


        //Custom Chrome Tabs
        cordova.define("cordova-plugin-dronahq.CustomChromeTab", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec');

            function CustomChromeTab() { };
            if (DronaHQ.onIos) {
                CustomChromeTab.prototype.openCustomBrowser = function (successCallback, errorCallback, link) {
                    argscheck.checkArgs('FFS', 'DronaHQ.CustomChromeTab.openCustomBrowser', arguments);
                    exec(successCallback, errorCallback, "DronaHQ", "openCustomBrowser", [link]);
                }
            } else {
                CustomChromeTab.prototype.addSessionUrlToCustomBrowser = function (successCallback, errorCallback, link) {
                    argscheck.checkArgs('FFS', 'DronaHQ.CustomChromeTab.addSessionUrlToCustomBrowser', arguments);
                    exec(successCallback, errorCallback, "DronaHQ", "addSessionUrlToCustomBrowser", [link]);
                }
                CustomChromeTab.prototype.warmUpCustomBrowser = function (successCallback, errorCallback) {
                    argscheck.checkArgs('FF', 'DronaHQ.CustomChromeTab.warmUpCustomBrowser', arguments);
                    exec(successCallback, errorCallback, "DronaHQ", "warmUpCustomBrowser", []);
                }
                CustomChromeTab.prototype.openCustomBrowser = function (successCallback, errorCallback, link, color, addAnimation, addShare) {
                    argscheck.checkArgs('FFSS', 'DronaHQ.CustomChromeTab.openCustomBrowser', arguments);
                    exec(successCallback, errorCallback, "DronaHQ", "openCustomBrowser", [link, color, addAnimation, addShare]);
                }
            }



            module.exports = new CustomChromeTab();
        });

        //GPS Permissions
        cordova.define("cordova-plugin-dronahq.GPSPermission", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec');

            function GPSPermission() { };
            if (DronaHQ.onAndroid) {
                GPSPermission.prototype.turnGPSOn = function (successCallback, errorCallback, enableHighAccuracy = false) {
                    argscheck.checkArgs('FF', 'DronaHQ.GPSPermission.turnGPSOn', arguments);
                    exec(successCallback, errorCallback, "DronaHQ", "turnGPSOn", [enableHighAccuracy]);
                }
            }

            GPSPermission.prototype.checkGPSStatus = function (successCallback, errorCallback) {
                argscheck.checkArgs('FF', 'DronaHQ.GPSPermission.checkGPSStatus', arguments);
                exec(successCallback, errorCallback, "DronaHQ", "checkGPSStatus", []);
            }

            GPSPermission.prototype.getCurrentLocation = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getCurrentLocation", []);
            }

            module.exports = new GPSPermission();
        });


        //DronaHQ Sync
        cordova.define("cordova-plugin-dronahq.sync", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            //Add custom document events
            cordova.addDocumentEventHandler('dronahq.sync.uploadcomplete'); //All uploads complete
            cordova.addDocumentEventHandler('dronahq.sync.complete'); //All uploads complete

            //cordova.addDocumentEventHandler('dronahq.sync.DBChanged'); //CouchDB change trigger
            cordova.addDocumentEventHandler('dronahq.sync.microappdbchanged'); //CouchDB change trigger
            cordova.addDocumentEventHandler('dronahq.sync.channeldbchanged'); //CouchDB change trigger

            function Sync() { };

            Sync.prototype.download = function (remoteUrl, saveUrl, successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "downloadSync", [remoteUrl, saveUrl]);
            };

            Sync.prototype.upload = function (remoteUrl, requestMethod, requestData, imageLocalPath, options, successCallback, errorCallback) {
                imageLocalPath = imageLocalPath || '';

                var reqHeader = [];
                var timeout = 0;
                if (options) {
                    reqHeader = options.header || [];
                    timeout = options.timeout || 0;
                }

                exec(successCallback, errorCallback, "DronaHQ", "uploadRequest", [remoteUrl, requestMethod, requestData, imageLocalPath, reqHeader, timeout]);
            };

            Sync.prototype.refresh = function (refreshType) {
                refreshType = refreshType || '';
                exec(null, null, "DronaHQ", "triggerSync", [refreshType]);
            }

            Sync.prototype.getPendingUploadCount = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getPendingUploadCount", []);
            };

            //OFFLINE SYNC 07/18
            Sync.prototype.getOfflinePendingSyncData = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getOfflinePendingSyncData", []);
            };
            Sync.prototype.addRequest = function (successCallback, errorCallback, newRequestData) {
                exec(successCallback, errorCallback, "DronaHQ", "uploadMultipleRequest", [newRequestData]);
            }
            Sync.prototype.removeRequest = function (successCallback, errorCallback, id) {
                exec(successCallback, errorCallback, "DronaHQ", "removeOfflineSync", [id]);
            }
            Sync.prototype.triggerSync = function (successCallback, errorCallback, refreshType) {
                // var refreshType = refreshType || "";
                exec(successCallback, errorCallback, "DronaHQ", "triggerOfflineSync", []);
            }
            Sync.prototype.getPurgeData = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getAutoPurgeData", []);
            }
            Sync.prototype.getAllPendingRequest = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DronaHQ", "getOfflinePendingSyncData", []);
            };
            Sync.prototype.getRequestDetails = function (successCallback, errorCallback, id) {
                exec(successCallback, errorCallback, "DronaHQ", "getOfflineRequestDetails", [id]);
            }
            //OFFLINE SYNC 07/18 END

            Sync.prototype.getChannelDB = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQStorage", "getChannelDB", []);
            };

            Sync.prototype.getAppDB = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQStorage", "getAppDB", []);
            };
            Sync.prototype.getDocument = function (successCallback, errorCallback, documentName, query, apikey, documentType, filterMode, isChannelDoc, skip, limit, fields, sort) {
                var documentName = documentName || "";
                var query = query || "";
                var apikey = apikey || "";
                var documentType = documentType || "record";
                var filterMode = filterMode || 3;
                var isChannelDoc = isChannelDoc || false;
                var skip = skip || 0;
                var limit = limit || 0;
                var fields = fields || null;
                var sort = sort || null;
                exec(successCallback, errorCallback, "DHQStorage", "getDocument", [documentName, query, apikey, documentType, filterMode, isChannelDoc, skip, limit, fields, sort]);
            };
            Sync.prototype.enableLiveCouchDBChanges = function (successCallback, errorCallback, isEnableCouchSync, pollingFrequency) {
                exec(successCallback, errorCallback, "DronaHQ", "enableLiveCouchDBChanges", [isEnableCouchSync, pollingFrequency]);
            };
            Sync.prototype.getFilteredDocument = function (successCallback, errorCallback, arrKeyNames, arrKeyValues, arrFilterKeys) {
                exec(successCallback, errorCallback, "DHQStorage", "getFilteredDocument", [arrKeyNames, arrKeyValues, arrFilterKeys]);
            };
            Sync.prototype.getDBDetails = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "DHQStorage", "getDBDetails", []);
            };

            module.exports = new Sync();
        });
        //DronaHQ KVStore
        cordova.define("cordova-plugin-dronahq.kvstore", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                cordova = require('cordova');

            function KVStore() { };

            KVStore.prototype.getItem = function (keyName, fnSuccess, fnError, options) {
                argscheck.checkArgs('SFFO', 'KVStore.getItem', arguments);
                var isGlobal = 0;
                if (options) {
                    isGlobal = options.global || 0;
                }
                exec(fnSuccess, fnError, "DHQStorage", "get", [keyName, isGlobal]);
            };
            KVStore.prototype.setItem = function (keyName, keyValue, fnSuccess, fnError, options) {
                argscheck.checkArgs('SSFFO', 'KVStore.setItem', arguments);
                //read_write_access if 0 only read access 1 read and write access
                var isGlobal = 0;
                var read_write_access = 0;
                if (options) {
                    isGlobal = options.global || 0;
                    read_write_access = options.rw || 0;
                }
                exec(fnSuccess, fnError, "DHQStorage", "set", [keyName, keyValue, isGlobal, read_write_access]);
            };
            KVStore.prototype.removeItem = function (keyName, fnSuccess, fnError, options) {
                var isGlobal = 0;
                if (options) {
                    isGlobal = options.global || 0;
                }
                argscheck.checkArgs('sFFO', 'KVStore.removeItem', arguments);
                exec(fnSuccess, fnError, "DHQStorage", "remove", [keyName, isGlobal]);
            };
            KVStore.prototype.clear = function (fnSuccess, fnError, options = {}) {
                var delete_mode = 0;
                if (options) {
                    delete_mode = options.delete_mode || 0;
                }
                argscheck.checkArgs('fF', 'KVStore.clear', arguments);
                exec(fnSuccess, fnError, "DHQStorage", "clearAll", [delete_mode]);
            };

            module.exports = new KVStore();
        });

        //Cordova Text-to-Speech
        //https://github.com/dronahq/cordova-plugin-tts
        cordova.define("cordova-plugin-tts", function (require, exports, module) {
            exports.speak = function (text) {
                return new Promise(function (resolve, reject) {
                    var options = {};

                    if (typeof text == 'string') {
                        options.text = text;
                    } else {
                        options = text;
                    }

                    cordova.exec(resolve, reject, 'TTS', 'speak', [options]);
                });
            };

            exports.stop = function () {
                return new Promise(function (resolve, reject) {
                    cordova.exec(resolve, reject, 'TTS', 'stop', []);
                });
            };

            exports.checkLanguage = function () {
                return new Promise(function (resolve, reject) {
                    cordova.exec(resolve, reject, 'TTS', 'checkLanguage', []);
                });
            };

            exports.openInstallTts = function () {
                return new Promise(function (resolve, reject) {
                    cordova.exec(resolve, reject, 'TTS', 'openInstallTts', []);
                });
            };
        });


        //Cordova nativestorage
        //https://github.com/dronahq/cordova-plugin-nativestorage
        cordova.define('cordova-plugin-nativestorage.mainHandle', function (require, exports, module) {
            var inBrowser = false;
            var NativeStorageError = require('./NativeStorageError');


            function isInBrowser() {
                inBrowser = (window.cordova && (window.cordova.platformId === 'browser' || window.cordova.platformId === 'osx')) || !(window.phonegap || window.cordova);
                return inBrowser;
            }

            function storageSupportAnalyse() {
                if (!isInBrowser()) {
                    return 0;
                    //storageHandlerDelegate = exec;
                } else {
                    if (window.localStorage) {
                        return 1;
                        //storageHandlerDelegate = localStorageHandle;
                    } else {
                        return 2;
                        //console.log("ALERT! localstorage isn't supported");
                    }
                }
            }

            //if storage not available gracefully fails, no error message for now
            function StorageHandle() {
                this.storageSupport = storageSupportAnalyse();
                switch (this.storageSupport) {
                    case 0:
                        var exec = require('cordova/exec');
                        this.storageHandlerDelegate = exec;
                        break;
                    case 1:
                        var localStorageHandle = require('./LocalStorageHandle');
                        this.storageHandlerDelegate = localStorageHandle;
                        break;
                    case 2:
                        console.log("ALERT! localstorage isn't supported");
                        break;
                    default:
                        console.log("StorageSupport Error");
                        break;
                }
            }

            StorageHandle.prototype.initWithSuiteName = function (suiteName, success, error) {
                if (suiteName === null) {
                    error("Null suiteName isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "initWithSuiteName", [suiteName]);
            };

            StorageHandle.prototype.set = function (reference, value, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("The reference can't be null");
                    return;
                }
                if (value === null) {
                    error("a Null value isn't supported");
                    return;
                }
                switch (typeof value) {
                    case 'undefined':
                        error("an undefined type isn't supported");
                        break;
                    case 'boolean': {
                        this.putBoolean(reference, value, success, error);
                        break;
                    }
                    case 'number': {
                        // Good now check if it's a float or an int
                        if (value === +value) {
                            if (value === (value | 0)) {
                                // it's an int
                                this.putInt(reference, value, success, error);
                            } else if (value !== (value | 0)) {
                                this.putDouble(reference, value, success, error);
                            }
                        } else {
                            error("The value doesn't seem to be a number");
                        }
                        break;
                    }
                    case 'string': {
                        this.putString(reference, value, success, error);
                        break;
                    }
                    case 'object': {
                        this.putObject(reference, value, success, error);
                        break;
                    }
                    default:
                        error("The type isn't supported or isn't been recognized");
                        break;
                }
            };

            /* removing */
            StorageHandle.prototype.remove = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }

                if (inBrowser) {
                    try {
                        localStorage.removeItem(reference);
                        success();
                    } catch (e) {
                        error(e);
                    }
                } else {
                    this.storageHandlerDelegate(success, error, "NativeStorage", "remove", [reference]);
                }
            };

            /* clearing */
            StorageHandle.prototype.clear = function (success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (inBrowser) {
                    try {
                        localStorage.clear();
                        success();
                    } catch (e) {
                        error(e);
                    }
                } else {
                    this.storageHandlerDelegate(success, error, "NativeStorage", "clear", []);
                }
            };


            /* boolean storage */
            StorageHandle.prototype.putBoolean = function (reference, aBoolean, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }

                if (aBoolean === null) {
                    error("a Null value isn't supported");
                    return;
                }

                if (typeof aBoolean === 'boolean') {
                    this.storageHandlerDelegate(function (returnedBool) {
                        if ('string' === typeof returnedBool) {
                            if ((returnedBool === 'true')) {
                                success(true);
                            } else if ((returnedBool === 'false')) {
                                success(false);
                            } else {
                                error("The returned boolean from SharedPreferences was not recognized: " + returnedBool);
                            }
                        } else {
                            success(returnedBool);
                        }
                    }, error, "NativeStorage", "putBoolean", [reference, aBoolean]);
                } else {
                    error("Only boolean types are supported");
                }
            };


            StorageHandle.prototype.getBoolean = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(function (returnedBool) {
                    if ('string' === typeof returnedBool) {
                        if ((returnedBool === 'true')) {
                            success(true);
                        } else if ((returnedBool === 'false')) {
                            success(false);
                        } else {
                            error("The returned boolean from SharedPreferences was not recognized: " + returnedBool);
                        }
                    } else {
                        success(returnedBool);
                    }
                }, error, "NativeStorage", "getBoolean", [reference]);
            };

            /* int storage */
            StorageHandle.prototype.putInt = function (reference, anInt, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "putInt", [reference, anInt]);
            };

            StorageHandle.prototype.getInt = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "getInt", [reference]);
            };


            /* float storage */
            StorageHandle.prototype.putDouble = function (reference, aFloat, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "putDouble", [reference, aFloat]);
            };

            StorageHandle.prototype.getDouble = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(function (data) {
                    if (isNaN(data)) {
                        error('Expected double but got non-number');
                    } else {
                        success(parseFloat(data));
                    }
                }, error, "NativeStorage", "getDouble", [reference]);
            };

            /* string storage */
            StorageHandle.prototype.putString = function (reference, s, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "putString", [reference, s]);
            };

            StorageHandle.prototype.getString = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error("Null reference isn't supported");
                    return;
                }
                this.storageHandlerDelegate(success, error, "NativeStorage", "getString", [reference]);
            };

            /* object storage  COMPOSITE AND DOESNT CARE FOR BROWSER*/
            StorageHandle.prototype.putObject = function (reference, obj, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                var objAsString = "";
                try {
                    objAsString = JSON.stringify(obj);
                } catch (err) {
                    error(err);
                }
                this.putString(reference, objAsString, function (data) {
                    var obj = {};
                    try {
                        obj = JSON.parse(data);
                        success(obj);
                    } catch (err) {
                        error(err);
                    }
                }, error);
            };

            StorageHandle.prototype.getObject = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                this.getString(reference, function (data) {
                    var obj = {};
                    try {
                        obj = JSON.parse(data);
                        success(obj);
                    } catch (err) {
                        error(err);
                    }
                }, error);
            };

            /* API >= 2 */
            StorageHandle.prototype.setItem = function (reference, obj, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                var objAsString = "";
                try {
                    objAsString = JSON.stringify(obj);
                } catch (err) {
                    error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                    return;
                }
                if (reference === null) {
                    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, "JS", ""));
                    return;
                }
                this.storageHandlerDelegate(function (data) {
                    try {
                        obj = JSON.parse(data);
                        success(obj);
                    } catch (err) {
                        error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                    }
                }, function (code) {
                    error(new NativeStorageError(code, "Native", ""));
                }, "NativeStorage", "setItem", [reference, objAsString]);
            };

            StorageHandle.prototype.getItem = function (reference, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, "JS", ""));
                    return;
                }
                var obj = {};

                this.storageHandlerDelegate(
                    function (data) {
                        try {
                            obj = JSON.parse(data);
                            success(obj);
                        } catch (err) {
                            error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                        }
                    },
                    function (code) {
                        error(new NativeStorageError(code, "Native", ""));
                    }, "NativeStorage", "getItem", [reference]);
            };

            /* API >= 2 */
            StorageHandle.prototype.setSecretItem = function (reference, obj, encryptConfig, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                var objAsString = "";
                try {
                    objAsString = JSON.stringify(obj);
                } catch (err) {
                    error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                    return;
                }
                if (reference === null) {
                    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, "JS", ""));
                    return;
                }

                var action = "setItem";
                var params = [reference, objAsString];
                switch (encryptConfig.mode) {
                    case "password":
                        action = "setItemWithPassword";
                        params = [reference, objAsString, encryptConfig.value];
                        break;
                    case "key":
                        action = "setItemWithKey";
                        break;
                    case "none":
                        break;
                    default: {
                        error(new NativeStorageError(NativeStorageError.WRONG_PARAMETER, "JS", ""));
                        return;
                    }
                }
                this.storageHandlerDelegate(function (data) {
                    try {
                        obj = JSON.parse(data);
                        success(obj);
                    } catch (err) {
                        error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                    }
                }, function (code) {
                    error(new NativeStorageError(code, "Native", ""));
                }, "NativeStorage", action, params);
            };

            StorageHandle.prototype.getSecretItem = function (reference, encryptConfig, success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                if (reference === null) {
                    error(new NativeStorageError(NativeStorageError.NULL_REFERENCE, "JS", ""));
                    return;
                }
                var obj = {};

                var action = "getItem";
                var params = [reference];
                switch (encryptConfig.mode) {
                    case "password":
                        action = "getItemWithPassword";
                        params = [reference, encryptConfig.value];
                        break;
                    case "key":
                        action = "getItemWithKey";
                        break;
                    case "none":
                        break;
                    default: {
                        error(new NativeStorageError(NativeStorageError.WRONG_PARAMETER, "JS", ""));
                        return;
                    }
                }

                this.storageHandlerDelegate(
                    function (data) {
                        try {
                            obj = JSON.parse(data);
                            success(obj);
                        } catch (err) {
                            error(new NativeStorageError(NativeStorageError.JSON_ERROR, "JS", err));
                        }
                    },
                    function (code) {
                        error(new NativeStorageError(code, "Native", ""));
                    }, "NativeStorage", action, params);
            };

            /* list keys */
            StorageHandle.prototype.keys = function (success, error) {

                //if error is null then replace with empty function to silence warnings
                if (!error) {
                    error = function () { };
                }

                this.storageHandlerDelegate(success, error, "NativeStorage", "keys", []);
            };


            var storageHandle = new StorageHandle();
            module.exports = storageHandle;
        });

        cordova.define('cordova-plugin-nativestorage.NativeStorageError', function (require, exports, module) {
            var NativeStorageError = function (code, source, exception) {
                this.code = code || null;
                this.source = source || null;
                this.exception = exception || null;
            };

            // Make NativeStorageError a real Error, you can test with `instanceof Error`
            NativeStorageError.prototype = Object.create(Error.prototype, {
                constructor: {
                    value: NativeStorageError
                }
            });

            NativeStorageError.NATIVE_WRITE_FAILED = 1;
            NativeStorageError.ITEM_NOT_FOUND = 2;
            NativeStorageError.NULL_REFERENCE = 3;
            NativeStorageError.UNDEFINED_TYPE = 4;
            NativeStorageError.JSON_ERROR = 5;
            NativeStorageError.WRONG_PARAMETER = 6;

            module.exports = NativeStorageError;
        });

        cordova.define('cordova-plugin-nativestorage.LocalStorageHandle', function (require, exports, module) {
            var NativeStorageError = require('./NativeStorageError');

            // args = [reference, variable]
            function LocalStorageHandle(success, error, intent, operation, args) {
                var reference = args[0];
                var variable = args[1];

                if (operation.startsWith('put') || operation.startsWith('set')) {
                    try {
                        var varAsString = JSON.stringify(variable);
                        if (reference === null) {
                            error(NativeStorageError.NULL_REFERENCE);
                            return;
                        }
                        localStorage.setItem(reference, varAsString);
                        success(variable);
                    } catch (err) {
                        error(NativeStorageError.JSON_ERROR);
                    }
                } else if (operation.startsWith('get')) {
                    var item = {};
                    item = localStorage.getItem(reference);
                    if (item === null) {
                        error(NativeStorageError.ITEM_NOT_FOUND);
                        return;
                    }
                    try {
                        var obj = JSON.parse(item);
                        //console.log("LocalStorage Reading: "+obj);
                        success(obj);
                    } catch (err) {
                        error(NativeStorageError.JSON_ERROR);
                    }
                } else if (operation === 'keys') {
                    var keys = [];
                    for (var i = 0; i < localStorage.length; i++) {
                        keys.push(localStorage.key(i));
                    }
                    success(keys);
                }
            }
            module.exports = LocalStorageHandle;
        });

        //cordova-plugin-file-opener2
        //https://github.com/dronahq/cordova-plugin-file-opener2
        cordova.define('cordova-plugin-file-opener2', function (require, exports, module) {
            /*jslint browser: true, devel: true, node: true, sloppy: true, plusplus: true*/
            /*global require, cordova */
            /*
            The MIT License (MIT)
            Copyright (c) 2013 pwlin - pwlin05@gmail.com
            Permission is hereby granted, free of charge, to any person obtaining a copy of
            this software and associated documentation files (the "Software"), to deal in
            the Software without restriction, including without limitation the rights to
            use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
            the Software, and to permit persons to whom the Software is furnished to do so,
            subject to the following conditions:
            The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
            FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
            COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
            IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
            CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
            */
            var exec = require('cordova/exec');

            function FileOpener2() { }

            FileOpener2.prototype.open = function (fileName, contentType, callbackContext) {
                contentType = contentType || '';
                callbackContext = callbackContext || {};
                exec(callbackContext.success || null, callbackContext.error || null, 'FileOpener2', 'open', [fileName, contentType]);
            };

            FileOpener2.prototype.showOpenWithDialog = function (fileName, contentType, callbackContext) {
                contentType = contentType || '';
                callbackContext = callbackContext || {};
                exec(callbackContext.success || null, callbackContext.error || null, 'FileOpener2', 'open', [fileName, contentType, false]);
            };

            FileOpener2.prototype.uninstall = function (packageId, callbackContext) {
                callbackContext = callbackContext || {};
                exec(callbackContext.success || null, callbackContext.error || null, 'FileOpener2', 'uninstall', [packageId]);
            };

            FileOpener2.prototype.appIsInstalled = function (packageId, callbackContext) {
                callbackContext = callbackContext || {};
                exec(callbackContext.success || null, callbackContext.error || null, 'FileOpener2', 'appIsInstalled', [packageId]);
            };

            module.exports = new FileOpener2();
        });

        //Cordova Speech-Recognition
        // https://github.com/dronahq/cordova-plugin-speechrecognition
        cordova.define("cordova-plugin-speechrecognition", function (require, exports, module) {
            module.exports = {
                isRecognitionAvailable: function (successCallback, errorCallback) {
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'isRecognitionAvailable', []);
                },
                startListening: function (successCallback, errorCallback, options) {
                    options = options || {};
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'startListening', [options.language, options.matches, options.prompt, options.showPartial, options.showPopup]);
                },
                stopListening: function (successCallback, errorCallback) {
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'stopListening', []);
                },
                getSupportedLanguages: function (successCallback, errorCallback) {
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'getSupportedLanguages', []);
                },
                hasPermission: function (successCallback, errorCallback) {
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'hasPermission', []);
                },
                requestPermission: function (successCallback, errorCallback) {
                    cordova.exec(successCallback, errorCallback, 'SpeechRecognition', 'requestPermission', []);
                }
            };
        });


        /**
         * Name: cordova-diagnostic-plugin
         * URL: https://github.com/dpa99c/cordova-diagnostic-plugin
         * No version number available in plugin.
         */
        if (DronaHQ.onAndroid) {
            //Android
            cordova.define("cordova.plugins.diagnostic.Diagnostic", function (require, exports, module) {
                /**
                 *  Diagnostic plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic = (function () {

                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic = {};

                    // Indicates if a runtime permissions request is in progress
                    var requestInProgress = false;

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /**
                     * "Dangerous" permissions that need to be requested at run-time (Android 6.0/API 23 and above)
                     * See http://developer.android.com/guide/topics/security/permissions.html#perm-groups
                     * @type {Object}
                     */
                    Diagnostic.runtimePermission = // deprecated
                        Diagnostic.permission = {
                            "READ_CALENDAR": "READ_CALENDAR",
                            "WRITE_CALENDAR": "WRITE_CALENDAR",
                            "CAMERA": "CAMERA",
                            "READ_CONTACTS": "READ_CONTACTS",
                            "WRITE_CONTACTS": "WRITE_CONTACTS",
                            "GET_ACCOUNTS": "GET_ACCOUNTS",
                            "ACCESS_FINE_LOCATION": "ACCESS_FINE_LOCATION",
                            "ACCESS_COARSE_LOCATION": "ACCESS_COARSE_LOCATION",
                            "ACCESS_BACKGROUND_LOCATION": "ACCESS_BACKGROUND_LOCATION",
                            "RECORD_AUDIO": "RECORD_AUDIO",
                            "READ_PHONE_STATE": "READ_PHONE_STATE",
                            "CALL_PHONE": "CALL_PHONE",
                            "ADD_VOICEMAIL": "ADD_VOICEMAIL",
                            "USE_SIP": "USE_SIP",
                            "PROCESS_OUTGOING_CALLS": "PROCESS_OUTGOING_CALLS",
                            "READ_CALL_LOG": "READ_CALL_LOG",
                            "WRITE_CALL_LOG": "WRITE_CALL_LOG",
                            "SEND_SMS": "SEND_SMS",
                            "RECEIVE_SMS": "RECEIVE_SMS",
                            "READ_SMS": "READ_SMS",
                            "RECEIVE_WAP_PUSH": "RECEIVE_WAP_PUSH",
                            "RECEIVE_MMS": "RECEIVE_MMS",
                            "WRITE_EXTERNAL_STORAGE": "WRITE_EXTERNAL_STORAGE",
                            "READ_EXTERNAL_STORAGE": "READ_EXTERNAL_STORAGE",
                            "BODY_SENSORS": "BODY_SENSORS"
                        };

                    /**
                     * Permission groups indicate which associated permissions will also be requested if a given permission is requested.
                     * See http://developer.android.com/guide/topics/security/permissions.html#perm-groups
                     * @type {Object}
                     */
                    Diagnostic.runtimePermissionGroups = // deprecated
                        Diagnostic.permissionGroups = {
                            "CALENDAR": ["READ_CALENDAR", "WRITE_CALENDAR"],
                            "CAMERA": ["CAMERA"],
                            "CONTACTS": ["READ_CONTACTS", "WRITE_CONTACTS", "GET_ACCOUNTS"],
                            "LOCATION": ["ACCESS_FINE_LOCATION", "ACCESS_COARSE_LOCATION", "ACCESS_BACKGROUND_LOCATION"],
                            "MICROPHONE": ["RECORD_AUDIO"],
                            "PHONE": ["READ_PHONE_STATE", "CALL_PHONE", "ADD_VOICEMAIL", "USE_SIP", "PROCESS_OUTGOING_CALLS", "READ_CALL_LOG", "WRITE_CALL_LOG"],
                            "SENSORS": ["BODY_SENSORS"],
                            "SMS": ["SEND_SMS", "RECEIVE_SMS", "READ_SMS", "RECEIVE_WAP_PUSH", "RECEIVE_MMS"],
                            "STORAGE": ["READ_EXTERNAL_STORAGE", "WRITE_EXTERNAL_STORAGE"]
                        };

                    Diagnostic.runtimePermissionStatus = // deprecated
                        Diagnostic.permissionStatus = {
                            //  Location permission requested and 
                            //      app build SDK/user device is Android >10 and user granted background location ("all the time") permission,
                            //      or app build SDK/user device is Android 6-9 and user granted location permission,
                            //  or non-location permission requested
                            //      and app build SDK/user device is Android >=6 and user granted permission
                            //  or app build SDK/user device is Android <6
                            "GRANTED": "GRANTED",
                            //  Location permission requested 
                            //  and app build SDK/user device is Android >10 
                            //  and user granted background foreground location ("while-in-use") permission
                            "GRANTED_WHEN_IN_USE": "authorized_when_in_use",
                            // User denied access to this permission
                            "DENIED_ONCE": "DENIED_ONCE",
                            // User denied access to this permission and checked "Never Ask Again" box.
                            "DENIED_ALWAYS": "DENIED_ALWAYS",
                            // App has not yet requested access to this permission.
                            "NOT_REQUESTED": "NOT_REQUESTED"
                        };

                    Diagnostic.cpuArchitecture = {
                        UNKNOWN: "unknown",
                        ARMv6: "ARMv6",
                        ARMv7: "ARMv7",
                        ARMv8: "ARMv8",
                        X86: "X86",
                        X86_64: "X86_64",
                        MIPS: "MIPS",
                        MIPS_64: "MIPS_64"
                    };

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    // Placeholder listeners
                    Diagnostic._onNFCStateChange =
                        Diagnostic._onPermissionRequestComplete = function () { };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    function checkForInvalidPermissions(permissions, errorCallback) {
                        if (typeof (permissions) !== "object") permissions = [permissions];
                        var valid = true,
                            invalidPermissions = [];
                        permissions.forEach(function (permission) {
                            if (!Diagnostic.permission[permission]) {
                                invalidPermissions.push(permission);
                            }
                        });
                        if (invalidPermissions.length > 0) {
                            errorCallback("Invalid permissions specified: " + invalidPermissions.join(", "));
                            valid = false;
                        }
                        return valid;
                    }



                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    Diagnostic._ensureBoolean = function (callback) {
                        return function (result) {
                            callback(!!result);
                        }
                    };

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/


                    /***********
                     * General
                     ***********/

                    /**
                     * Enables debug mode, which logs native debug messages to the native and JS consoles.
                     * Debug mode is initially disabled on plugin initialisation.
                     *
                     * @param {Function} successCallback - The callback which will be called when enabling debug is successful.
                     */
                    Diagnostic.enableDebug = function (successCallback) {
                        return cordova.exec(successCallback,
                            null,
                            'Diagnostic',
                            'enableDebug', []);
                    };

                    /**
                     * Opens settings page for this app.
                     *
                     * @param {Function} successCallback - The callback which will be called when switch to settings is successful.
                     * @param {Function} errorCallback - The callback which will be called when switch to settings encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.switchToSettings = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic',
                            'switchToSettings', []);
                    };

                    /**
                     * Returns the current authorisation status for a given permission.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     *
                     * @param {Function} successCallback - function to call on successful retrieval of status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to retrieve authorisation status.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {String} permission - permission to request authorisation status for, defined as a value in cordova.plugins.diagnostic.permission
                     */
                    Diagnostic.getPermissionAuthorizationStatus = function (successCallback, errorCallback, permission) {
                        if (!checkForInvalidPermissions(permission, errorCallback)) return;

                        return cordova.exec(
                            successCallback,
                            errorCallback,
                            'Diagnostic',
                            'getPermissionAuthorizationStatus', [permission]);
                    };

                    /**
                     * Returns the current authorisation status for multiple permissions.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     *
                     * @param {Function} successCallback - function to call on successful retrieval of status.
                     * This callback function is passed a single object parameter which defines a key/value map, where the key is the requested permission defined as a value in cordova.plugins.diagnostic.permission, and the value is the current authorisation status of that permission as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to retrieve authorisation statuses.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Array} permissions - list of permissions to request authorisation statuses for, defined as values in cordova.plugins.diagnostic.permission
                     */
                    Diagnostic.getPermissionsAuthorizationStatus = function (successCallback, errorCallback, permissions) {
                        if (!checkForInvalidPermissions(permissions, errorCallback)) return;

                        return cordova.exec(
                            successCallback,
                            errorCallback,
                            'Diagnostic',
                            'getPermissionsAuthorizationStatus', [permissions]);
                    };


                    /**
                     * Requests app to be granted authorisation for a runtime permission.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     *
                     * @param {Function} successCallback - function to call on successful request for runtime permission.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {String} permission - permission to request authorisation for, defined as a value in cordova.plugins.diagnostic.permission
                     */
                    Diagnostic.requestRuntimePermission = function (successCallback, errorCallback, permission) {
                        if (!checkForInvalidPermissions(permission, errorCallback)) return;

                        if (requestInProgress) {
                            return onError("A runtime permissions request is already in progress");
                        }

                        function onSuccess(statuses) {
                            requestInProgress = false;
                            successCallback(statuses[permission]);
                            Diagnostic._onPermissionRequestComplete(statuses);
                        }

                        function onError(error) {
                            requestInProgress = false;
                            errorCallback(error);
                        }

                        requestInProgress = true;
                        return cordova.exec(
                            onSuccess,
                            onError,
                            'Diagnostic',
                            'requestRuntimePermission', [permission]);
                    };

                    /**
                     * Requests app to be granted authorisation for multiple runtime permissions.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     *
                     * @param {Function} successCallback - function to call on successful request for runtime permissions.
                     * This callback function is passed a single object parameter which defines a key/value map, where the key is the permission to request defined as a value in cordova.plugins.diagnostic.permission, and the value is the resulting authorisation status of that permission as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Array} permissions - permissions to request authorisation for, defined as values in cordova.plugins.diagnostic.permission
                     */

                    Diagnostic.requestRuntimePermissions = function (successCallback, errorCallback, permissions) {
                        if (!checkForInvalidPermissions(permissions, errorCallback)) return;

                        if (requestInProgress) {
                            return onError("A runtime permissions request is already in progress");
                        }

                        function onSuccess(statuses) {
                            requestInProgress = false;
                            successCallback(statuses);
                            Diagnostic._onPermissionRequestComplete(statuses);
                        }

                        function onError(error) {
                            requestInProgress = false;
                            errorCallback(error);
                        }

                        requestInProgress = true;
                        return cordova.exec(
                            onSuccess,
                            onError,
                            'Diagnostic',
                            'requestRuntimePermissions', [permissions]);

                    };

                    /**
                     * Indicates if the plugin is currently requesting a runtime permission via the native API.
                     * Note that only one request can be made concurrently because the native API cannot handle concurrent requests,
                     * so the plugin will invoke the error callback if attempting to make more than one simultaneous request.
                     * Multiple permission requests should be grouped into a single call since the native API is setup to handle batch requests of multiple permission groups.
                     *
                     * @return {boolean} true if a permission request is currently in progress.
                     */
                    Diagnostic.isRequestingPermission = function () {
                        return requestInProgress;
                    };

                    /**
                     * Registers a function to be called when a runtime permission request has completed.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when a runtime permission request has completed.
                     * This callback function is passed a single object parameter which defines a key/value map, where the key is the permission requested (defined as a value in cordova.plugins.diagnostic.permission) and the value is the resulting authorisation status of that permission as a value in cordova.plugins.diagnostic.permissionStatus.
                     */
                    Diagnostic.registerPermissionRequestCompleteHandler = function (successCallback) {
                        Diagnostic._onPermissionRequestComplete = successCallback || function () { };
                    };


                    /**
                     * Switches to the wireless settings page in the Settings app.
                     * Allows configuration of wireless controls such as Wi-Fi, Bluetooth and Mobile networks.
                     */
                    Diagnostic.switchToWirelessSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic',
                            'switchToWirelessSettings', []);
                    };


                    /**
                     * Switches to the Mobile Data page in the Settings app
                     */
                    Diagnostic.switchToMobileDataSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic',
                            'switchToMobileDataSettings', []);
                    };

                    /**
                     * Checks if ADB mode(debug mode) is switched on.
                     * Returns true if ADB mode is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if ADB mode(debug mode) is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isADBModeEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic',
                            'isADBModeEnabled', []);
                    };

                    /**
                     * Checks if the device is rooted.
                     * Returns true if the device is rooted.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if the device is rooted.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isDeviceRooted = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic',
                            'isDeviceRooted', []);
                    };

                    /**
                     * Restarts the application.
                     * By default, a "warm" restart will be performed in which the main Cordova activity is immediately restarted, causing the Webview instance to be recreated.
                     * However, if the `cold` parameter is set to true, then the application will be "cold" restarted, meaning a system exit will be performed, causing the entire application to be restarted.
                     * This is useful if you want to fully reset the native application state but will cause the application to briefly disappear and re-appear.
                     *
                     * Note: There is no successCallback() since if the operation is successful, the application will restart immediately before any success callback can be applied.
                     *
                     * @param {Function} errorCallback - function to call on failure to retrieve authorisation status.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Boolean} cold - if true the application will be cold restarted. Defaults to false.
                     */
                    Diagnostic.restart = function (errorCallback, cold) {
                        return cordova.exec(
                            null,
                            errorCallback,
                            'Diagnostic',
                            'restart', [cold]);
                    };

                    /**
                     * Returns CPU architecture of the current device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.cpuArchitecture`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getArchitecture = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic',
                            'getArchitecture', []);
                    };

                    /**
                     * Checks if the device data roaming setting is enabled.
                     * Returns true if data roaming is enabled.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if data roaming is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isDataRoamingEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic',
                            'isDataRoamingEnabled', []);
                    };

                    /************
                     * Location *
                     ************/

                    /**
                     * Checks if location is available for use by the app.
                     * On Android, this returns true if Location Mode is enabled and any mode is selected (e.g. Battery saving, Device only, High accuracy)
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback - The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location is available for use.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isLocationAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if the device location setting is enabled.
                     * On Android, this returns true if Location Mode is enabled and any mode is selected (e.g. Battery saving, Device only, High accuracy)
                     *
                     * @param {Function} successCallback - The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location setting is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isLocationEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if high-accuracy locations are available to the app from GPS hardware.
                     * Returns true if Location mode is enabled and is set to "Device only" or "High accuracy"
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if high-accuracy GPS-based location is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isGpsLocationAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isGpsLocationAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if the device location setting is set to return high-accuracy locations from GPS hardware.
                     * Returns true if Location mode is enabled and is set to either:
                     * Device only = GPS hardware only (high accuracy)
                     * High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device setting is set to return high-accuracy GPS-based location.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isGpsLocationEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isGpsLocationEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if low-accuracy locations are available to the app from network triangulation/WiFi access points.
                     * Returns true if Location mode is enabled and is set to "Battery saving" or "High accuracy"
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if low-accuracy network-based location is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isNetworkLocationAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isNetworkLocationAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if the device location setting is set to return low-accuracy locations from network triangulation/WiFi access points.
                     * Returns true if Location mode is enabled and is set to either:
                     * Battery saving = network triangulation and Wifi network IDs (low accuracy)
                     * High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device setting is set to return low-accuracy network-based location.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isNetworkLocationEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isNetworkLocationEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Returns the current location mode setting for the device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.locationMode`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getLocationMode = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.getLocationMode.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Switches to the Location page in the Settings app
                     */
                    Diagnostic.switchToLocationSettings = function () {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.switchToLocationSettings.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Requests location authorization for the application.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     */
                    Diagnostic.requestLocationAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.requestLocationAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Returns the location authorization status for the application.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic.getLocationAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.getLocationAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if the application is authorized to use location.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to use location.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic.isLocationAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Registers a function to be called when a change in Location state occurs.
                     * On Android, this occurs when the Location Mode is changed.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the Location state changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.locationMode`.
                     */
                    Diagnostic.registerLocationStateChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.registerLocationStateChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /************
                     * WiFi     *
                     ************/

                    /**
                     * Checks if Wifi is enabled.
                     * On Android this returns true if the WiFi setting is set to enabled.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if WiFi is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isWifiAvailable = Diagnostic.isWifiEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.wifi) {
                            cordova.plugins.diagnostic.wifi.isWifiAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Wifi module is not installed";
                        }
                    };

                    /**
                     * Switches to the WiFi page in the Settings app
                     */
                    Diagnostic.switchToWifiSettings = function () {
                        if (cordova.plugins.diagnostic.wifi) {
                            cordova.plugins.diagnostic.wifi.switchToWifiSettings.apply(this, arguments);
                        } else {
                            throw "Diagnostic Wifi module is not installed";
                        }
                    };

                    /**
                     * Enables/disables WiFi on the device.
                     *
                     * @param {Function} successCallback - function to call on successful setting of WiFi state
                     * @param {Function} errorCallback - function to call on failure to set WiFi state.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Boolean} state - WiFi state to set: TRUE for enabled, FALSE for disabled.
                     */
                    Diagnostic.setWifiState = function (successCallback, errorCallback, state) {
                        if (cordova.plugins.diagnostic.wifi) {
                            cordova.plugins.diagnostic.wifi.setWifiState.apply(this, arguments);
                        } else {
                            throw "Diagnostic Wifi module is not installed";
                        }
                    };

                    /************
                     * Camera   *
                     ************/

                    /**
                     * Checks if camera is usable: both present and authorised for use.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present and authorized for use.
                     *  - {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic.isCameraAvailable = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Checks if camera hardware is present on device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCameraPresent = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraPresent.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Requests authorisation for runtime permissions to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     *  - {Function} errorCallback - function to call on failure to request authorisation.
                     *  - {Boolean} externalStorage - (Android only) If true, requests permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic.requestCameraAuthorization = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.requestCameraAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Returns the authorisation status for runtime permissions to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     *  - {Function} errorCallback - function to call on failure to request authorisation status.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic.getCameraAuthorizationStatus = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.getCameraAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Checks if the application is authorized to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to use location.
                     *  - {Function} errorCallback - function to call on failure to request authorisation status.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic.isCameraAuthorized = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**********************
                     * External storage   *
                     **********************/
                    /**
                     * Requests authorisation for runtime permission to use the external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permission is already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permission.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     */
                    Diagnostic.requestExternalStorageAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.external_storage) {
                            cordova.plugins.diagnostic.external_storage.requestExternalStorageAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic External Storage module is not installed";
                        }
                    };

                    /**
                     * Returns the authorisation status for runtime permission to use the external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permission is already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permission status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic.getExternalStorageAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.external_storage) {
                            cordova.plugins.diagnostic.external_storage.getExternalStorageAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic External Storage module is not installed";
                        }
                    };

                    /**
                     * Checks if the application is authorized to use external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to external storage.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic.isExternalStorageAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.external_storage) {
                            cordova.plugins.diagnostic.external_storage.isExternalStorageAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic External Storage module is not installed";
                        }
                    };

                    /**
                     * Returns details of external SD card(s): absolute path, is writable, free space
                     * @param {Function} successCallback - function to call on successful request for external SD card details.
                     * This callback function is passed a single argument which is an array consisting of an entry for each external storage location found.
                     * Each array entry is an object with the following keys:
                     * - {String} path - absolute path to the storage location
                     * - {String} filePath - absolute path prefixed with file protocol for use with cordova-plugin-file
                     * - {Boolean} canWrite - true if the location is writable
                     * - {Integer} freeSpace - number of bytes of free space on the device on which the storage locaiton is mounted.
                     * - {String} type - indicates the type of storage location: either "application" if the path is an Android application sandbox path or "root" if the path is the device root.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic.getExternalSdCardDetails = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.external_storage) {
                            cordova.plugins.diagnostic.external_storage.getExternalSdCardDetails.apply(this, arguments);
                        } else {
                            throw "Diagnostic External Storage module is not installed";
                        }
                    };


                    /***************
                     * Bluetooth   *
                     ***************/

                    /**
                     * Checks if Bluetooth is available to the app.
                     * Returns true if the device has Bluetooth capabilities and if so that Bluetooth is switched on
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Bluetooth is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isBluetoothAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.isBluetoothAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Checks if the device setting for Bluetooth is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Bluetooth is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isBluetoothEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.isBluetoothEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Enables/disables Bluetooth on the device.
                     *
                     * @param {Function} successCallback - function to call on successful setting of Bluetooth state
                     * @param {Function} errorCallback - function to call on failure to set Bluetooth state.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Boolean} state - Bluetooth state to set: TRUE for enabled, FALSE for disabled.
                     */
                    Diagnostic.setBluetoothState = function (successCallback, errorCallback, state) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.setBluetoothState.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Returns current state of Bluetooth hardware on the device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getBluetoothState = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.getBluetoothState.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Registers a listener function to call when the state of Bluetooth hardware changes.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the state of Bluetooth hardware changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     */
                    Diagnostic.registerBluetoothStateChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.registerBluetoothStateChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };


                    /**
                     * Checks if the device has Bluetooth capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.hasBluetoothSupport = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.hasBluetoothSupport.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.hasBluetoothLESupport = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.hasBluetoothLESupport.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.hasBluetoothLESupport = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.hasBluetoothLESupport.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) peripheral capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html#roles.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE peripheral capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.hasBluetoothLEPeripheralSupport = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.hasBluetoothLEPeripheralSupport.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Switches to the Bluetooth page in the Settings app
                     */
                    Diagnostic.switchToBluetoothSettings = function () {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.switchToBluetoothSettings.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**********************
                     * Remote Notifications
                     **********************/

                    /**
                     * Checks if remote notifications is available to the app.
                     * Returns true if remote notifications are switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if remote notifications is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isRemoteNotificationsEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.isRemoteNotificationsEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };


                    /***************************
                     * Microphone / Record Audio
                     ***************************/

                    /**
                     * Checks if the application is authorized to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isMicrophoneAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.isMicrophoneAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };

                    /**
                     * Returns the authorization status for the application to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getMicrophoneAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.getMicrophoneAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };

                    /**
                     * Requests access to microphone if authorization was never granted nor denied, will only return access status otherwise.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestMicrophoneAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.requestMicrophoneAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };

                    /*************
                     * Contacts
                     *************/

                    /**
                     *Checks if the application is authorized to use contacts (address book).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isContactsAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.isContactsAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /**
                     * Returns the contacts (address book) authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getContactsAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.getContactsAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /**
                     *  Requests contacts (address book) authorization for the application.
                     *  Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestContactsAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.requestContactsAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /*************
                     * Calendar
                     *************/

                    /**
                     *Checks if the application is authorized to use calendar.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCalendarAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.isCalendarAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /**
                     * Returns the calendar authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getCalendarAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.getCalendarAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /**
                     *  Requests calendar authorization for the application.
                     *  Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestCalendarAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.requestCalendarAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /*************
                     * NFC
                     *************/

                    /**
                     * Checks if NFC hardware is present on device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is present
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isNFCPresent = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.nfc) {
                            cordova.plugins.diagnostic.nfc.isNFCPresent.apply(this, arguments);
                        } else {
                            throw "Diagnostic NFC module is not installed";
                        }
                    };

                    /**
                     * Checks if the device setting for NFC is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isNFCEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.nfc) {
                            cordova.plugins.diagnostic.nfc.isNFCEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic NFC module is not installed";
                        }
                    };

                    /**
                     * Checks if NFC is available to the app.
                     * Returns true if the device has NFC capabilities and if so that NFC is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isNFCAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.nfc) {
                            cordova.plugins.diagnostic.nfc.isNFCAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic NFC module is not installed";
                        }
                    };

                    /**
                     * Registers a function to be called when a change in NFC state occurs.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the NFC state changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.NFCState`.
                     */
                    Diagnostic.registerNFCStateChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.nfc) {
                            cordova.plugins.diagnostic.nfc.registerNFCStateChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic NFC module is not installed";
                        }
                    };


                    /**
                     * Switches to the nfc settings page in the Settings app
                     */
                    Diagnostic.switchToNFCSettings = function () {
                        if (cordova.plugins.diagnostic.nfc) {
                            cordova.plugins.diagnostic.nfc.switchToNFCSettings.apply(this, arguments);
                        } else {
                            throw "Diagnostic NFC module is not installed";
                        }
                    };

                    return Diagnostic;
                });
                module.exports = new Diagnostic();
            });

            cordova.define("cordova-diagnostic-plugin.bluetooth", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Bluetooth plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Bluetooth = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Bluetooth = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.bluetoothState = Diagnostic_Bluetooth.bluetoothState = {
                        "UNKNOWN": "unknown",
                        "POWERED_OFF": "powered_off",
                        "POWERED_ON": "powered_on",
                        "POWERING_OFF": "powering_off",
                        "POWERING_ON": "powering_on"
                    };


                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    // Placeholder listeners
                    Diagnostic_Bluetooth._onBluetoothStateChange = function () { };

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if Bluetooth is available to the app.
                     * Returns true if the device has Bluetooth capabilities and if so that Bluetooth is switched on
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Bluetooth is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.isBluetoothAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'isBluetoothAvailable', []);
                    };

                    /**
                     * Checks if the device setting for Bluetooth is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Bluetooth is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.isBluetoothEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'isBluetoothEnabled', []);
                    };

                    /**
                     * Enables/disables Bluetooth on the device.
                     *
                     * @param {Function} successCallback - function to call on successful setting of Bluetooth state
                     * @param {Function} errorCallback - function to call on failure to set Bluetooth state.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Boolean} state - Bluetooth state to set: TRUE for enabled, FALSE for disabled.
                     */
                    Diagnostic_Bluetooth.setBluetoothState = function (successCallback, errorCallback, state) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'setBluetoothState', [state]);
                    };

                    /**
                     * Returns current state of Bluetooth hardware on the device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.getBluetoothState = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'getBluetoothState', []);
                    };

                    /**
                     * Registers a listener function to call when the state of Bluetooth hardware changes.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the state of Bluetooth hardware changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     */
                    Diagnostic_Bluetooth.registerBluetoothStateChangeHandler = function (successCallback) {
                        Diagnostic_Bluetooth._onBluetoothStateChange = successCallback || function () { };
                    };


                    /**
                     * Checks if the device has Bluetooth capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.hasBluetoothSupport = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'hasBluetoothSupport', []);
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.hasBluetoothLESupport = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'hasBluetoothLESupport', []);
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.hasBluetoothLESupport = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'hasBluetoothLESupport', []);
                    };

                    /**
                     * Checks if the device has Bluetooth Low Energy (LE) peripheral capabilities.
                     * See http://developer.android.com/guide/topics/connectivity/bluetooth-le.html#roles.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE peripheral capabilities.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.hasBluetoothLEPeripheralSupport = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'hasBluetoothLEPeripheralSupport', []);
                    };

                    /**
                     * Switches to the Bluetooth page in the Settings app
                     */
                    Diagnostic_Bluetooth.switchToBluetoothSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic_Bluetooth',
                            'switchToBluetoothSettings', []);
                    };



                    return Diagnostic_Bluetooth;
                });
                module.exports = new Diagnostic_Bluetooth();
            });

            cordova.define("cordova-diagnostic-plugin.calendar", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Calendar plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Calendar = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Calendar = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     *Checks if the application is authorized to use calendar.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.isCalendarAuthorized = function (successCallback, errorCallback) {
                        function onSuccess(status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        }
                        Diagnostic_Calendar.getCalendarAuthorizationStatus(onSuccess, errorCallback);
                    };

                    /**
                     * Returns the calendar authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.getCalendarAuthorizationStatus = function (successCallback, errorCallback) {
                        Diagnostic.getPermissionAuthorizationStatus(successCallback, errorCallback, Diagnostic.permission.READ_CALENDAR);
                    };

                    /**
                     *  Requests calendar authorization for the application.
                     *  Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.requestCalendarAuthorization = function (successCallback, errorCallback) {
                        Diagnostic.requestRuntimePermission(successCallback, errorCallback, Diagnostic.permission.READ_CALENDAR);
                    };

                    return Diagnostic_Calendar;
                });
                module.exports = new Diagnostic_Calendar();
            });

            cordova.define("cordova-diagnostic-plugin.camera", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Camera plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Camera = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Camera = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    function combineCameraStatuses(statuses) {
                        var cameraStatus = statuses[Diagnostic.permission.CAMERA],
                            mediaStatus = statuses[Diagnostic.permission.READ_EXTERNAL_STORAGE],
                            status;

                        if (cameraStatus === Diagnostic.permissionStatus.DENIED_ALWAYS || mediaStatus === Diagnostic.permissionStatus.DENIED_ALWAYS) {
                            status = Diagnostic.permissionStatus.DENIED_ALWAYS;
                        } else if (cameraStatus === Diagnostic.permissionStatus.DENIED_ONCE || mediaStatus === Diagnostic.permissionStatus.DENIED_ONCE) {
                            status = Diagnostic.permissionStatus.DENIED_ONCE;
                        } else if (cameraStatus === Diagnostic.permissionStatus.NOT_REQUESTED || mediaStatus === Diagnostic.permissionStatus.NOT_REQUESTED) {
                            status = Diagnostic.permissionStatus.NOT_REQUESTED;
                        } else {
                            status = Diagnostic.permissionStatus.GRANTED;
                        }
                        return status;
                    }

                    function mapFromLegacyCameraApi() {
                        var params;
                        if (typeof arguments[0] === "function") {
                            params = (arguments.length > 2 && typeof arguments[2] === "object") ? arguments[2] : {};
                            params.successCallback = arguments[0];
                            if (arguments.length > 1 && typeof arguments[1] === "function") {
                                params.errorCallback = arguments[1];
                            }
                            if (arguments.length > 2 && arguments[2] === false) {
                                params.externalStorage = arguments[2];
                            }
                        } else { // if (typeof arguments[0]  === "object")
                            params = arguments[0];
                        }
                        return params;
                    }

                    function numberOfKeys(obj) {
                        var count = 0;
                        for (var k in obj) {
                            count++;
                        }
                        return count;
                    }


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if camera is usable: both present and authorised for use.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present and authorized for use.
                     *  - {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic_Camera.isCameraAvailable = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        params.successCallback = params.successCallback || function () { };
                        Diagnostic_Camera.isCameraPresent(function (isPresent) {
                            if (isPresent) {
                                Diagnostic_Camera.isCameraAuthorized(params);
                            } else {
                                params.successCallback(!!isPresent);
                            }
                        }, params.errorCallback);
                    };

                    /**
                     * Checks if camera hardware is present on device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.isCameraPresent = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Camera',
                            'isCameraPresent', []);
                    };

                    /**
                     * Requests authorisation for runtime permissions to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     *  - {Function} errorCallback - function to call on failure to request authorisation.
                     *  - {Boolean} externalStorage - (Android only) If true, requests permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic_Camera.requestCameraAuthorization = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        var permissions = [Diagnostic.permission.CAMERA];
                        if (params.externalStorage !== false) {
                            permissions.push(Diagnostic.permission.READ_EXTERNAL_STORAGE);
                        }

                        params.successCallback = params.successCallback || function () { };
                        var onSuccess = function (statuses) {
                            params.successCallback(numberOfKeys(statuses) > 1 ? combineCameraStatuses(statuses) : statuses[Diagnostic.permission.CAMERA]);
                        };
                        Diagnostic.requestRuntimePermissions(onSuccess, params.errorCallback, permissions);
                    };

                    /**
                     * Returns the authorisation status for runtime permissions to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     *  - {Function} errorCallback - function to call on failure to request authorisation status.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic_Camera.getCameraAuthorizationStatus = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        var permissions = [Diagnostic.permission.CAMERA];
                        if (params.externalStorage !== false) {
                            permissions.push(Diagnostic.permission.READ_EXTERNAL_STORAGE);
                        }

                        params.successCallback = params.successCallback || function () { };
                        var onSuccess = function (statuses) {
                            params.successCallback(numberOfKeys(statuses) > 1 ? combineCameraStatuses(statuses) : statuses[Diagnostic.permission.CAMERA]);
                        };
                        Diagnostic.getPermissionsAuthorizationStatus(onSuccess, params.errorCallback, permissions);
                    };

                    /**
                     * Checks if the application is authorized to use the camera.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to use location.
                     *  - {Function} errorCallback - function to call on failure to request authorisation status.
                     *  - {Boolean} externalStorage - (Android only) If true, checks permission for READ_EXTERNAL_STORAGE in addition to CAMERA run-time permission.
                     *  cordova-plugin-camera@2.2+ requires both of these permissions. Defaults to true.
                     */
                    Diagnostic_Camera.isCameraAuthorized = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        params.successCallback = params.successCallback || function () { };
                        var onSuccess = function (status) {
                            params.successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        };

                        Diagnostic_Camera.getCameraAuthorizationStatus({
                            successCallback: onSuccess,
                            errorCallback: params.errorCallback,
                            externalStorage: params.externalStorage
                        });
                    };

                    return Diagnostic_Camera;
                });
                module.exports = new Diagnostic_Camera();
            });

            cordova.define("cordova-diagnostic-plugin.contacts", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Contacts plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Contacts = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Contacts = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     *Checks if the application is authorized to use contacts (address book).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.isContactsAuthorized = function (successCallback, errorCallback) {
                        function onSuccess(status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        }
                        Diagnostic_Contacts.getContactsAuthorizationStatus(onSuccess, errorCallback);
                    };

                    /**
                     * Returns the contacts (address book) authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.getContactsAuthorizationStatus = function (successCallback, errorCallback) {
                        Diagnostic.getPermissionAuthorizationStatus(successCallback, errorCallback, Diagnostic.permission.READ_CONTACTS);
                    };

                    /**
                     *  Requests contacts (address book) authorization for the application.
                     *  Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.requestContactsAuthorization = function (successCallback, errorCallback) {
                        Diagnostic.requestRuntimePermission(successCallback, errorCallback, Diagnostic.permission.READ_CONTACTS);
                    };


                    return Diagnostic_Contacts;
                });
                module.exports = new Diagnostic_Contacts();
            });
            cordova.define("cordova-diagnostic-plugin.external_storage", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic External Storage plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_External_Storage = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_External_Storage = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Requests authorisation for runtime permission to use the external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permission is already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permission.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     */
                    Diagnostic_External_Storage.requestExternalStorageAuthorization = function (successCallback, errorCallback) {
                        Diagnostic.requestRuntimePermission(successCallback, errorCallback, Diagnostic.permission.READ_EXTERNAL_STORAGE);
                    };

                    /**
                     * Returns the authorisation status for runtime permission to use the external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permission is already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permission status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic_External_Storage.getExternalStorageAuthorizationStatus = function (successCallback, errorCallback) {
                        Diagnostic.getPermissionAuthorizationStatus(successCallback, errorCallback, Diagnostic.permission.READ_EXTERNAL_STORAGE);
                    };

                    /**
                     * Checks if the application is authorized to use external storage.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to external storage.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic_External_Storage.isExternalStorageAuthorized = function (successCallback, errorCallback) {
                        function onSuccess(status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        }
                        Diagnostic_External_Storage.getExternalStorageAuthorizationStatus(onSuccess, errorCallback);
                    };

                    /**
                     * Returns details of external SD card(s): absolute path, is writable, free space
                     * @param {Function} successCallback - function to call on successful request for external SD card details.
                     * This callback function is passed a single argument which is an array consisting of an entry for each external storage location found.
                     * Each array entry is an object with the following keys:
                     * - {String} path - absolute path to the storage location
                     * - {String} filePath - absolute path prefixed with file protocol for use with cordova-plugin-file
                     * - {Boolean} canWrite - true if the location is writable
                     * - {Integer} freeSpace - number of bytes of free space on the device on which the storage locaiton is mounted.
                     * - {String} type - indicates the type of storage location: either "application" if the path is an Android application sandbox path or "root" if the path is the device root.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic_External_Storage.getExternalSdCardDetails = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_External_Storage',
                            'getExternalSdCardDetails', []);
                    };

                    return Diagnostic_External_Storage;
                });
                module.exports = new Diagnostic_External_Storage();
            });
            cordova.define("cordova-diagnostic-plugin.location", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Location plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Location = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Location = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.locationMode = Diagnostic_Location.locationMode = {
                        "HIGH_ACCURACY": "high_accuracy",
                        "DEVICE_ONLY": "device_only",
                        "BATTERY_SAVING": "battery_saving",
                        "LOCATION_OFF": "location_off"
                    };


                    Diagnostic.locationAuthorizationMode = Diagnostic_Location.locationAuthorizationMode = {
                        "ALWAYS": "always",
                        "WHEN_IN_USE": "when_in_use"
                    };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    function combineLocationStatuses(statuses) {
                        var coarseStatus = statuses[Diagnostic.permission.ACCESS_COARSE_LOCATION],
                            fineStatus = statuses[Diagnostic.permission.ACCESS_FINE_LOCATION],
                            backgroundStatus = statuses[Diagnostic.permission.ACCESS_BACKGROUND_LOCATION],
                            status;

                        if (coarseStatus === Diagnostic.permissionStatus.DENIED_ALWAYS || fineStatus === Diagnostic.permissionStatus.DENIED_ALWAYS) {
                            status = Diagnostic.permissionStatus.DENIED_ALWAYS;
                        } else if (coarseStatus === Diagnostic.permissionStatus.DENIED_ONCE || fineStatus === Diagnostic.permissionStatus.DENIED_ONCE) {
                            status = Diagnostic.permissionStatus.DENIED_ONCE;
                        } else if (coarseStatus === Diagnostic.permissionStatus.NOT_REQUESTED || fineStatus === Diagnostic.permissionStatus.NOT_REQUESTED) {
                            status = Diagnostic.permissionStatus.NOT_REQUESTED;
                        } else if (typeof backgroundStatus === 'undefined' || backgroundStatus === Diagnostic.permissionStatus.GRANTED) {
                            status = Diagnostic.permissionStatus.GRANTED;
                        } else {
                            status = Diagnostic.permissionStatus.GRANTED_WHEN_IN_USE;
                        }
                        return status;
                    }

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    // Placeholder listener
                    Diagnostic_Location._onLocationStateChange = function () { };

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if location is available for use by the app.
                     * On Android, this returns true if Location Mode is enabled and any mode is selected (e.g. Battery saving, Device only, High accuracy)
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback - The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location is available for use.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isLocationAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isLocationAvailable', []);
                    };

                    /**
                     * Checks if the device location setting is enabled.
                     * On Android, this returns true if Location Mode is enabled and any mode is selected (e.g. Battery saving, Device only, High accuracy)
                     *
                     * @param {Function} successCallback - The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location setting is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isLocationEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isLocationEnabled', []);
                    };

                    /**
                     * Checks if high-accuracy locations are available to the app from GPS hardware.
                     * Returns true if Location mode is enabled and is set to "Device only" or "High accuracy"
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if high-accuracy GPS-based location is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isGpsLocationAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isGpsLocationAvailable', []);
                    };

                    /**
                     * Checks if the device location setting is set to return high-accuracy locations from GPS hardware.
                     * Returns true if Location mode is enabled and is set to either:
                     * Device only = GPS hardware only (high accuracy)
                     * High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device setting is set to return high-accuracy GPS-based location.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isGpsLocationEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isGpsLocationEnabled', []);
                    };

                    /**
                     * Checks if low-accuracy locations are available to the app from network triangulation/WiFi access points.
                     * Returns true if Location mode is enabled and is set to "Battery saving" or "High accuracy"
                     * AND if the app is authorised to use location.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if low-accuracy network-based location is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isNetworkLocationAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isNetworkLocationAvailable', []);
                    };

                    /**
                     * Checks if the device location setting is set to return low-accuracy locations from network triangulation/WiFi access points.
                     * Returns true if Location mode is enabled and is set to either:
                     * Battery saving = network triangulation and Wifi network IDs (low accuracy)
                     * High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device setting is set to return low-accuracy network-based location.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isNetworkLocationEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isNetworkLocationEnabled', []);
                    };

                    /**
                     * Returns the current location mode setting for the device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.locationMode`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.getLocationMode = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Location',
                            'getLocationMode', []);
                    };

                    /**
                     * Switches to the Location page in the Settings app
                     */
                    Diagnostic_Location.switchToLocationSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic_Location',
                            'switchToLocationSettings', []);
                    };

                    /**
                     * Requests location authorization for the application.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions.
                     * This callback function is passed a single string parameter which defines the resulting authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation.
                     * @param {String} mode - (optional) location authorization mode as a constant in `cordova.plugins.diagnostic.locationAuthorizationMode`.
                     * If not specified, defaults to `cordova.plugins.diagnostic.locationAuthorizationMode.WHEN_IN_USE`.
                     */
                    Diagnostic_Location.requestLocationAuthorization = function (successCallback, errorCallback, mode) {
                        function onSuccess(statuses) {
                            successCallback(combineLocationStatuses(statuses));
                        }
                        return cordova.exec(
                            onSuccess,
                            errorCallback,
                            'Diagnostic_Location',
                            'requestLocationAuthorization', [mode === Diagnostic_Location.locationAuthorizationMode.ALWAYS]
                        );
                    };

                    /**
                     * Returns the combined location authorization status for the application.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single string parameter which defines the current authorisation status as a value in cordova.plugins.diagnostic.permissionStatus.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic_Location.getLocationAuthorizationStatus = function (successCallback, errorCallback) {
                        function onSuccess(statuses) {
                            successCallback(combineLocationStatuses(statuses));
                        }
                        Diagnostic.getPermissionsAuthorizationStatus(onSuccess, errorCallback, [
                            Diagnostic.permission.ACCESS_COARSE_LOCATION,
                            Diagnostic.permission.ACCESS_FINE_LOCATION,
                            Diagnostic.permission.ACCESS_BACKGROUND_LOCATION
                        ]);
                    };

                    /**
                     * Checks if the application is authorized to use location.
                     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
                     * @param {Function} successCallback - function to call on successful request for runtime permissions status.
                     * This callback function is passed a single boolean parameter which is TRUE if the app currently has runtime authorisation to use location.
                     * @param {Function} errorCallback - function to call on failure to request authorisation status.
                     */
                    Diagnostic_Location.isLocationAuthorized = function (successCallback, errorCallback) {
                        function onSuccess(status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED || status === Diagnostic.permissionStatus.GRANTED_WHEN_IN_USE);
                        }
                        Diagnostic_Location.getLocationAuthorizationStatus(onSuccess, errorCallback);
                    };

                    /**
                     * Registers a function to be called when a change in Location state occurs.
                     * On Android, this occurs when the Location Mode is changed.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the Location state changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.locationMode`.
                     */
                    Diagnostic_Location.registerLocationStateChangeHandler = function (successCallback) {
                        Diagnostic_Location._onLocationStateChange = successCallback || function () { };
                    };

                    return Diagnostic_Location;
                });
                module.exports = new Diagnostic_Location();
            });
            cordova.define("cordova-diagnostic-plugin.microphone", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Microphone plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Microphone = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Microphone = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if the application is authorized to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.isMicrophoneAuthorized = function (successCallback, errorCallback) {
                        function onSuccess(status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        }
                        Diagnostic_Microphone.getMicrophoneAuthorizationStatus(onSuccess, errorCallback);
                    };

                    /**
                     * Returns the authorization status for the application to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ONCE`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.getMicrophoneAuthorizationStatus = function (successCallback, errorCallback) {
                        Diagnostic.getPermissionAuthorizationStatus(successCallback, errorCallback, Diagnostic.permission.RECORD_AUDIO);
                    };

                    /**
                     * Requests access to microphone if authorization was never granted nor denied, will only return access status otherwise.
                     *
                     * @param {Function} successCallback - The callback which will be called when authorization request is successful.
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.requestMicrophoneAuthorization = function (successCallback, errorCallback) {
                        Diagnostic.requestRuntimePermission(successCallback, errorCallback, Diagnostic.permission.RECORD_AUDIO);
                    };

                    return Diagnostic_Microphone;
                });
                module.exports = new Diagnostic_Microphone();
            });
            cordova.define("cordova-diagnostic-plugin.nfc", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic NFC plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_NFC = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_NFC = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.NFCState = Diagnostic_NFC.NFCState = {
                        "UNKNOWN": "unknown",
                        "POWERED_OFF": "powered_off",
                        "POWERING_ON": "powering_on",
                        "POWERED_ON": "powered_on",
                        "POWERING_OFF": "powering_off"
                    };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    // Placeholder listener
                    Diagnostic_NFC._onNFCStateChange = function () { };

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if NFC hardware is present on device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is present
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_NFC.isNFCPresent = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_NFC',
                            'isNFCPresent', []);
                    };

                    /**
                     * Checks if the device setting for NFC is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_NFC.isNFCEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_NFC',
                            'isNFCEnabled', []);
                    };

                    /**
                     * Checks if NFC is available to the app.
                     * Returns true if the device has NFC capabilities and if so that NFC is switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if NFC is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_NFC.isNFCAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_NFC',
                            'isNFCAvailable', []);
                    };

                    /**
                     * Registers a function to be called when a change in NFC state occurs.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the NFC state changes.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.NFCState`.
                     */
                    Diagnostic_NFC.registerNFCStateChangeHandler = function (successCallback) {
                        Diagnostic_NFC._onNFCStateChange = successCallback || function () { };
                    };

                    /**
                     * Switches to the nfc settings page in the Settings app
                     */
                    Diagnostic_NFC.switchToNFCSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic_NFC',
                            'switchToNFCSettings', []);
                    };

                    return Diagnostic_NFC;
                });
                module.exports = new Diagnostic_NFC();
            });
            cordova.define("cordova-diagnostic-plugin.notifications", function (require, exports, module) {

                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Notifications plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Notifications = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Notifications = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if remote notifications is available to the app.
                     * Returns true if remote notifications are switched on.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if remote notifications is available.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Notifications.isRemoteNotificationsEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Notifications',
                            'isRemoteNotificationsEnabled', []);
                    };

                    return Diagnostic_Notifications;
                });
                module.exports = new Diagnostic_Notifications();

            });
            cordova.define("cordova-diagnostic-plugin.wifi", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Wifi plugin for Android
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Wifi = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Wifi = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if Wifi is enabled.
                     * On Android this returns true if the WiFi setting is set to enabled.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if WiFi is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Wifi.isWifiAvailable = Diagnostic_Wifi.isWifiEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Wifi',
                            'isWifiAvailable', []);
                    };

                    /**
                     * Switches to the WiFi page in the Settings app
                     */
                    Diagnostic_Wifi.switchToWifiSettings = function () {
                        return cordova.exec(null,
                            null,
                            'Diagnostic_Wifi',
                            'switchToWifiSettings', []);
                    };

                    /**
                     * Enables/disables WiFi on the device.
                     *
                     * @param {Function} successCallback - function to call on successful setting of WiFi state
                     * @param {Function} errorCallback - function to call on failure to set WiFi state.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Boolean} state - WiFi state to set: TRUE for enabled, FALSE for disabled.
                     */
                    Diagnostic_Wifi.setWifiState = function (successCallback, errorCallback, state) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Wifi',
                            'setWifiState', [state]);
                    };

                    return Diagnostic_Wifi;
                });
                module.exports = new Diagnostic_Wifi();
            });
            //Android Ends
        }
        if (DronaHQ.onIos) {
            //iOS
            cordova.define("cordova.plugins.diagnostic.Diagnostic", function (require, exports, module) {
                /**
                 *  Diagnostic plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic = (function () {

                    /********************
                     * Internal functions
                     ********************/


                    /********************
                     * Public properties
                     ********************/
                    var Diagnostic = {};

                    /**
                     * Permission states
                     * @type {object}
                     */
                    Diagnostic.permissionStatus = {
                        "NOT_REQUESTED": "not_determined", // App has not yet requested this permission
                        "DENIED_ALWAYS": "denied_always", // User denied access to this permission
                        "RESTRICTED": "restricted", // Permission is unavailable and user cannot enable it.  For example, when parental controls are in effect for the current user.
                        "GRANTED": "authorized", //  User granted access to this permission
                        "GRANTED_WHEN_IN_USE": "authorized_when_in_use" //  User granted access use location permission only when app is in use
                    };

                    Diagnostic.cpuArchitecture = {
                        UNKNOWN: "unknown",
                        ARMv6: "ARMv6",
                        ARMv7: "ARMv7",
                        ARMv8: "ARMv8",
                        X86: "X86",
                        X86_64: "X86_64"
                    };

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/

                    Diagnostic._ensureBoolean = function (callback) {
                        return function (result) {
                            callback(!!result);
                        }
                    };

                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /***********
                     * Core
                     ***********/

                    /**
                     * Enables debug mode, which logs native debug messages to the native and JS consoles.
                     * Debug mode is initially disabled on plugin initialisation.
                     *
                     * @param {Function} successCallback - The callback which will be called when enabling debug is successful.
                     */
                    Diagnostic.enableDebug = function (successCallback) {
                        return cordova.exec(successCallback,
                            null,
                            'Diagnostic',
                            'enableDebug', []);
                    };

                    /**
                     * Switch to settings app. Opens settings page for this app.
                     *
                     * @param {Function} successCallback - The callback which will be called when switch to settings is successful.
                     * @param {Function} errorCallback - The callback which will be called when switch to settings encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.switchToSettings = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic',
                            'switchToSettings', []);
                    };

                    /**
                     * Returns CPU architecture of the current device.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single string parameter defined as a constant in `cordova.plugins.diagnostic.cpuArchitecture`.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getArchitecture = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic',
                            'getArchitecture', []);
                    };

                    /**
                     * Returns the background refresh authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getBackgroundRefreshStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic',
                            'getBackgroundRefreshStatus', []);
                    };

                    /**
                     * Checks if the application is authorized for background refresh.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if background refresh is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isBackgroundRefreshAuthorized = function (successCallback, errorCallback) {
                        Diagnostic.getBackgroundRefreshStatus(function (status) {
                            successCallback(status === Diagnostic.permissionStatus.GRANTED);
                        }, errorCallback);
                    };

                    /************
                     * Location *
                     ************/

                    /**
                     * Checks if location is available for use by the app.
                     * On iOS this returns true if both the device setting for Location Services is ON AND the application is authorized to use location.
                     * When location is enabled, the locations returned are by a mixture GPS hardware, network triangulation and Wifi network IDs.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location is available for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isLocationAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Checks if the device location setting is enabled.
                     * Returns true if Location Services is enabled.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Location Services is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isLocationEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };


                    /**
                     * Checks if the application is authorized to use location.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if application is authorized to use location either "when in use" (only in foreground) OR "always" (foreground and background).
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isLocationAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.isLocationAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Returns the location authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the location authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED_WHEN_IN_USE`
                     * Note that `GRANTED` indicates the app is always granted permission (even when in background).
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getLocationAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.getLocationAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Returns the location accuracy authorization for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the location accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.FULL`
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.REDUCED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getLocationAccuracyAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.getLocationAccuracyAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Requests location authorization for the application.
                     * Authorization can be requested to use location either "when in use" (only in foreground) or "always" (foreground and background).
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - Invoked in response to the user's choice in the permission dialog.
                     * It is passed a single string parameter which defines the resulting authorisation status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED_WHEN_IN_USE`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {String} mode - (optional) location authorization mode as a constant in `cordova.plugins.diagnostic.locationAuthorizationMode`.
                     * If not specified, defaults to `cordova.plugins.diagnostic.locationAuthorizationMode.WHEN_IN_USE`.
                     */
                    Diagnostic.requestLocationAuthorization = function (successCallback, errorCallback, mode) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.requestLocationAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Requests temporary access to full location accuracy for the application.
                     * By default on iOS 14+, when a user grants location permission, the app can only receive reduced accuracy locations.
                     * If your app requires full (high-accuracy GPS) locations (e.g. a SatNav app), you need to call this method.
                     * Should only be called if location authorization has been granted.
                     *
                     * @param {String} purpose - (required) corresponds to a key in the NSLocationTemporaryUsageDescriptionDictionary entry in your app's `*-Info.plist`
                     * which contains a message explaining the user why your app needs their exact location.
                     * This will be presented to the user via permission dialog in which they can either accept or reject the request.
                     * @param {Function} successCallback - (optional) Invoked in response to the user's choice in the permission dialog.
                     * It is passed a single string parameter which defines the resulting accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.FULL`
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.REDUCED`
                     * @param {Function} errorCallback -  (optional) The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestTemporaryFullAccuracyAuthorization = function (purpose, successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.requestTemporaryFullAccuracyAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Registers a function to be called when a change in Location state occurs.
                     * On iOS, this occurs when location authorization status is changed.
                     * This can be triggered either by the user's response to a location permission authorization dialog,
                     * by the user turning on/off Location Services,
                     * or by the user changing the Location authorization state specifically for your app.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the Location state changes.
                     * This callback function is passed a single string parameter indicating the new location authorisation status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     */
                    Diagnostic.registerLocationStateChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.registerLocationStateChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /**
                     * Registers a function to be called when a change in location accuracy authorization occurs.
                     * This occurs when location accuracy authorization is changed.
                     * This can be triggered either by the user's response to a location accuracy authorization dialog,
                     * or by the user changing the location accuracy authorization specifically for your app in Settings.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the location accuracy authorization changes.
                     * This callback function is passed a single string parameter indicating the new location accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     */
                    Diagnostic.registerLocationAccuracyAuthorizationChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.location) {
                            cordova.plugins.diagnostic.location.registerLocationAccuracyAuthorizationChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic Location module is not installed";
                        }
                    };

                    /************
                     * Camera   *
                     ************/

                    /**
                     * Checks if camera is enabled for use.
                     * On iOS this returns true if both the device has a camera AND the application is authorized to use it.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present and authorized for use.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCameraAvailable = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Checks if camera hardware is present on device.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCameraPresent = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraPresent.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };


                    /**
                     * Checks if the application is authorized to use the camera.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is authorized for use.
                     *   - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCameraAuthorized = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Returns the camera authorization status for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getCameraAuthorizationStatus = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.getCameraAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Requests camera authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Object} params - (optional) parameters:
                     * - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to the camera was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestCameraAuthorization = function (params) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.requestCameraAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Checks if the application is authorized to use the Camera Roll in Photos app.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to Camera Roll is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCameraRollAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.isCameraRollAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Returns the authorization status for the application to use the Camera Roll in Photos app.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getCameraRollAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.getCameraRollAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /**
                     * Requests camera roll authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the new authorization status:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestCameraRollAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.camera) {
                            cordova.plugins.diagnostic.camera.requestCameraRollAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Camera module is not installed";
                        }
                    };

                    /************
                     * WiFi     *
                     ************/

                    /**
                     * Checks if Wi-Fi is connected.
                     * On iOS this returns true if the WiFi setting is set to enabled AND the device is connected to a network by WiFi.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device is connected by WiFi.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isWifiAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.wifi) {
                            cordova.plugins.diagnostic.wifi.isWifiAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Wifi module is not installed";
                        }
                    };

                    /**
                     * Checks if Wifi is enabled.
                     * On iOS this returns true if the WiFi setting is set to enabled (regardless of whether it's connected to a network).
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if WiFi is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isWifiEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.wifi) {
                            cordova.plugins.diagnostic.wifi.isWifiEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Wifi module is not installed";
                        }
                    };

                    /***************
                     * Bluetooth   *
                     ***************/

                    /**
                     * Checks if the device has Bluetooth LE capabilities and if so that Bluetooth is switched on
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE and Bluetooth is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isBluetoothAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.isBluetoothAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Returns the state of Bluetooth LE on the device.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the Bluetooth state as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getBluetoothState = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.getBluetoothState.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };


                    /**
                     * Registers a function to be called when a change in Bluetooth state occurs.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback - function call when a change in Bluetooth state occurs.
                     * This callback function is passed a single string parameter which indicates the Bluetooth state as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     */
                    Diagnostic.registerBluetoothStateChangeHandler = function (successCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.registerBluetoothStateChangeHandler.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /**
                     * Requests Bluetooth authorization for the application.
                     * The outcome of the authorization request can be determined by registering a handler using `registerBluetoothStateChangeHandler()`.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is not passed any parameters.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestBluetoothAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.bluetooth) {
                            cordova.plugins.diagnostic.bluetooth.requestBluetoothAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Bluetooth module is not installed";
                        }
                    };

                    /***********************
                     * Remote Notifications
                     ***********************/

                    /**
                     * Checks if remote (push) notifications are enabled.
                     * Returns true if app is registered for remote notifications AND "Allow Notifications" switch is ON AND alert style is not set to "None" (i.e. "Banners" or "Alerts").
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if remote (push) notifications are enabled.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isRemoteNotificationsEnabled = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.isRemoteNotificationsEnabled.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };

                    /**
                     * Indicates the current setting of notification types for the app in the Settings app.
                     * Note: if "Allow Notifications" switch is OFF, all types will be returned as disabled.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single object parameter where the key is the notification type as a constant in `cordova.plugins.diagnostic.remoteNotificationType` and the value is a boolean indicating whether it's enabled:
                     * cordova.plugins.diagnostic.remoteNotificationType.ALERT => alert style is not set to "None" (i.e. "Banners" or "Alerts").
                     * cordova.plugins.diagnostic.remoteNotificationType.BADGE => "Badge App Icon" switch is ON.
                     * cordova.plugins.diagnostic.remoteNotificationType.SOUND => "Sounds"/"Alert Sound" switch is ON.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getRemoteNotificationTypes = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.getRemoteNotificationTypes.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };

                    /**
                     * Indicates if the app is registered for remote notifications on the device.
                     * Returns true if the app is registered for remote notifications and received its device token,
                     * or false if registration has not occurred, has failed, or has been denied by the user.
                     * Note that user preferences for notifications in the Settings app will not affect this.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if the device is registered for remote (push) notifications.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isRegisteredForRemoteNotifications = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.isRegisteredForRemoteNotifications.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };

                    /**
                     * Returns the remote notifications authorization status for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getRemoteNotificationsAuthorizationStatus = function () {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.getRemoteNotificationsAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };

                    /**
                     * Requests remote notifications authorization for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Array} types - list of notifications to register for as constants in `cordova.plugins.diagnostic.remoteNotificationType`.
                     * If not specified, defaults to all notification types.
                     * @param {Boolean} omitRegistration - If true, registration for remote notifications will not be carried out once remote notifications authorization is granted.
                     * Defaults to false (registration will automatically take place once authorization is granted).
                     */
                    Diagnostic.requestRemoteNotificationsAuthorization = function () {
                        if (cordova.plugins.diagnostic.notifications) {
                            cordova.plugins.diagnostic.notifications.requestRemoteNotificationsAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Notifications module is not installed";
                        }
                    };

                    /***************************
                     * Microphone / Record Audio
                     ***************************/

                    /**
                     * Checks if the application is authorized to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isMicrophoneAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.isMicrophoneAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };

                    /**
                     * Returns the authorization status for the application to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getMicrophoneAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.getMicrophoneAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };

                    /**
                     * Requests access to microphone if authorization was never granted nor denied, will only return access status otherwise.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to the microphone was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestMicrophoneAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.microphone) {
                            cordova.plugins.diagnostic.microphone.requestMicrophoneAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Microphone module is not installed";
                        }
                    };


                    /*************
                     * Contacts
                     *************/

                    /**
                     * Checks if the application is authorized to use contacts (address book).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if contacts is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isContactsAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.isContactsAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /**
                     * Returns the contacts (address book) authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getContactsAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.getContactsAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /**
                     * Requests contacts (address book) authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to contacts was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestContactsAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.contacts) {
                            cordova.plugins.diagnostic.contacts.requestContactsAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Contacts module is not installed";
                        }
                    };

                    /*****************
                     * Calendar events
                     *****************/

                    /**
                     * Checks if the application is authorized to use calendar.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if calendar is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isCalendarAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.isCalendarAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /**
                     * Returns the calendar event authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getCalendarAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.getCalendarAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /**
                     * Requests calendar event authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to calendar was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestCalendarAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.calendar) {
                            cordova.plugins.diagnostic.calendar.requestCalendarAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Calendar module is not installed";
                        }
                    };

                    /*********************
                     * Calendar reminders
                     *********************/

                    /**
                     * Checks if the application is authorized to use calendar reminders.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if reminders is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isRemindersAuthorized = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.reminders) {
                            cordova.plugins.diagnostic.reminders.isRemindersAuthorized.apply(this, arguments);
                        } else {
                            throw "Diagnostic Reminders module is not installed";
                        }
                    };

                    /**
                     * Returns the calendar event authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getRemindersAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.reminders) {
                            cordova.plugins.diagnostic.reminders.getRemindersAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Reminders module is not installed";
                        }
                    };

                    /**
                     * Requests calendar reminders authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to reminders was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestRemindersAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.reminders) {
                            cordova.plugins.diagnostic.reminders.requestRemindersAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Reminders module is not installed";
                        }
                    };


                    /*************
                     * Motion
                     *************/

                    /**
                     * Checks if motion tracking is available on the current device.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if motion tracking is available on the current device.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isMotionAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.motion) {
                            cordova.plugins.diagnostic.motion.isMotionAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Motion module is not installed";
                        }
                    };

                    /**
                     * Checks if it's possible to determine the outcome of a motion authorization request on the current device.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API must be used to indirectly determine this.
                     * Therefore, if the device supports motion tracking but not Pedometer Event Tracking, while Motion Track permission can be requested, the outcome of the request cannot be determined.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if it's possible to determine the outcome of a motion authorization request on the current device.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.isMotionRequestOutcomeAvailable = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.motion) {
                            cordova.plugins.diagnostic.motion.isMotionRequestOutcomeAvailable.apply(this, arguments);
                        } else {
                            throw "Diagnostic Motion module is not installed";
                        }
                    };

                    /**
                     * Requests motion tracking authorization for the application.
                     * The native dialog asking user's consent can only be invoked once after the app is installed by calling this function.
                     * Once the user has either allowed or denied access, calling this function again will result in an error.
                     * It is not possible to re-invoke the dialog if the user denied permission in the native dialog,
                     * so in this case you will have to instruct the user how to change motion authorization manually via the Settings app.
                     * When calling this function, the message contained in the `NSMotionUsageDescription` .plist key is displayed to the user;
                     * this plugin provides a default message, but you should override this with your specific reason for requesting access.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API must be used to indirectly determine this:
                     * therefore, if the device supports motion tracking but not Pedometer Event Tracking, the outcome of requesting motion detection cannot be determined.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the result:
                     * - `cordova.plugins.diagnostic.motionStatus.GRANTED` - user granted motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.DENIED_ALWAYS` - user denied authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.RESTRICTED` - user cannot grant motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_AVAILABLE` - device does not support Motion Tracking.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_DETERMINED` - authorization outcome cannot be determined because device does not support Pedometer Event Tracking.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     * - `cordova.plugins.diagnostic.motionStatus.UNKNOWN` - motion tracking authorization is in an unknown state.
                     * - {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.requestMotionAuthorization = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.motion) {
                            cordova.plugins.diagnostic.motion.requestMotionAuthorization.apply(this, arguments);
                        } else {
                            throw "Diagnostic Motion module is not installed";
                        }
                    };

                    /**
                     * Checks motion authorization status for the application.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API is used to indirectly determine this.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the result:
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_REQUESTED` - App has not yet requested this permission.
                     * - `cordova.plugins.diagnostic.motionStatus.GRANTED` - user granted motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.DENIED_ALWAYS` - user denied authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.RESTRICTED` - user cannot grant motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_AVAILABLE` - device does not support Motion Tracking.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_DETERMINED` - authorization outcome cannot be determined because device does not support Pedometer Event Tracking.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     * - `cordova.plugins.diagnostic.motionStatus.UNKNOWN` - motion tracking authorization is in an unknown state.
                     * - {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic.getMotionAuthorizationStatus = function (successCallback, errorCallback) {
                        if (cordova.plugins.diagnostic.motion) {
                            cordova.plugins.diagnostic.motion.getMotionAuthorizationStatus.apply(this, arguments);
                        } else {
                            throw "Diagnostic Motion module is not installed";
                        }
                    };

                    return Diagnostic;
                })();
                module.exports = Diagnostic;
            });
            cordova.define("cordova-diagnostic-plugin.bluetooth", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Bluetooth plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Bluetooth = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Bluetooth = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.bluetoothState = Diagnostic_Bluetooth.bluetoothState = {
                        "UNKNOWN": "unknown",
                        "RESETTING": "resetting",
                        "UNSUPPORTED": "unsupported",
                        "UNAUTHORIZED": "unauthorized",
                        "POWERED_OFF": "powered_off",
                        "POWERED_ON": "powered_on"
                    };



                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    Diagnostic_Bluetooth._onBluetoothStateChange = function () { };


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if the device has Bluetooth LE capabilities and if so that Bluetooth is switched on
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE and Bluetooth is switched on.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.isBluetoothAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'isBluetoothAvailable', []);
                    };

                    /**
                     * Returns the state of Bluetooth LE on the device.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the Bluetooth state as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.getBluetoothState = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'getBluetoothState', []);
                    };


                    /**
                     * Registers a function to be called when a change in Bluetooth state occurs.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback - function call when a change in Bluetooth state occurs.
                     * This callback function is passed a single string parameter which indicates the Bluetooth state as a constant in `cordova.plugins.diagnostic.bluetoothState`.
                     */
                    Diagnostic_Bluetooth.registerBluetoothStateChangeHandler = function (successCallback) {
                        Diagnostic_Bluetooth._onBluetoothStateChange = successCallback || function () { };
                        return cordova.exec(successCallback,
                            null,
                            'Diagnostic_Bluetooth',
                            'ensureBluetoothManager', []);
                    };

                    /**
                     * Requests Bluetooth authorization for the application.
                     * The outcome of the authorization request can be determined by registering a handler using `registerBluetoothStateChangeHandler()`.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is not passed any parameters.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Bluetooth.requestBluetoothAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(
                            successCallback,
                            errorCallback,
                            'Diagnostic_Bluetooth',
                            'requestBluetoothAuthorization', []);
                    };



                    return Diagnostic_Bluetooth;
                });
                module.exports = new Diagnostic_Bluetooth();
            });
            cordova.define("cordova-diagnostic-plugin.calendar", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Calendar plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Calendar = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Calendar = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/
                    /**
                     * Checks if the application is authorized to use calendar.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if calendar is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.isCalendarAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Calendar',
                            'isCalendarAuthorized', []);
                    };

                    /**
                     * Returns the calendar event authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.getCalendarAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Calendar',
                            'getCalendarAuthorizationStatus', []);
                    };

                    /**
                     * Requests calendar event authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to calendar was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Calendar.requestCalendarAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(function (isGranted) {
                            successCallback(isGranted ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            errorCallback,
                            'Diagnostic_Calendar',
                            'requestCalendarAuthorization', []);
                    };

                    return Diagnostic_Calendar;
                });
                module.exports = new Diagnostic_Calendar();
            });
            cordova.define("cordova-diagnostic-plugin.camera", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Camera plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Camera = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Camera = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    function mapFromLegacyCameraApi() {
                        var params;
                        if (typeof arguments[0] === "function") {
                            params = (arguments.length > 2 && typeof arguments[2] === "object") ? arguments[2] : {};
                            params.successCallback = arguments[0];
                            if (arguments.length > 1 && typeof arguments[1] === "function") {
                                params.errorCallback = arguments[1];
                            }
                        } else { // if (typeof arguments[0]  === "object")
                            params = arguments[0];
                        }
                        return params;
                    }

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if camera is enabled for use.
                     * On iOS this returns true if both the device has a camera AND the application is authorized to use it.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present and authorized for use.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.isCameraAvailable = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        params.successCallback = params.successCallback || function () { };
                        return cordova.exec(Diagnostic._ensureBoolean(params.successCallback),
                            params.errorCallback,
                            'Diagnostic_Camera',
                            'isCameraAvailable', []);
                    };

                    /**
                     * Checks if camera hardware is present on device.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is present
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.isCameraPresent = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Camera',
                            'isCameraPresent', []);
                    };


                    /**
                     * Checks if the application is authorized to use the camera.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if camera is authorized for use.
                     *   - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.isCameraAuthorized = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        return cordova.exec(Diagnostic._ensureBoolean(params.successCallback),
                            params.errorCallback,
                            'Diagnostic_Camera',
                            'isCameraAuthorized', []);
                    };

                    /**
                     * Returns the camera authorization status for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.getCameraAuthorizationStatus = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        return cordova.exec(params.successCallback,
                            params.errorCallback,
                            'Diagnostic_Camera',
                            'getCameraAuthorizationStatus', []);
                    };

                    /**
                     * Requests camera authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Object} params - (optional) parameters:
                     * - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to the camera was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.requestCameraAuthorization = function (params) {
                        params = mapFromLegacyCameraApi.apply(this, arguments);

                        params.successCallback = params.successCallback || function () { };
                        return cordova.exec(function (isGranted) {
                            params.successCallback(isGranted ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            params.errorCallback,
                            'Diagnostic_Camera',
                            'requestCameraAuthorization', []);
                    };

                    /**
                     * Checks if the application is authorized to use the Camera Roll in Photos app.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to Camera Roll is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.isCameraRollAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Camera',
                            'isCameraRollAuthorized', []);
                    };

                    /**
                     * Returns the authorization status for the application to use the Camera Roll in Photos app.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.getCameraRollAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Camera',
                            'getCameraRollAuthorizationStatus', []);
                    };

                    /**
                     * Requests camera roll authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the new authorization status:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Camera.requestCameraRollAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(function (status) {
                            successCallback(status === "authorized" ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            errorCallback,
                            'Diagnostic_Camera',
                            'requestCameraRollAuthorization', []);
                    };

                    return Diagnostic_Camera;
                });
                module.exports = new Diagnostic_Camera();
            });
            cordova.define("cordova-diagnostic-plugin.contacts", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Contacts plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Contacts = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Contacts = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if the application is authorized to use contacts (address book).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if contacts is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.isContactsAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Contacts',
                            'isAddressBookAuthorized', []);
                    };

                    /**
                     * Returns the contacts (address book) authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.getContactsAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Contacts',
                            'getAddressBookAuthorizationStatus', []);
                    };

                    /**
                     * Requests contacts (address book) authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to contacts was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Contacts.requestContactsAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(function (isGranted) {
                            successCallback(isGranted ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            errorCallback,
                            'Diagnostic_Contacts',
                            'requestAddressBookAuthorization', []);
                    };

                    return Diagnostic_Contacts;
                });
                module.exports = new Diagnostic_Contacts();
            });
            cordova.define("cordova-diagnostic-plugin.location", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Location plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Location = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Location = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.locationAuthorizationMode = Diagnostic_Location.locationAuthorizationMode = {
                        "ALWAYS": "always",
                        "WHEN_IN_USE": "when_in_use"
                    };

                    Diagnostic.locationAccuracyAuthorization = Diagnostic_Location.locationAccuracyAuthorization = {
                        "FULL": "full",
                        "REDUCED": "reduced"
                    };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/
                    Diagnostic_Location._onLocationStateChange = function () { };
                    Diagnostic_Location._onLocationAccuracyAuthorizationChange = function () { };


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if location is available for use by the app.
                     * On iOS this returns true if both the device setting for Location Services is ON AND the application is authorized to use location.
                     * When location is enabled, the locations returned are by a mixture GPS hardware, network triangulation and Wifi network IDs.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if location is available for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isLocationAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isLocationAvailable', []);
                    };

                    /**
                     * Checks if the device location setting is enabled.
                     * Returns true if Location Services is enabled.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if Location Services is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isLocationEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isLocationEnabled', []);
                    };


                    /**
                     * Checks if the application is authorized to use location.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if application is authorized to use location either "when in use" (only in foreground) OR "always" (foreground and background).
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.isLocationAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Location',
                            'isLocationAuthorized', []);
                    };

                    /**
                     * Returns the location authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the location authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED_WHEN_IN_USE`
                     * Note that `GRANTED` indicates the app is always granted permission (even when in background).
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.getLocationAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Location',
                            'getLocationAuthorizationStatus', []);
                    };

                    /**
                     * Returns the location accuracy authorization for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the location accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.FULL`
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.REDUCED`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.getLocationAccuracyAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Location',
                            'getLocationAccuracyAuthorization', []);
                    };

                    /**
                     * Requests location authorization for the application.
                     * Authorization can be requested to use location either "when in use" (only in foreground) or "always" (foreground and background).
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - Invoked in response to the user's choice in the permission dialog.
                     * It is passed a single string parameter which defines the resulting authorisation status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED_WHEN_IN_USE`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {String} mode - (optional) location authorization mode as a constant in `cordova.plugins.diagnostic.locationAuthorizationMode`.
                     * If not specified, defaults to `cordova.plugins.diagnostic.locationAuthorizationMode.WHEN_IN_USE`.
                     */
                    Diagnostic_Location.requestLocationAuthorization = function (successCallback, errorCallback, mode) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Location',
                            'requestLocationAuthorization', [mode && mode === Diagnostic_Location.locationAuthorizationMode.ALWAYS]);
                    };

                    /**
                     * Requests temporary access to full location accuracy for the application.
                     * By default on iOS 14+, when a user grants location permission, the app can only receive reduced accuracy locations.
                     * If your app requires full (high-accuracy GPS) locations (e.g. a SatNav app), you need to call this method.
                     * Should only be called if location authorization has been granted.
                     *
                     * @param {String} purpose - (required) corresponds to a key in the NSLocationTemporaryUsageDescriptionDictionary entry in your app's `*-Info.plist`
                     * which contains a message explaining the user why your app needs their exact location.
                     * This will be presented to the user via permission dialog in which they can either accept or reject the request.
                     * @param {Function} successCallback - (optional) Invoked in response to the user's choice in the permission dialog.
                     * It is passed a single string parameter which defines the resulting accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.FULL`
                     * `cordova.plugins.diagnostic.locationAccuracyAuthorization.REDUCED`
                     * @param {Function} errorCallback -  (optional) The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Location.requestTemporaryFullAccuracyAuthorization = function (purpose, successCallback, errorCallback) {
                        if (typeof purpose !== "string") {
                            var errMessage = "'purpose' must be specified";
                            if (errorCallback) {
                                return errorCallback(errMessage);
                            }
                            throw errMessage;
                        }
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Location',
                            'requestTemporaryFullAccuracyAuthorization', [purpose]);
                    };

                    /**
                     * Registers a function to be called when a change in Location state occurs.
                     * On iOS, this occurs when location authorization status is changed.
                     * This can be triggered either by the user's response to a location permission authorization dialog,
                     * by the user turning on/off Location Services,
                     * or by the user changing the Location authorization state specifically for your app.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the Location state changes.
                     * This callback function is passed a single string parameter indicating the new location authorisation status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     */
                    Diagnostic_Location.registerLocationStateChangeHandler = function (successCallback) {
                        Diagnostic_Location._onLocationStateChange = successCallback || function () { };
                    };

                    /**
                     * Registers a function to be called when a change in location accuracy authorization occurs.
                     * This occurs when location accuracy authorization is changed.
                     * This can be triggered either by the user's response to a location accuracy authorization dialog,
                     * or by the user changing the location accuracy authorization specifically for your app in Settings.
                     * Pass in a falsey value to de-register the currently registered function.
                     *
                     * @param {Function} successCallback -  The callback which will be called when the location accuracy authorization changes.
                     * This callback function is passed a single string parameter indicating the new location accuracy authorization as a constant in `cordova.plugins.diagnostic.locationAccuracyAuthorization`.
                     */
                    Diagnostic_Location.registerLocationAccuracyAuthorizationChangeHandler = function (successCallback) {
                        Diagnostic_Location._onLocationAccuracyAuthorizationChange = successCallback || function () { };
                    };

                    return Diagnostic_Location;
                });
                module.exports = new Diagnostic_Location();
            });
            cordova.define("cordova-diagnostic-plugin.microphone", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Microphone plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Microphone = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Microphone = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if the application is authorized to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if access to microphone is authorized.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.isMicrophoneAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Microphone',
                            'isMicrophoneAuthorized', []);
                    };

                    /**
                     * Returns the authorization status for the application to use the microphone for recording audio.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.getMicrophoneAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Microphone',
                            'getMicrophoneAuthorizationStatus', []);
                    };

                    /**
                     * Requests access to microphone if authorization was never granted nor denied, will only return access status otherwise.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to the microphone was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback - The callback which will be called when an error occurs.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Microphone.requestMicrophoneAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(function (isGranted) {
                            successCallback(isGranted ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            errorCallback,
                            'Diagnostic_Microphone',
                            'requestMicrophoneAuthorization', []);
                    };



                    return Diagnostic_Microphone;
                });
                module.exports = new Diagnostic_Microphone();
            });
            cordova.define("cordova-diagnostic-plugin.motion", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Motion plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Motion = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Motion = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /**
                     * Status of motion+tracking permission
                     * @type {object}
                     */
                    Diagnostic.motionStatus = Diagnostic_Motion.motionStatus = {
                        "UNKNOWN": "unknown", // Status is not known
                        "NOT_REQUESTED": "not_requested", // App has not yet requested this permission
                        "DENIED_ALWAYS": "denied_always", // User denied access to this permission
                        "RESTRICTED": "restricted", // Permission is unavailable and user cannot enable it.  For example, when parental controls are in effect for the current user.
                        "GRANTED": "authorized", //  User granted access to this permission
                        "NOT_AVAILABLE": "not_available", // Motion tracking not available on device
                        "NOT_DETERMINED": "not_determined" // Motion authorization request status outcome cannot be determined on device
                    };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/


                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if motion tracking is available on the current device.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if motion tracking is available on the current device.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Motion.isMotionAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Motion',
                            'isMotionAvailable', []);
                    };

                    /**
                     * Checks if it's possible to determine the outcome of a motion authorization request on the current device.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API must be used to indirectly determine this.
                     * Therefore, if the device supports motion tracking but not Pedometer Event Tracking, while Motion Track permission can be requested, the outcome of the request cannot be determined.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if it's possible to determine the outcome of a motion authorization request on the current device.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Motion.isMotionRequestOutcomeAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Motion',
                            'isMotionRequestOutcomeAvailable', []);
                    };

                    /**
                     * Requests motion tracking authorization for the application.
                     * The native dialog asking user's consent can only be invoked once after the app is installed by calling this function.
                     * Once the user has either allowed or denied access, calling this function again will result in an error.
                     * It is not possible to re-invoke the dialog if the user denied permission in the native dialog,
                     * so in this case you will have to instruct the user how to change motion authorization manually via the Settings app.
                     * When calling this function, the message contained in the `NSMotionUsageDescription` .plist key is displayed to the user;
                     * this plugin provides a default message, but you should override this with your specific reason for requesting access.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API must be used to indirectly determine this:
                     * therefore, if the device supports motion tracking but not Pedometer Event Tracking, the outcome of requesting motion detection cannot be determined.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the result:
                     * - `cordova.plugins.diagnostic.motionStatus.GRANTED` - user granted motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.DENIED_ALWAYS` - user denied authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.RESTRICTED` - user cannot grant motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_AVAILABLE` - device does not support Motion Tracking.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_DETERMINED` - authorization outcome cannot be determined because device does not support Pedometer Event Tracking.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     * - `cordova.plugins.diagnostic.motionStatus.UNKNOWN` - motion tracking authorization is in an unknown state.
                     * - {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Motion.requestMotionAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(
                            successCallback,
                            errorCallback,
                            'Diagnostic_Motion',
                            'requestMotionAuthorization', []);
                    };

                    /**
                     * Checks motion authorization status for the application.
                     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API is used to indirectly determine this.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating the result:
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_REQUESTED` - App has not yet requested this permission.
                     * - `cordova.plugins.diagnostic.motionStatus.GRANTED` - user granted motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.DENIED_ALWAYS` - user denied authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.RESTRICTED` - user cannot grant motion authorization.
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_AVAILABLE` - device does not support Motion Tracking.
                     * Motion tracking is supported by iOS devices with an M7 co-processor (or above): that is iPhone 5s (or above), iPad Air (or above), iPad Mini 2 (or above).
                     * - `cordova.plugins.diagnostic.motionStatus.NOT_DETERMINED` - authorization outcome cannot be determined because device does not support Pedometer Event Tracking.
                     * Pedometer Event Tracking is only available on iPhones with an M7 co-processor (or above): that is iPhone 5s (or above). No iPads yet support it.
                     * - `cordova.plugins.diagnostic.motionStatus.UNKNOWN` - motion tracking authorization is in an unknown state.
                     * - {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Motion.getMotionAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(
                            successCallback,
                            errorCallback,
                            'Diagnostic_Motion',
                            'getMotionAuthorizationStatus', []);
                    };

                    return Diagnostic_Motion;
                });
                module.exports = new Diagnostic_Motion();
            });
            cordova.define("cordova-diagnostic-plugin.notifications", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Notifications plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Notifications = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Notifications = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    Diagnostic.remoteNotificationType = Diagnostic_Notifications.remoteNotificationType = {
                        ALERT: "alert",
                        SOUND: "sound",
                        BADGE: "badge"
                    };

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if remote (push) notifications are enabled.
                     * Returns true if app is registered for remote notifications AND "Allow Notifications" switch is ON AND alert style is not set to "None" (i.e. "Banners" or "Alerts").
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if remote (push) notifications are enabled.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Notifications.isRemoteNotificationsEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Notifications',
                            'isRemoteNotificationsEnabled', []);
                    };

                    /**
                     * Indicates the current setting of notification types for the app in the Settings app.
                     * Note: if "Allow Notifications" switch is OFF, all types will be returned as disabled.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single object parameter where the key is the notification type as a constant in `cordova.plugins.diagnostic.remoteNotificationType` and the value is a boolean indicating whether it's enabled:
                     * cordova.plugins.diagnostic.remoteNotificationType.ALERT => alert style is not set to "None" (i.e. "Banners" or "Alerts").
                     * cordova.plugins.diagnostic.remoteNotificationType.BADGE => "Badge App Icon" switch is ON.
                     * cordova.plugins.diagnostic.remoteNotificationType.SOUND => "Sounds"/"Alert Sound" switch is ON.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Notifications.getRemoteNotificationTypes = function (successCallback, errorCallback) {
                        return cordova.exec(function (sTypes) {
                            var oTypes = JSON.parse(sTypes);
                            for (var type in oTypes) {
                                oTypes[type] = parseInt(oTypes[type]) === 1;
                            }
                            successCallback(oTypes);
                        },
                            errorCallback,
                            'Diagnostic_Notifications',
                            'getRemoteNotificationTypes', []);
                    };

                    /**
                     * Indicates if the app is registered for remote notifications on the device.
                     * Returns true if the app is registered for remote notifications and received its device token,
                     * or false if registration has not occurred, has failed, or has been denied by the user.
                     * Note that user preferences for notifications in the Settings app will not affect this.
                     * On iOS <=7, returns true if app is registered for remote notifications AND alert style is not set to "None" (i.e. "Banners" or "Alerts") - same as isRemoteNotificationsEnabled().
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if the device is registered for remote (push) notifications.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Notifications.isRegisteredForRemoteNotifications = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Notifications',
                            'isRegisteredForRemoteNotifications', []);
                    };

                    /**
                     * Returns the remote notifications authorization status for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * Possible values are:
                     * `cordova.plugins.diagnostic.permissionStatus.NOT_REQUESTED`
                     * `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED`
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Notifications.getRemoteNotificationsAuthorizationStatus = function () {
                        var params;
                        if (typeof arguments[0] === "function") {
                            params = {};
                            params.successCallback = arguments[0];
                            if (typeof arguments[1] === "function") {
                                params.errorCallback = arguments[1];
                            }
                        } else {
                            params = arguments[0];
                        }

                        return cordova.exec(
                            params.successCallback,
                            params.errorCallback,
                            'Diagnostic_Notifications',
                            'getRemoteNotificationsAuthorizationStatus', []);
                    };

                    /**
                     * Requests remote notifications authorization for the application.
                     *
                     * @param {Object} params - (optional) parameters:
                     *  - {Function} successCallback - The callback which will be called when operation is successful.
                     *  - {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     * @param {Array} types - list of notifications to register for as constants in `cordova.plugins.diagnostic.remoteNotificationType`.
                     * If not specified, defaults to all notification types.
                     * @param {Boolean} omitRegistration - If true, registration for remote notifications will not be carried out once remote notifications authorization is granted.
                     * Defaults to false (registration will automatically take place once authorization is granted).
                     */
                    Diagnostic_Notifications.requestRemoteNotificationsAuthorization = function () {
                        var params;
                        if (typeof arguments[0] === "function") {
                            params = {};
                            params.successCallback = arguments[0];
                            if (typeof arguments[1] === "function") {
                                params.errorCallback = arguments[1];
                            }
                            if (typeof arguments[2] !== "undefined") {
                                params.types = arguments[2];
                            }
                            if (typeof arguments[3] !== "undefined") {
                                params.omitRegistration = arguments[3];
                            }
                        } else {
                            params = arguments[0];
                        }

                        params.types = params.types && params.types.length ? JSON.stringify(params.types) : JSON.stringify({});

                        return cordova.exec(
                            params.successCallback,
                            params.errorCallback,
                            'Diagnostic_Notifications',
                            'requestRemoteNotificationsAuthorization', [params.types, params.omitRegistration ? 1 : 0]);
                    };


                    return Diagnostic_Notifications;
                });
                module.exports = new Diagnostic_Notifications();
            });
            cordova.define("cordova-diagnostic-plugin.reminders", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Reminders plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Reminders = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Reminders = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/
                    /**
                     * Checks if the application is authorized to use calendar reminders.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if reminders is authorized for use.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Reminders.isRemindersAuthorized = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Reminders',
                            'isRemindersAuthorized', []);
                    };

                    /**
                     * Returns the calendar event authorization status for the application.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter which indicates the authorization status as a constant in `cordova.plugins.diagnostic.permissionStatus`.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Reminders.getRemindersAuthorizationStatus = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Reminders',
                            'getRemindersAuthorizationStatus', []);
                    };

                    /**
                     * Requests calendar reminders authorization for the application.
                     * Should only be called if authorization status is NOT_REQUESTED. Calling it when in any other state will have no effect.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single string parameter indicating whether access to reminders was granted or denied:
                     * `cordova.plugins.diagnostic.permissionStatus.GRANTED` or `cordova.plugins.diagnostic.permissionStatus.DENIED_ALWAYS`
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Reminders.requestRemindersAuthorization = function (successCallback, errorCallback) {
                        return cordova.exec(function (isGranted) {
                            successCallback(isGranted ? Diagnostic.permissionStatus.GRANTED : Diagnostic.permissionStatus.DENIED_ALWAYS);
                        },
                            errorCallback,
                            'Diagnostic_Reminders',
                            'requestRemindersAuthorization', []);
                    };

                    return Diagnostic_Reminders;
                });
                module.exports = new Diagnostic_Reminders();
            });
            cordova.define("cordova-diagnostic-plugin.wifi", function (require, exports, module) {
                /* globals cordova, require, exports, module */

                /**
                 *  Diagnostic Wifi plugin for iOS
                 *
                 *  Copyright (c) 2015 Working Edge Ltd.
                 *  Copyright (c) 2012 AVANTIC ESTUDIO DE INGENIEROS
                 **/
                var Diagnostic_Wifi = (function () {
                    /***********************
                     *
                     * Internal properties
                     *
                     *********************/
                    var Diagnostic_Wifi = {};

                    var Diagnostic = require("cordova.plugins.diagnostic.Diagnostic");

                    /********************
                     *
                     * Public properties
                     *
                     ********************/

                    /********************
                     *
                     * Internal functions
                     *
                     ********************/

                    /*****************************
                     *
                     * Protected member functions
                     *
                     ****************************/


                    /**********************
                     *
                     * Public API functions
                     *
                     **********************/

                    /**
                     * Checks if Wi-Fi is connected.
                     * On iOS this returns true if the WiFi setting is set to enabled AND the device is connected to a network by WiFi.
                     *
                     * @param {Function} successCallback - The callback which will be called when operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if device is connected by WiFi.
                     * @param {Function} errorCallback -  The callback which will be called when operation encounters an error.
                     * This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Wifi.isWifiAvailable = function (successCallback, errorCallback) {
                        return cordova.exec(Diagnostic._ensureBoolean(successCallback),
                            errorCallback,
                            'Diagnostic_Wifi',
                            'isWifiAvailable', []);
                    };

                    /**
                     * Checks if Wifi is enabled.
                     * On iOS this returns true if the WiFi setting is set to enabled (regardless of whether it's connected to a network).
                     *
                     * @param {Function} successCallback -  The callback which will be called when the operation is successful.
                     * This callback function is passed a single boolean parameter which is TRUE if WiFi is enabled.
                     * @param {Function} errorCallback -  The callback which will be called when the operation encounters an error.
                     *  This callback function is passed a single string parameter containing the error message.
                     */
                    Diagnostic_Wifi.isWifiEnabled = function (successCallback, errorCallback) {
                        return cordova.exec(successCallback,
                            errorCallback,
                            'Diagnostic_Wifi',
                            'isWifiEnabled', []);
                    };

                    return Diagnostic_Wifi;
                });
                module.exports = new Diagnostic_Wifi();
            });

            //iOS Ends
        }
        //cordova-diagnostic-plugin Ends

        //File
        cordova.define("cordova-plugin-file.androidFileSystem", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            FILESYSTEM_PROTOCOL = "cdvfile";

            module.exports = {
                __format__: function (fullPath, nativeUrl) {
                    var path = '/' + this.name + '/' + encodeURI(fullPath);
                    path = path.replace('//', '/');
                    var ret = FILESYSTEM_PROTOCOL + '://localhost' + path;
                    var m = /\?.*/.exec(nativeUrl);
                    if (m) {
                        ret += m[0];
                    }
                    return ret;
                }
            };
        });

        cordova.define("cordova-plugin-file.iosFileSystem", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            FILESYSTEM_PROTOCOL = "cdvfile";

            module.exports = {
                __format__: function (fullPath) {
                    var path = ('/' + this.name + (fullPath[0] === '/' ? '' : '/') + encodeURI(fullPath)).replace('//', '/');
                    return FILESYSTEM_PROTOCOL + '://localhost' + path;
                }
            };
        });

        cordova.define("cordova-plugin-file.DirectoryEntry", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                Entry = require('./Entry'),
                FileError = require('./FileError'),
                DirectoryReader = require('./DirectoryReader');

            /**
             * An interface representing a directory on the file system.
             *
             * {boolean} isFile always false (readonly)
             * {boolean} isDirectory always true (readonly)
             * {DOMString} name of the directory, excluding the path leading to it (readonly)
             * {DOMString} fullPath the absolute full path to the directory (readonly)
             * {FileSystem} filesystem on which the directory resides (readonly)
             */
            var DirectoryEntry = function (name, fullPath, fileSystem, nativeURL) {
                // add trailing slash if it is missing
                if ((fullPath) && !/\/$/.test(fullPath)) {
                    fullPath += "/";
                }
                // add trailing slash if it is missing
                if (nativeURL && !/\/$/.test(nativeURL)) {
                    nativeURL += "/";
                }
                DirectoryEntry.__super__.constructor.call(this, false, true, name, fullPath, fileSystem, nativeURL);
            };

            utils.extend(DirectoryEntry, Entry);

            /**
             * Creates a new DirectoryReader to read entries from this directory
             */
            DirectoryEntry.prototype.createReader = function () {
                return new DirectoryReader(this.toInternalURL());
            };

            /**
             * Creates or looks up a directory
             *
             * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a directory
             * @param {Flags} options to create or exclusively create the directory
             * @param {Function} successCallback is called with the new entry
             * @param {Function} errorCallback is called with a FileError
             */
            DirectoryEntry.prototype.getDirectory = function (path, options, successCallback, errorCallback) {
                argscheck.checkArgs('sOFF', 'DirectoryEntry.getDirectory', arguments);
                var fs = this.filesystem;
                var win = successCallback && function (result) {
                    var entry = new DirectoryEntry(result.name, result.fullPath, fs, result.nativeURL);
                    successCallback(entry);
                };
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(win, fail, "File", "getDirectory", [this.toInternalURL(), path, options]);
            };

            /**
             * Deletes a directory and all of it's contents
             *
             * @param {Function} successCallback is called with no parameters
             * @param {Function} errorCallback is called with a FileError
             */
            DirectoryEntry.prototype.removeRecursively = function (successCallback, errorCallback) {
                argscheck.checkArgs('FF', 'DirectoryEntry.removeRecursively', arguments);
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(successCallback, fail, "File", "removeRecursively", [this.toInternalURL()]);
            };

            /**
             * Creates or looks up a file
             *
             * @param {DOMString} path either a relative or absolute path from this directory in which to look up or create a file
             * @param {Flags} options to create or exclusively create the file
             * @param {Function} successCallback is called with the new entry
             * @param {Function} errorCallback is called with a FileError
             */
            DirectoryEntry.prototype.getFile = function (path, options, successCallback, errorCallback) {
                argscheck.checkArgs('sOFF', 'DirectoryEntry.getFile', arguments);
                var fs = this.filesystem;
                var win = successCallback && function (result) {
                    var FileEntry = require('./FileEntry');
                    var entry = new FileEntry(result.name, result.fullPath, fs, result.nativeURL);
                    successCallback(entry);
                };
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(win, fail, "File", "getFile", [this.toInternalURL(), path, options]);
            };

            module.exports = DirectoryEntry;
        });
        cordova.define("cordova-plugin-file.DirectoryReader", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec'),
                FileError = require('./FileError');

            /**
             * An interface that lists the files and directories in a directory.
             */
            function DirectoryReader(localURL) {
                this.localURL = localURL || null;
                this.hasReadEntries = false;
            }

            /**
             * Returns a list of entries from a directory.
             *
             * @param {Function} successCallback is called with a list of entries
             * @param {Function} errorCallback is called with a FileError
             */
            DirectoryReader.prototype.readEntries = function (successCallback, errorCallback) {
                // If we've already read and passed on this directory's entries, return an empty list.
                if (this.hasReadEntries) {
                    successCallback([]);
                    return;
                }
                var reader = this;
                var win = typeof successCallback !== 'function' ? null : function (result) {
                    var retVal = [];
                    for (var i = 0; i < result.length; i++) {
                        var entry = null;
                        if (result[i].isDirectory) {
                            entry = new (require('./DirectoryEntry'))();
                        } else if (result[i].isFile) {
                            entry = new (require('./FileEntry'))();
                        }
                        entry.isDirectory = result[i].isDirectory;
                        entry.isFile = result[i].isFile;
                        entry.name = result[i].name;
                        entry.fullPath = result[i].fullPath;
                        entry.filesystem = new (require('./FileSystem'))(result[i].filesystemName);
                        entry.nativeURL = result[i].nativeURL;
                        retVal.push(entry);
                    }
                    reader.hasReadEntries = true;
                    successCallback(retVal);
                };
                var fail = typeof errorCallback !== 'function' ? null : function (code) {
                    errorCallback(new FileError(code));
                };
                exec(win, fail, "File", "readEntries", [this.localURL]);
            };

            module.exports = DirectoryReader;
        });
        cordova.define("cordova-plugin-file.Entry", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                FileError = require('./FileError'),
                Metadata = require('./Metadata');

            /**
             * Represents a file or directory on the local file system.
             *
             * @param isFile
             *            {boolean} true if Entry is a file (readonly)
             * @param isDirectory
             *            {boolean} true if Entry is a directory (readonly)
             * @param name
             *            {DOMString} name of the file or directory, excluding the path
             *            leading to it (readonly)
             * @param fullPath
             *            {DOMString} the absolute full path to the file or directory
             *            (readonly)
             * @param fileSystem
             *            {FileSystem} the filesystem on which this entry resides
             *            (readonly)
             * @param nativeURL
             *            {DOMString} an alternate URL which can be used by native
             *            webview controls, for example media players.
             *            (optional, readonly)
             */
            function Entry(isFile, isDirectory, name, fullPath, fileSystem, nativeURL) {
                this.isFile = !!isFile;
                this.isDirectory = !!isDirectory;
                this.name = name || '';
                this.fullPath = fullPath || '';
                this.filesystem = fileSystem || null;
                this.nativeURL = nativeURL || null;
            }

            /**
             * Look up the metadata of the entry.
             *
             * @param successCallback
             *            {Function} is called with a Metadata object
             * @param errorCallback
             *            {Function} is called with a FileError
             */
            Entry.prototype.getMetadata = function (successCallback, errorCallback) {
                argscheck.checkArgs('FF', 'Entry.getMetadata', arguments);
                var success = successCallback && function (entryMetadata) {
                    var metadata = new Metadata({
                        size: entryMetadata.size,
                        modificationTime: entryMetadata.lastModifiedDate
                    });
                    successCallback(metadata);
                };
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(success, fail, "File", "getFileMetadata", [this.toInternalURL()]);
            };

            /**
             * Set the metadata of the entry.
             *
             * @param successCallback
             *            {Function} is called with a Metadata object
             * @param errorCallback
             *            {Function} is called with a FileError
             * @param metadataObject
             *            {Object} keys and values to set
             */
            Entry.prototype.setMetadata = function (successCallback, errorCallback, metadataObject) {
                argscheck.checkArgs('FFO', 'Entry.setMetadata', arguments);
                exec(successCallback, errorCallback, "File", "setMetadata", [this.toInternalURL(), metadataObject]);
            };

            /**
             * Move a file or directory to a new location.
             *
             * @param parent
             *            {DirectoryEntry} the directory to which to move this entry
             * @param newName
             *            {DOMString} new name of the entry, defaults to the current name
             * @param successCallback
             *            {Function} called with the new DirectoryEntry object
             * @param errorCallback
             *            {Function} called with a FileError
             */
            Entry.prototype.moveTo = function (parent, newName, successCallback, errorCallback) {
                argscheck.checkArgs('oSFF', 'Entry.moveTo', arguments);
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                var filesystem = this.filesystem,
                    srcURL = this.toInternalURL(),
                    // entry name
                    name = newName || this.name,
                    success = function (entry) {
                        if (entry) {
                            if (successCallback) {
                                // create appropriate Entry object
                                var newFSName = entry.filesystemName || (entry.filesystem && entry.filesystem.name);
                                var fs = newFSName ? new FileSystem(newFSName, {
                                    name: "",
                                    fullPath: "/"
                                }) : new FileSystem(parent.filesystem.name, {
                                    name: "",
                                    fullPath: "/"
                                });
                                var result = (entry.isDirectory) ? new (require('./DirectoryEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL) : new (require('cordova-plugin-file.FileEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL);
                                successCallback(result);
                            }
                        } else {
                            // no Entry object returned
                            fail && fail(FileError.NOT_FOUND_ERR);
                        }
                    };

                // copy
                exec(success, fail, "File", "moveTo", [srcURL, parent.toInternalURL(), name]);
            };

            /**
             * Copy a directory to a different location.
             *
             * @param parent
             *            {DirectoryEntry} the directory to which to copy the entry
             * @param newName
             *            {DOMString} new name of the entry, defaults to the current name
             * @param successCallback
             *            {Function} called with the new Entry object
             * @param errorCallback
             *            {Function} called with a FileError
             */
            Entry.prototype.copyTo = function (parent, newName, successCallback, errorCallback) {
                argscheck.checkArgs('oSFF', 'Entry.copyTo', arguments);
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                var filesystem = this.filesystem,
                    srcURL = this.toInternalURL(),
                    // entry name
                    name = newName || this.name,
                    // success callback
                    success = function (entry) {
                        if (entry) {
                            if (successCallback) {
                                // create appropriate Entry object
                                var newFSName = entry.filesystemName || (entry.filesystem && entry.filesystem.name);
                                var fs = newFSName ? new FileSystem(newFSName, {
                                    name: "",
                                    fullPath: "/"
                                }) : new FileSystem(parent.filesystem.name, {
                                    name: "",
                                    fullPath: "/"
                                });
                                var result = (entry.isDirectory) ? new (require('./DirectoryEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL) : new (require('cordova-plugin-file.FileEntry'))(entry.name, entry.fullPath, fs, entry.nativeURL);
                                successCallback(result);
                            }
                        } else {
                            // no Entry object returned
                            fail && fail(FileError.NOT_FOUND_ERR);
                        }
                    };

                // copy
                exec(success, fail, "File", "copyTo", [srcURL, parent.toInternalURL(), name]);
            };

            /**
             * Return a URL that can be passed across the bridge to identify this entry.
             */
            Entry.prototype.toInternalURL = function () {
                if (this.filesystem && this.filesystem.__format__) {
                    return this.filesystem.__format__(this.fullPath, this.nativeURL);
                }
            };

            /**
             * Return a URL that can be used to identify this entry.
             * Use a URL that can be used to as the src attribute of a <video> or
             * <audio> tag. If that is not possible, construct a cdvfile:// URL.
             */
            Entry.prototype.toURL = function () {
                if (this.nativeURL) {
                    return this.nativeURL;
                }
                // fullPath attribute may contain the full URL in the case that
                // toInternalURL fails.
                return this.toInternalURL() || "file://localhost" + this.fullPath;
            };

            /**
             * Backwards-compatibility: In v1.0.0 - 1.0.2, .toURL would only return a
             * cdvfile:// URL, and this method was necessary to obtain URLs usable by the
             * webview.
             * See CB-6051, CB-6106, CB-6117, CB-6152, CB-6199, CB-6201, CB-6243, CB-6249,
             * and CB-6300.
             */
            Entry.prototype.toNativeURL = function () {
                console.log("DEPRECATED: Update your code to use 'toURL'");
                return this.toURL();
            };

            /**
             * Returns a URI that can be used to identify this entry.
             *
             * @param {DOMString} mimeType for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.
             * @return uri
             */
            Entry.prototype.toURI = function (mimeType) {
                console.log("DEPRECATED: Update your code to use 'toURL'");
                return this.toURL();
            };

            /**
             * Remove a file or directory. It is an error to attempt to delete a
             * directory that is not empty. It is an error to attempt to delete a
             * root directory of a file system.
             *
             * @param successCallback {Function} called with no parameters
             * @param errorCallback {Function} called with a FileError
             */
            Entry.prototype.remove = function (successCallback, errorCallback) {
                argscheck.checkArgs('FF', 'Entry.remove', arguments);
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(successCallback, fail, "File", "remove", [this.toInternalURL()]);
            };

            /**
             * Look up the parent DirectoryEntry of this entry.
             *
             * @param successCallback {Function} called with the parent DirectoryEntry object
             * @param errorCallback {Function} called with a FileError
             */
            Entry.prototype.getParent = function (successCallback, errorCallback) {
                argscheck.checkArgs('FF', 'Entry.getParent', arguments);
                var fs = this.filesystem;
                var win = successCallback && function (result) {
                    var DirectoryEntry = require('./DirectoryEntry');
                    var entry = new DirectoryEntry(result.name, result.fullPath, fs, result.nativeURL);
                    successCallback(entry);
                };
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(win, fail, "File", "getParent", [this.toInternalURL()]);
            };

            module.exports = Entry;
        });
        cordova.define("cordova-plugin-file.File", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Constructor.
             * name {DOMString} name of the file, without path information
             * fullPath {DOMString} the full path of the file, including the name
             * type {DOMString} mime type
             * lastModifiedDate {Date} last modified date
             * size {Number} size of the file in bytes
             */

            var File = function (name, localURL, type, lastModifiedDate, size) {
                this.name = name || '';
                this.localURL = localURL || null;
                this.type = type || null;
                this.lastModified = lastModifiedDate || null;
                // For backwards compatibility, store the timestamp in lastModifiedDate as well
                this.lastModifiedDate = lastModifiedDate || null;
                this.size = size || 0;

                // These store the absolute start and end for slicing the file.
                this.start = 0;
                this.end = this.size;
            };

            /**
             * Returns a "slice" of the file. Since Cordova Files don't contain the actual
             * content, this really returns a File with adjusted start and end.
             * Slices of slices are supported.
             * start {Number} The index at which to start the slice (inclusive).
             * end {Number} The index at which to end the slice (exclusive).
             */
            File.prototype.slice = function (start, end) {
                var size = this.end - this.start;
                var newStart = 0;
                var newEnd = size;
                if (arguments.length) {
                    if (start < 0) {
                        newStart = Math.max(size + start, 0);
                    } else {
                        newStart = Math.min(size, start);
                    }
                }

                if (arguments.length >= 2) {
                    if (end < 0) {
                        newEnd = Math.max(size + end, 0);
                    } else {
                        newEnd = Math.min(end, size);
                    }
                }

                var newFile = new File(this.name, this.localURL, this.type, this.lastModified, this.size);
                newFile.start = this.start + newStart;
                newFile.end = this.start + newEnd;
                return newFile;
            };

            module.exports = File;
        });
        cordova.define("cordova-plugin-file.FileEntry", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                Entry = require('./Entry'),
                FileWriter = require('./FileWriter'),
                File = require('./File'),
                FileError = require('./FileError');

            /**
             * An interface representing a file on the file system.
             *
             * {boolean} isFile always true (readonly)
             * {boolean} isDirectory always false (readonly)
             * {DOMString} name of the file, excluding the path leading to it (readonly)
             * {DOMString} fullPath the absolute full path to the file (readonly)
             * {FileSystem} filesystem on which the file resides (readonly)
             */
            var FileEntry = function (name, fullPath, fileSystem, nativeURL) {
                FileEntry.__super__.constructor.apply(this, [true, false, name, fullPath, fileSystem, nativeURL]);
            };

            utils.extend(FileEntry, Entry);

            /**
             * Creates a new FileWriter associated with the file that this FileEntry represents.
             *
             * @param {Function} successCallback is called with the new FileWriter
             * @param {Function} errorCallback is called with a FileError
             */
            FileEntry.prototype.createWriter = function (successCallback, errorCallback) {
                this.file(function (filePointer) {
                    var writer = new FileWriter(filePointer);

                    if (writer.localURL === null || writer.localURL === "") {
                        errorCallback && errorCallback(new FileError(FileError.INVALID_STATE_ERR));
                    } else {
                        successCallback && successCallback(writer);
                    }
                }, errorCallback);
            };

            /**
             * Returns a File that represents the current state of the file that this FileEntry represents.
             *
             * @param {Function} successCallback is called with the new File object
             * @param {Function} errorCallback is called with a FileError
             */
            FileEntry.prototype.file = function (successCallback, errorCallback) {
                var localURL = this.toInternalURL();
                var win = successCallback && function (f) {
                    var file = new File(f.name, localURL, f.type, f.lastModifiedDate, f.size);
                    successCallback(file);
                };
                var fail = errorCallback && function (code) {
                    errorCallback(new FileError(code));
                };
                exec(win, fail, "File", "getFileMetadata", [localURL]);
            };

            module.exports = FileEntry;
        });
        cordova.define("cordova-plugin-file.FileError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * FileError
             */
            function FileError(error) {
                this.code = error || null;
            }

            // File error codes
            // Found in DOMException
            FileError.NOT_FOUND_ERR = 1;
            FileError.SECURITY_ERR = 2;
            FileError.ABORT_ERR = 3;

            // Added by File API specification
            FileError.NOT_READABLE_ERR = 4;
            FileError.ENCODING_ERR = 5;
            FileError.NO_MODIFICATION_ALLOWED_ERR = 6;
            FileError.INVALID_STATE_ERR = 7;
            FileError.SYNTAX_ERR = 8;
            FileError.INVALID_MODIFICATION_ERR = 9;
            FileError.QUOTA_EXCEEDED_ERR = 10;
            FileError.TYPE_MISMATCH_ERR = 11;
            FileError.PATH_EXISTS_ERR = 12;

            module.exports = FileError;
        });
        cordova.define("cordova-plugin-file.FileReader", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec'),
                modulemapper = require('cordova/modulemapper'),
                utils = require('cordova/utils'),
                File = require('./File'),
                FileError = require('./FileError'),
                ProgressEvent = require('./ProgressEvent'),
                origFileReader = modulemapper.getOriginalSymbol(window, 'FileReader');

            /**
             * This class reads the mobile device file system.
             *
             * For Android:
             *      The root directory is the root of the file system.
             *      To read from the SD card, the file name is "sdcard/my_file.txt"
             * @constructor
             */
            var FileReader = function () {
                this._readyState = 0;
                this._error = null;
                this._result = null;
                this._localURL = '';
                this._realReader = origFileReader ? new origFileReader() : {};
            };

            // States
            FileReader.EMPTY = 0;
            FileReader.LOADING = 1;
            FileReader.DONE = 2;

            utils.defineGetter(FileReader.prototype, 'readyState', function () {
                return this._localURL ? this._readyState : this._realReader.readyState;
            });

            utils.defineGetter(FileReader.prototype, 'error', function () {
                return this._localURL ? this._error : this._realReader.error;
            });

            utils.defineGetter(FileReader.prototype, 'result', function () {
                return this._localURL ? this._result : this._realReader.result;
            });

            function defineEvent(eventName) {
                utils.defineGetterSetter(FileReader.prototype, eventName, function () {
                    return this._realReader[eventName] || null;
                }, function (value) {
                    this._realReader[eventName] = value;
                });
            }
            defineEvent('onloadstart'); // When the read starts.
            defineEvent('onprogress'); // While reading (and decoding) file or fileBlob data, and reporting partial file data (progress.loaded/progress.total)
            defineEvent('onload'); // When the read has successfully completed.
            defineEvent('onerror'); // When the read has failed (see errors).
            defineEvent('onloadend'); // When the request has completed (either in success or failure).
            defineEvent('onabort'); // When the read has been aborted. For instance, by invoking the abort() method.

            function initRead(reader, file) {
                // Already loading something
                if (reader.readyState == FileReader.LOADING) {
                    throw new FileError(FileError.INVALID_STATE_ERR);
                }

                reader._result = null;
                reader._error = null;
                reader._readyState = FileReader.LOADING;

                if (typeof file.localURL == 'string') {
                    reader._localURL = file.localURL;
                } else {
                    reader._localURL = '';
                    return true;
                }

                reader.onloadstart && reader.onloadstart(new ProgressEvent("loadstart", {
                    target: reader
                }));
            }

            /**
             * Abort reading file.
             */
            FileReader.prototype.abort = function () {
                if (origFileReader && !this._localURL) {
                    return this._realReader.abort();
                }
                this._result = null;

                if (this._readyState == FileReader.DONE || this._readyState == FileReader.EMPTY) {
                    return;
                }

                this._readyState = FileReader.DONE;

                // If abort callback
                if (typeof this.onabort === 'function') {
                    this.onabort(new ProgressEvent('abort', {
                        target: this
                    }));
                }
                // If load end callback
                if (typeof this.onloadend === 'function') {
                    this.onloadend(new ProgressEvent('loadend', {
                        target: this
                    }));
                }
            };

            /**
             * Read text file.
             *
             * @param file          {File} File object containing file properties
             * @param encoding      [Optional] (see http://www.iana.org/assignments/character-sets)
             */
            FileReader.prototype.readAsText = function (file, encoding) {
                if (initRead(this, file)) {
                    return this._realReader.readAsText(file, encoding);
                }

                // Default encoding is UTF-8
                var enc = encoding ? encoding : "UTF-8";
                var me = this;
                var execArgs = [this._localURL, enc, file.start, file.end];

                // Read file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        // Save result
                        me._result = r;

                        // If onload callback
                        if (typeof me.onload === "function") {
                            me.onload(new ProgressEvent("load", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        // null result
                        me._result = null;

                        // Save error
                        me._error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    }, "File", "readAsText", execArgs);
            };

            /**
             * Read file and return data as a base64 encoded data url.
             * A data url is of the form:
             *      data:[<mediatype>][;base64],<data>
             *
             * @param file          {File} File object containing file properties
             */
            FileReader.prototype.readAsDataURL = function (file) {
                if (initRead(this, file)) {
                    return this._realReader.readAsDataURL(file);
                }

                var me = this;
                var execArgs = [this._localURL, file.start, file.end];

                // Read file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        // Save result
                        me._result = r;

                        // If onload callback
                        if (typeof me.onload === "function") {
                            me.onload(new ProgressEvent("load", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        me._result = null;

                        // Save error
                        me._error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    }, "File", "readAsDataURL", execArgs);
            };

            /**
             * Read file and return data as a binary data.
             *
             * @param file          {File} File object containing file properties
             */
            FileReader.prototype.readAsBinaryString = function (file) {
                if (initRead(this, file)) {
                    return this._realReader.readAsBinaryString(file);
                }

                var me = this;
                var execArgs = [this._localURL, file.start, file.end];

                // Read file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        me._result = r;

                        // If onload callback
                        if (typeof me.onload === "function") {
                            me.onload(new ProgressEvent("load", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        me._result = null;

                        // Save error
                        me._error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    }, "File", "readAsBinaryString", execArgs);
            };

            /**
             * Read file and return data as a binary data.
             *
             * @param file          {File} File object containing file properties
             */
            FileReader.prototype.readAsArrayBuffer = function (file) {
                if (initRead(this, file)) {
                    return this._realReader.readAsArrayBuffer(file);
                }

                var me = this;
                var execArgs = [this._localURL, file.start, file.end];

                // Read file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        if (r instanceof Array) {
                            r = new Uint8Array(r).buffer;
                        }
                        me._result = r;

                        // If onload callback
                        if (typeof me.onload === "function") {
                            me.onload(new ProgressEvent("load", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me._readyState === FileReader.DONE) {
                            return;
                        }

                        // DONE state
                        me._readyState = FileReader.DONE;

                        me._result = null;

                        // Save error
                        me._error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                target: me
                            }));
                        }

                        // If onloadend callback
                        if (typeof me.onloadend === "function") {
                            me.onloadend(new ProgressEvent("loadend", {
                                target: me
                            }));
                        }
                    }, "File", "readAsArrayBuffer", execArgs);
            };

            module.exports = FileReader;
        });
        cordova.define("cordova-plugin-file.FileSystem", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var DirectoryEntry = require('./DirectoryEntry');

            /**
             * An interface representing a file system
             *
             * @constructor
             * {DOMString} name the unique name of the file system (readonly)
             * {DirectoryEntry} root directory of the file system (readonly)
             */
            var FileSystem = function (name, root) {
                this.name = name;
                if (root) {
                    this.root = new DirectoryEntry(root.name, root.fullPath, this, root.nativeURL);
                } else {
                    this.root = new DirectoryEntry(this.name, '/', this);
                }
            };

            FileSystem.prototype.__format__ = function (fullPath, nativeUrl) {
                return fullPath;
            };

            FileSystem.prototype.toJSON = function () {
                return "<FileSystem: " + this.name + ">";
            };

            module.exports = FileSystem;
        });
        cordova.define("cordova-plugin-file.fileSystemPaths", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec');
            var channel = require('cordova/channel');

            exports.file = {
                // Read-only directory where the application is installed.
                applicationDirectory: null,
                // Root of app's private writable storage
                applicationStorageDirectory: null,
                // Where to put app-specific data files.
                dataDirectory: null,
                // Cached files that should survive app restarts.
                // Apps should not rely on the OS to delete files in here.
                cacheDirectory: null,
                // Android: the application space on external storage.
                externalApplicationStorageDirectory: null,
                // Android: Where to put app-specific data files on external storage.
                externalDataDirectory: null,
                // Android: the application cache on external storage.
                externalCacheDirectory: null,
                // Android: the external storage (SD card) root.
                externalRootDirectory: null,
                // iOS: Temp directory that the OS can clear at will.
                tempDirectory: null,
                // iOS: Holds app-specific files that should be synced (e.g. to iCloud).
                syncedDataDirectory: null,
                // iOS: Files private to the app, but that are meaningful to other applciations (e.g. Office files)
                documentsDirectory: null,
                // BlackBerry10: Files globally available to all apps
                sharedDirectory: null
            };

            channel.waitForInitialization('onFileSystemPathsReady');
            channel.onCordovaReady.subscribe(function () {
                function after(paths) {
                    for (var k in paths) {
                        exports.file[k] = paths[k];
                    }
                    channel.initializationComplete('onFileSystemPathsReady');
                }
                exec(after, null, 'File', 'requestAllPaths', []);
            });
        });
        cordova.define("cordova-plugin-file.fileSystems", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            // Overridden by Android, BlackBerry 10 and iOS to populate fsMap.
            module.exports.getFs = function (name, callback) {
                callback(null);
            };
        });
        cordova.define("cordova-plugin-file.fileSystems-roots", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            // Map of fsName -> FileSystem.
            var fsMap = null;
            var FileSystem = require('./FileSystem');
            var exec = require('cordova/exec');

            // Overridden by Android, BlackBerry 10 and iOS to populate fsMap.
            require('./fileSystems').getFs = function (name, callback) {
                if (fsMap) {
                    callback(fsMap[name]);
                } else {
                    exec(success, null, "File", "requestAllFileSystems", []);

                    function success(response) {
                        fsMap = {};
                        for (var i = 0; i < response.length; ++i) {
                            var fsRoot = response[i];
                            var fs = new FileSystem(fsRoot.filesystemName, fsRoot);
                            fsMap[fs.name] = fs;
                        }
                        callback(fsMap[name]);
                    }
                }
            };
        });
        cordova.define("cordova-plugin-file.FileUploadOptions", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Options to customize the HTTP request used to upload files.
             * @constructor
             * @param fileKey {String}   Name of file request parameter.
             * @param fileName {String}  Filename to be used by the server. Defaults to image.jpg.
             * @param mimeType {String}  Mimetype of the uploaded file. Defaults to image/jpeg.
             * @param params {Object}    Object with key: value params to send to the server.
             * @param headers {Object}   Keys are header names, values are header values. Multiple
             *                           headers of the same name are not supported.
             */
            var FileUploadOptions = function (fileKey, fileName, mimeType, params, headers, httpMethod) {
                this.fileKey = fileKey || null;
                this.fileName = fileName || null;
                this.mimeType = mimeType || null;
                this.params = params || null;
                this.headers = headers || null;
                this.httpMethod = httpMethod || null;
            };

            module.exports = FileUploadOptions;
        });
        cordova.define("cordova-plugin-file.FileUploadOptions1", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Options to customize the HTTP request used to upload files.
             * @constructor
             * @param fileKey {String}   Name of file request parameter.
             * @param fileName {String}  Filename to be used by the server. Defaults to image.jpg.
             * @param mimeType {String}  Mimetype of the uploaded file. Defaults to image/jpeg.
             * @param params {Object}    Object with key: value params to send to the server.
             */
            var FileUploadOptions = function (fileKey, fileName, mimeType, params, headers, httpMethod) {
                this.fileKey = fileKey || null;
                this.fileName = fileName || null;
                this.mimeType = mimeType || null;
                this.headers = headers || null;
                this.httpMethod = httpMethod || null;

                if (params && typeof params != typeof "") {
                    var arrParams = [];
                    for (var v in params) {
                        arrParams.push(v + "=" + params[v]);
                    }
                    this.params = encodeURIComponent(arrParams.join("&"));
                } else {
                    this.params = params || null;
                }
            };

            module.exports = FileUploadOptions;
        });
        cordova.define("cordova-plugin-file.FileUploadResult", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * FileUploadResult
             * @constructor
             */
            module.exports = function FileUploadResult(size, code, content) {
                this.bytesSent = size;
                this.responseCode = code;
                this.response = content;
            };
        });
        cordova.define("cordova-plugin-file.FileWriter", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec'),
                FileError = require('./FileError'),
                ProgressEvent = require('./ProgressEvent');

            /**
             * This class writes to the mobile device file system.
             *
             * For Android:
             *      The root directory is the root of the file system.
             *      To write to the SD card, the file name is "sdcard/my_file.txt"
             *
             * @constructor
             * @param file {File} File object containing file properties
             * @param append if true write to the end of the file, otherwise overwrite the file
             */
            var FileWriter = function (file) {
                this.fileName = "";
                this.length = 0;
                if (file) {
                    this.localURL = file.localURL || file;
                    this.length = file.size || 0;
                }
                // default is to write at the beginning of the file
                this.position = 0;

                this.readyState = 0; // EMPTY

                this.result = null;

                // Error
                this.error = null;

                // Event handlers
                this.onwritestart = null; // When writing starts
                this.onprogress = null; // While writing the file, and reporting partial file data
                this.onwrite = null; // When the write has successfully completed.
                this.onwriteend = null; // When the request has completed (either in success or failure).
                this.onabort = null; // When the write has been aborted. For instance, by invoking the abort() method.
                this.onerror = null; // When the write has failed (see errors).
            };

            // States
            FileWriter.INIT = 0;
            FileWriter.WRITING = 1;
            FileWriter.DONE = 2;

            /**
             * Abort writing file.
             */
            FileWriter.prototype.abort = function () {
                // check for invalid state
                if (this.readyState === FileWriter.DONE || this.readyState === FileWriter.INIT) {
                    throw new FileError(FileError.INVALID_STATE_ERR);
                }

                // set error
                this.error = new FileError(FileError.ABORT_ERR);

                this.readyState = FileWriter.DONE;

                // If abort callback
                if (typeof this.onabort === "function") {
                    this.onabort(new ProgressEvent("abort", {
                        "target": this
                    }));
                }

                // If write end callback
                if (typeof this.onwriteend === "function") {
                    this.onwriteend(new ProgressEvent("writeend", {
                        "target": this
                    }));
                }
            };

            /**
             * Writes data to the file
             *
             * @param data text or blob to be written
             */
            FileWriter.prototype.write = function (data) {
                var that = this;
                var supportsBinary = (typeof window.Blob !== 'undefined' && typeof window.ArrayBuffer !== 'undefined');
                var isProxySupportBlobNatively = (cordova.platformId === "windows8" || cordova.platformId === "windows");
                var isBinary;

                // Check to see if the incoming data is a blob
                if (data instanceof File || (!isProxySupportBlobNatively && supportsBinary && data instanceof Blob)) {
                    var fileReader = new FileReader();
                    fileReader.onload = function () {
                        // Call this method again, with the arraybuffer as argument
                        FileWriter.prototype.write.call(that, this.result);
                    };
                    if (supportsBinary) {
                        fileReader.readAsArrayBuffer(data);
                    } else {
                        fileReader.readAsText(data);
                    }
                    return;
                }

                // Mark data type for safer transport over the binary bridge
                isBinary = supportsBinary && (data instanceof ArrayBuffer);
                if (isBinary && cordova.platformId === "windowsphone") {
                    // create a plain array, using the keys from the Uint8Array view so that we can serialize it
                    data = Array.apply(null, new Uint8Array(data));
                }

                // Throw an exception if we are already writing a file
                if (this.readyState === FileWriter.WRITING) {
                    throw new FileError(FileError.INVALID_STATE_ERR);
                }

                // WRITING state
                this.readyState = FileWriter.WRITING;

                var me = this;

                // If onwritestart callback
                if (typeof me.onwritestart === "function") {
                    me.onwritestart(new ProgressEvent("writestart", {
                        "target": me
                    }));
                }

                // Write file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me.readyState === FileWriter.DONE) {
                            return;
                        }

                        // position always increases by bytes written because file would be extended
                        me.position += r;
                        // The length of the file is now where we are done writing.

                        me.length = me.position;

                        // DONE state
                        me.readyState = FileWriter.DONE;

                        // If onwrite callback
                        if (typeof me.onwrite === "function") {
                            me.onwrite(new ProgressEvent("write", {
                                "target": me
                            }));
                        }

                        // If onwriteend callback
                        if (typeof me.onwriteend === "function") {
                            me.onwriteend(new ProgressEvent("writeend", {
                                "target": me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me.readyState === FileWriter.DONE) {
                            return;
                        }

                        // DONE state
                        me.readyState = FileWriter.DONE;

                        // Save error
                        me.error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                "target": me
                            }));
                        }

                        // If onwriteend callback
                        if (typeof me.onwriteend === "function") {
                            me.onwriteend(new ProgressEvent("writeend", {
                                "target": me
                            }));
                        }
                    }, "File", "write", [this.localURL, data, this.position, isBinary]);
            };

            /**
             * Moves the file pointer to the location specified.
             *
             * If the offset is a negative number the position of the file
             * pointer is rewound.  If the offset is greater than the file
             * size the position is set to the end of the file.
             *
             * @param offset is the location to move the file pointer to.
             */
            FileWriter.prototype.seek = function (offset) {
                // Throw an exception if we are already writing a file
                if (this.readyState === FileWriter.WRITING) {
                    throw new FileError(FileError.INVALID_STATE_ERR);
                }

                if (!offset && offset !== 0) {
                    return;
                }

                // See back from end of file.
                if (offset < 0) {
                    this.position = Math.max(offset + this.length, 0);
                }
                // Offset is bigger than file size so set position
                // to the end of the file.
                else if (offset > this.length) {
                    this.position = this.length;
                }
                // Offset is between 0 and file size so set the position
                // to start writing.
                else {
                    this.position = offset;
                }
            };

            /**
             * Truncates the file to the size specified.
             *
             * @param size to chop the file at.
             */
            FileWriter.prototype.truncate = function (size) {
                // Throw an exception if we are already writing a file
                if (this.readyState === FileWriter.WRITING) {
                    throw new FileError(FileError.INVALID_STATE_ERR);
                }

                // WRITING state
                this.readyState = FileWriter.WRITING;

                var me = this;

                // If onwritestart callback
                if (typeof me.onwritestart === "function") {
                    me.onwritestart(new ProgressEvent("writestart", {
                        "target": this
                    }));
                }

                // Write file
                exec(
                    // Success callback
                    function (r) {
                        // If DONE (cancelled), then don't do anything
                        if (me.readyState === FileWriter.DONE) {
                            return;
                        }

                        // DONE state
                        me.readyState = FileWriter.DONE;

                        // Update the length of the file
                        me.length = r;
                        me.position = Math.min(me.position, r);

                        // If onwrite callback
                        if (typeof me.onwrite === "function") {
                            me.onwrite(new ProgressEvent("write", {
                                "target": me
                            }));
                        }

                        // If onwriteend callback
                        if (typeof me.onwriteend === "function") {
                            me.onwriteend(new ProgressEvent("writeend", {
                                "target": me
                            }));
                        }
                    },
                    // Error callback
                    function (e) {
                        // If DONE (cancelled), then don't do anything
                        if (me.readyState === FileWriter.DONE) {
                            return;
                        }

                        // DONE state
                        me.readyState = FileWriter.DONE;

                        // Save error
                        me.error = new FileError(e);

                        // If onerror callback
                        if (typeof me.onerror === "function") {
                            me.onerror(new ProgressEvent("error", {
                                "target": me
                            }));
                        }

                        // If onwriteend callback
                        if (typeof me.onwriteend === "function") {
                            me.onwriteend(new ProgressEvent("writeend", {
                                "target": me
                            }));
                        }
                    }, "File", "truncate", [this.localURL, size]);
            };

            module.exports = FileWriter;
        });
        cordova.define("cordova-plugin-file.Flags", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Supplies arguments to methods that lookup or create files and directories.
             *
             * @param create
             *            {boolean} file or directory if it doesn't exist
             * @param exclusive
             *            {boolean} used with create; if true the command will fail if
             *            target path exists
             */
            function Flags(create, exclusive) {
                this.create = create || false;
                this.exclusive = exclusive || false;
            }

            module.exports = Flags;
        });
        cordova.define("cordova-plugin-file.LocalFileSystem", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            exports.TEMPORARY = 0;
            exports.PERSISTENT = 1;
        });
        cordova.define("cordova-plugin-file.Metadata", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Information about the state of the file or directory
             *
             * {Date} modificationTime (readonly)
             */
            var Metadata = function (metadata) {
                if (typeof metadata == "object") {
                    this.modificationTime = new Date(metadata.modificationTime);
                    this.size = metadata.size || 0;
                } else if (typeof metadata == "undefined") {
                    this.modificationTime = null;
                    this.size = 0;
                } else {
                    /* Backwards compatiblity with platforms that only return a timestamp */
                    this.modificationTime = new Date(metadata);
                }
            };

            module.exports = Metadata;
        });
        cordova.define("cordova-plugin-file.ProgressEvent", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            // If ProgressEvent exists in global context, use it already, otherwise use our own polyfill
            // Feature test: See if we can instantiate a native ProgressEvent;
            // if so, use that approach,
            // otherwise fill-in with our own implementation.
            //
            // NOTE: right now we always fill in with our own. Down the road would be nice if we can use whatever is native in the webview.
            var ProgressEvent = (function () {
                /*
                var createEvent = function(data) {
                    var event = document.createEvent('Events');
                    event.initEvent('ProgressEvent', false, false);
                    if (data) {
                        for (var i in data) {
                            if (data.hasOwnProperty(i)) {
                                event[i] = data[i];
                            }
                        }
                        if (data.target) {
                            // TODO: cannot call <some_custom_object>.dispatchEvent
                            // need to first figure out how to implement EventTarget
                        }
                    }
                    return event;
                };
                try {
                    var ev = createEvent({type:"abort",target:document});
                    return function ProgressEvent(type, data) {
                        data.type = type;
                        return createEvent(data);
                    };
                } catch(e){
                */
                return function ProgressEvent(type, dict) {
                    this.type = type;
                    this.bubbles = false;
                    this.cancelBubble = false;
                    this.cancelable = false;
                    this.lengthComputable = false;
                    this.loaded = dict && dict.loaded ? dict.loaded : 0;
                    this.total = dict && dict.total ? dict.total : 0;
                    this.target = dict && dict.target ? dict.target : null;
                };
                //}
            })();

            module.exports = ProgressEvent;
        });
        cordova.define("cordova-plugin-file.requestFileSystem", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            //For browser platform: not all browsers use this file.
            function checkBrowser() {
                if (cordova.platformId === "browser" && navigator.userAgent.search(/Chrome/) > 0) {
                    var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
                    module.exports = requestFileSystem;
                    return;
                }
            }
            checkBrowser();

            var argscheck = require('cordova/argscheck'),
                FileError = require('./FileError'),
                FileSystem = require('./FileSystem'),
                exec = require('cordova/exec');
            var fileSystems = require('./fileSystems');

            /**
             * Request a file system in which to store application data.
             * @param type  local file system type
             * @param size  indicates how much storage space, in bytes, the application expects to need
             * @param successCallback  invoked with a FileSystem object
             * @param errorCallback  invoked if error occurs retrieving file system
             */
            var requestFileSystem = function (type, size, successCallback, errorCallback) {
                argscheck.checkArgs('nnFF', 'requestFileSystem', arguments);
                var fail = function (code) {
                    errorCallback && errorCallback(new FileError(code));
                };

                if (type < 0) {
                    fail(FileError.SYNTAX_ERR);
                } else {
                    // if successful, return a FileSystem object
                    var success = function (file_system) {
                        if (file_system) {
                            if (successCallback) {
                                fileSystems.getFs(file_system.name, function (fs) {
                                    // This should happen only on platforms that haven't implemented requestAllFileSystems (windows)
                                    if (!fs) {
                                        fs = new FileSystem(file_system.name, file_system.root);
                                    }
                                    successCallback(fs);
                                });
                            }
                        } else {
                            // no FileSystem object returned
                            fail(FileError.NOT_FOUND_ERR);
                        }
                    };
                    exec(success, fail, "File", "requestFileSystem", [type, size]);
                }
            };

            module.exports = requestFileSystem;
        });
        cordova.define("cordova-plugin-file.resolveLocalFileSystemURI", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            //For browser platform: not all browsers use overrided `resolveLocalFileSystemURL`.
            function checkBrowser() {
                if (cordova.platformId === "browser" && navigator.userAgent.search(/Chrome/) > 0) {
                    var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
                    module.exports = requestFileSystem;
                    return;
                }
            }
            checkBrowser();

            var argscheck = require('cordova/argscheck'),
                DirectoryEntry = require('./DirectoryEntry'),
                FileEntry = require('./FileEntry'),
                FileError = require('./FileError'),
                exec = require('cordova/exec');
            var fileSystems = require('./fileSystems');

            /**
             * Look up file system Entry referred to by local URI.
             * @param {DOMString} uri  URI referring to a local file or directory
             * @param successCallback  invoked with Entry object corresponding to URI
             * @param errorCallback    invoked if error occurs retrieving file system entry
             */
            module.exports.resolveLocalFileSystemURL = function (uri, successCallback, errorCallback) {
                argscheck.checkArgs('sFF', 'resolveLocalFileSystemURI', arguments);
                // error callback
                var fail = function (error) {
                    errorCallback && errorCallback(new FileError(error));
                };
                // sanity check for 'not:valid:filename' or '/not:valid:filename'
                // file.spec.12 window.resolveLocalFileSystemURI should error (ENCODING_ERR) when resolving invalid URI with leading /.
                if (!uri || uri.split(":").length > 2) {
                    setTimeout(function () {
                        fail(FileError.ENCODING_ERR);
                    }, 0);
                    return;
                }
                // if successful, return either a file or directory entry
                var success = function (entry) {
                    if (entry) {
                        if (successCallback) {
                            // create appropriate Entry object
                            var fsName = entry.filesystemName || (entry.filesystem && entry.filesystem.name) || (entry.filesystem == window.PERSISTENT ? 'persistent' : 'temporary');
                            fileSystems.getFs(fsName, function (fs) {
                                // This should happen only on platforms that haven't implemented requestAllFileSystems (windows)
                                if (!fs) {
                                    fs = new FileSystem(fsName, {
                                        name: "",
                                        fullPath: "/"
                                    });
                                }
                                var result = (entry.isDirectory) ? new DirectoryEntry(entry.name, entry.fullPath, fs, entry.nativeURL) : new FileEntry(entry.name, entry.fullPath, fs, entry.nativeURL);
                                successCallback(result);
                            });
                        }
                    } else {
                        // no Entry object returned
                        fail(FileError.NOT_FOUND_ERR);
                    }
                };

                exec(success, fail, "File", "resolveLocalFileSystemURI", [uri]);
            };

            module.exports.resolveLocalFileSystemURI = function () {
                console.log("resolveLocalFileSystemURI is deprecated. Please call resolveLocalFileSystemURL instead.");
                module.exports.resolveLocalFileSystemURL.apply(this, arguments);
            };
        });

        //File Transfer
        cordova.define("cordova-plugin-file-transfer.FileTransfer", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                FileTransferError = require('./FileTransferError'),
                ProgressEvent = require('cordova-plugin-file.ProgressEvent');

            function newProgressEvent(result) {
                var pe = new ProgressEvent();
                pe.lengthComputable = result.lengthComputable;
                pe.loaded = result.loaded;
                pe.total = result.total;
                return pe;
            }

            function getUrlCredentials(urlString) {
                var credentialsPattern = /^https?\:\/\/(?:(?:(([^:@\/]*)(?::([^@\/]*))?)?@)?([^:\/?#]*)(?::(\d*))?).*$/,
                    credentials = credentialsPattern.exec(urlString);

                return credentials && credentials[1];
            }

            function getBasicAuthHeader(urlString) {
                var header = null;

                // This is changed due to MS Windows doesn't support credentials in http uris
                // so we detect them by regexp and strip off from result url
                // Proof: http://social.msdn.microsoft.com/Forums/windowsapps/en-US/a327cf3c-f033-4a54-8b7f-03c56ba3203f/windows-foundation-uri-security-problem

                if (window.btoa) {
                    var credentials = getUrlCredentials(urlString);
                    if (credentials) {
                        var authHeader = "Authorization";
                        var authHeaderValue = "Basic " + window.btoa(credentials);

                        header = {
                            name: authHeader,
                            value: authHeaderValue
                        };
                    }
                }

                return header;
            }

            function convertHeadersToArray(headers) {
                var result = [];
                for (var header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        var headerValue = headers[header];
                        result.push({
                            name: header,
                            value: headerValue.toString()
                        });
                    }
                }
                return result;
            }

            var idCounter = 0;

            /**
             * FileTransfer uploads a file to a remote server.
             * @constructor
             */
            var FileTransfer = function () {
                this._id = ++idCounter;
                this.onprogress = null; // optional callback
            };

            /**
             * Given an absolute file path, uploads a file on the device to a remote server
             * using a multipart HTTP request.
             * @param filePath {String}           Full path of the file on the device
             * @param server {String}             URL of the server to receive the file
             * @param successCallback (Function}  Callback to be invoked when upload has completed
             * @param errorCallback {Function}    Callback to be invoked upon error
             * @param options {FileUploadOptions} Optional parameters such as file name and mimetype
             * @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false
             */
            FileTransfer.prototype.upload = function (filePath, server, successCallback, errorCallback, options, trustAllHosts) {
                argscheck.checkArgs('ssFFO*', 'FileTransfer.upload', arguments);
                // check for options
                var fileKey = null;
                var fileName = null;
                var mimeType = null;
                var params = null;
                var chunkedMode = true;
                var headers = null;
                var httpMethod = null;
                var basicAuthHeader = getBasicAuthHeader(server);
                if (basicAuthHeader) {
                    server = server.replace(getUrlCredentials(server) + '@', '');

                    options = options || {};
                    options.headers = options.headers || {};
                    options.headers[basicAuthHeader.name] = basicAuthHeader.value;
                }

                if (options) {
                    fileKey = options.fileKey;
                    fileName = options.fileName;
                    mimeType = options.mimeType;
                    headers = options.headers;
                    httpMethod = options.httpMethod || "POST";
                    if (httpMethod.toUpperCase() == "PUT") {
                        httpMethod = "PUT";
                    } else {
                        httpMethod = "POST";
                    }
                    if (options.chunkedMode !== null || typeof options.chunkedMode != "undefined") {
                        chunkedMode = options.chunkedMode;
                    }
                    if (options.params) {
                        params = options.params;
                    } else {
                        params = {};
                    }
                }

                if (cordova.platformId === "windowsphone") {
                    headers = headers && convertHeadersToArray(headers);
                    params = params && convertHeadersToArray(params);
                }

                var fail = errorCallback && function (e) {
                    var error = new FileTransferError(e.code, e.source, e.target, e.http_status, e.body, e.exception);
                    errorCallback(error);
                };

                var self = this;
                var win = function (result) {
                    if (typeof result.lengthComputable != "undefined") {
                        if (self.onprogress) {
                            self.onprogress(newProgressEvent(result));
                        }
                    } else {
                        successCallback && successCallback(result);
                    }
                };
                exec(win, fail, 'FileTransfer', 'upload', [filePath, server, fileKey, fileName, mimeType, params, trustAllHosts, chunkedMode, headers, this._id, httpMethod]);
            };

            /**
             * Downloads a file form a given URL and saves it to the specified directory.
             * @param source {String}          URL of the server to receive the file
             * @param target {String}         Full path of the file on the device
             * @param successCallback (Function}  Callback to be invoked when upload has completed
             * @param errorCallback {Function}    Callback to be invoked upon error
             * @param trustAllHosts {Boolean} Optional trust all hosts (e.g. for self-signed certs), defaults to false
             * @param options {FileDownloadOptions} Optional parameters such as headers
             */
            FileTransfer.prototype.download = function (source, target, successCallback, errorCallback, trustAllHosts, options) {
                argscheck.checkArgs('ssFF*', 'FileTransfer.download', arguments);
                var self = this;

                var basicAuthHeader = getBasicAuthHeader(source);
                if (basicAuthHeader) {
                    source = source.replace(getUrlCredentials(source) + '@', '');

                    options = options || {};
                    options.headers = options.headers || {};
                    options.headers[basicAuthHeader.name] = basicAuthHeader.value;
                }

                var headers = null;
                if (options) {
                    headers = options.headers || null;
                }

                if (cordova.platformId === "windowsphone" && headers) {
                    headers = convertHeadersToArray(headers);
                }

                var win = function (result) {
                    if (typeof result.lengthComputable != "undefined") {
                        if (self.onprogress) {
                            return self.onprogress(newProgressEvent(result));
                        }
                    } else if (successCallback) {
                        var entry = null;
                        if (result.isDirectory) {
                            entry = new (require('cordova-plugin-file.DirectoryEntry'))();
                        } else if (result.isFile) {
                            entry = new (require('cordova-plugin-file.FileEntry'))();
                        }
                        entry.isDirectory = result.isDirectory;
                        entry.isFile = result.isFile;
                        entry.name = result.name;
                        entry.fullPath = result.fullPath;
                        entry.filesystem = new FileSystem(result.filesystemName || (result.filesystem == window.PERSISTENT ? 'persistent' : 'temporary'));
                        entry.nativeURL = result.nativeURL;
                        successCallback(entry);
                    }
                };

                var fail = errorCallback && function (e) {
                    var error = new FileTransferError(e.code, e.source, e.target, e.http_status, e.body, e.exception);
                    errorCallback(error);
                };

                exec(win, fail, 'FileTransfer', 'download', [source, target, trustAllHosts, this._id, headers]);
            };

            /**
             * Aborts the ongoing file transfer on this object. The original error
             * callback for the file transfer will be called if necessary.
             */
            FileTransfer.prototype.abort = function () {
                exec(null, null, 'FileTransfer', 'abort', [this._id]);
            };

            module.exports = FileTransfer;
        });
        cordova.define("cordova-plugin-file-transfer.FileTransferError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * FileTransferError
             * @constructor
             */
            var FileTransferError = function (code, source, target, status, body, exception) {
                this.code = code || null;
                this.source = source || null;
                this.target = target || null;
                this.http_status = status || null;
                this.body = body || null;
                this.exception = exception || null;
            };

            FileTransferError.FILE_NOT_FOUND_ERR = 1;
            FileTransferError.INVALID_URL_ERR = 2;
            FileTransferError.CONNECTION_ERR = 3;
            FileTransferError.ABORT_ERR = 4;
            FileTransferError.NOT_MODIFIED_ERR = 5;

            module.exports = FileTransferError;
        });

        //Geolocation for iOS
        //Even though the browser's implementation of geolocation is working
        //The permission popup for the particular page is not good. :(
        if (DronaHQ.onIos) {
            cordova.define("cordova-plugin-geolocation.Coordinates", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                /**
                 * This class contains position information.
                 * @param {Object} lat
                 * @param {Object} lng
                 * @param {Object} alt
                 * @param {Object} acc
                 * @param {Object} head
                 * @param {Object} vel
                 * @param {Object} altacc
                 * @constructor
                 */
                var Coordinates = function (lat, lng, alt, acc, head, vel, altacc) {
                    /**
                     * The latitude of the position.
                     */
                    this.latitude = lat;
                    /**
                     * The longitude of the position,
                     */
                    this.longitude = lng;
                    /**
                     * The accuracy of the position.
                     */
                    this.accuracy = acc;
                    /**
                     * The altitude of the position.
                     */
                    this.altitude = (alt !== undefined ? alt : null);
                    /**
                     * The direction the device is moving at the position.
                     */
                    this.heading = (head !== undefined ? head : null);
                    /**
                     * The velocity with which the device is moving at the position.
                     */
                    this.speed = (vel !== undefined ? vel : null);

                    if (this.speed === 0 || this.speed === null) {
                        this.heading = NaN;
                    }

                    /**
                     * The altitude accuracy of the position.
                     */
                    this.altitudeAccuracy = (altacc !== undefined) ? altacc : null;
                };

                module.exports = Coordinates;
            });
            cordova.define("cordova-plugin-geolocation.Position", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                var Coordinates = require('./Coordinates');

                var Position = function (coords, timestamp) {
                    if (coords) {
                        this.coords = new Coordinates(coords.latitude, coords.longitude, coords.altitude, coords.accuracy, coords.heading, coords.velocity, coords.altitudeAccuracy);
                    } else {
                        this.coords = new Coordinates();
                    }
                    this.timestamp = (timestamp !== undefined) ? timestamp : new Date();
                };

                module.exports = Position;
            });
            cordova.define("cordova-plugin-geolocation.PositionError", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                /**
                 * Position error object
                 *
                 * @constructor
                 * @param code
                 * @param message
                 */
                var PositionError = function (code, message) {
                    this.code = code || null;
                    this.message = message || '';
                };

                PositionError.PERMISSION_DENIED = 1;
                PositionError.POSITION_UNAVAILABLE = 2;
                PositionError.TIMEOUT = 3;

                module.exports = PositionError;
            });
            cordova.define("cordova-plugin-geolocation.geolocation", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                var argscheck = require('cordova/argscheck'),
                    utils = require('cordova/utils'),
                    exec = require('cordova/exec'),
                    PositionError = require('./PositionError'),
                    Position = require('./Position');

                var timers = {}; // list of timers in use

                // Returns default params, overrides if provided with values
                function parseParameters(options) {
                    var opt = {
                        maximumAge: 0,
                        enableHighAccuracy: false,
                        timeout: Infinity
                    };

                    if (options) {
                        if (options.maximumAge !== undefined && !isNaN(options.maximumAge) && options.maximumAge > 0) {
                            opt.maximumAge = options.maximumAge;
                        }
                        if (options.enableHighAccuracy !== undefined) {
                            opt.enableHighAccuracy = options.enableHighAccuracy;
                        }
                        if (options.timeout !== undefined && !isNaN(options.timeout)) {
                            if (options.timeout < 0) {
                                opt.timeout = 0;
                            } else {
                                opt.timeout = options.timeout;
                            }
                        }
                    }

                    return opt;
                }

                // Returns a timeout failure, closed over a specified timeout value and error callback.
                function createTimeout(errorCallback, timeout) {
                    var t = setTimeout(function () {
                        clearTimeout(t);
                        t = null;
                        errorCallback({
                            code: PositionError.TIMEOUT,
                            message: "Position retrieval timed out."
                        });
                    }, timeout);
                    return t;
                }

                var geolocation = {
                    lastPosition: null, // reference to last known (cached) position returned
                    /**
                     * Asynchronously acquires the current position.
                     *
                     * @param {Function} successCallback    The function to call when the position data is available
                     * @param {Function} errorCallback      The function to call when there is an error getting the heading position. (OPTIONAL)
                     * @param {PositionOptions} options     The options for getting the position data. (OPTIONAL)
                     */
                    getCurrentPosition: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'geolocation.getCurrentPosition', arguments);
                        options = parseParameters(options);

                        // Timer var that will fire an error callback if no position is retrieved from native
                        // before the "timeout" param provided expires
                        var timeoutTimer = {
                            timer: null
                        };

                        var win = function (p) {
                            clearTimeout(timeoutTimer.timer);
                            if (!(timeoutTimer.timer)) {
                                // Timeout already happened, or native fired error callback for
                                // this geo request.
                                // Don't continue with success callback.
                                return;
                            }
                            var pos = new Position({
                                latitude: p.latitude,
                                longitude: p.longitude,
                                altitude: p.altitude,
                                accuracy: p.accuracy,
                                heading: p.heading,
                                velocity: p.velocity,
                                altitudeAccuracy: p.altitudeAccuracy
                            },
                                (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
                            );
                            geolocation.lastPosition = pos;
                            successCallback(pos);
                        };
                        var fail = function (e) {
                            clearTimeout(timeoutTimer.timer);
                            timeoutTimer.timer = null;
                            var err = new PositionError(e.code, e.message);
                            if (errorCallback) {
                                errorCallback(err);
                            }
                        };

                        // Check our cached position, if its timestamp difference with current time is less than the maximumAge, then just
                        // fire the success callback with the cached position.
                        if (geolocation.lastPosition && options.maximumAge && (((new Date()).getTime() - geolocation.lastPosition.timestamp.getTime()) <= options.maximumAge)) {
                            successCallback(geolocation.lastPosition);
                            // If the cached position check failed and the timeout was set to 0, error out with a TIMEOUT error object.
                        } else if (options.timeout === 0) {
                            fail({
                                code: PositionError.TIMEOUT,
                                message: "timeout value in PositionOptions set to 0 and no cached Position object available, or cached Position object's age exceeds provided PositionOptions' maximumAge parameter."
                            });
                            // Otherwise we have to call into native to retrieve a position.
                        } else {
                            if (options.timeout !== Infinity) {
                                // If the timeout value was not set to Infinity (default), then
                                // set up a timeout function that will fire the error callback
                                // if no successful position was retrieved before timeout expired.
                                timeoutTimer.timer = createTimeout(fail, options.timeout);
                            } else {
                                // This is here so the check in the win function doesn't mess stuff up
                                // may seem weird but this guarantees timeoutTimer is
                                // always truthy before we call into native
                                timeoutTimer.timer = true;
                            }
                            exec(win, fail, "Geolocation", "getLocation", [options.enableHighAccuracy, options.maximumAge]);
                        }
                        return timeoutTimer;
                    },
                    /**
                     * Asynchronously watches the geolocation for changes to geolocation.  When a change occurs,
                     * the successCallback is called with the new location.
                     *
                     * @param {Function} successCallback    The function to call each time the location data is available
                     * @param {Function} errorCallback      The function to call when there is an error getting the location data. (OPTIONAL)
                     * @param {PositionOptions} options     The options for getting the location data such as frequency. (OPTIONAL)
                     * @return String                       The watch id that must be passed to #clearWatch to stop watching.
                     */
                    watchPosition: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'geolocation.getCurrentPosition', arguments);
                        options = parseParameters(options);

                        var id = utils.createUUID();

                        // Tell device to get a position ASAP, and also retrieve a reference to the timeout timer generated in getCurrentPosition
                        timers[id] = geolocation.getCurrentPosition(successCallback, errorCallback, options);

                        var fail = function (e) {
                            clearTimeout(timers[id].timer);
                            var err = new PositionError(e.code, e.message);
                            if (errorCallback) {
                                errorCallback(err);
                            }
                        };

                        var win = function (p) {
                            clearTimeout(timers[id].timer);
                            if (options.timeout !== Infinity) {
                                timers[id].timer = createTimeout(fail, options.timeout);
                            }
                            var pos = new Position({
                                latitude: p.latitude,
                                longitude: p.longitude,
                                altitude: p.altitude,
                                accuracy: p.accuracy,
                                heading: p.heading,
                                velocity: p.velocity,
                                altitudeAccuracy: p.altitudeAccuracy
                            },
                                (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
                            );
                            geolocation.lastPosition = pos;
                            successCallback(pos);
                        };

                        exec(win, fail, "Geolocation", "addWatch", [id, options.enableHighAccuracy]);

                        return id;
                    },
                    /**
                     * Clears the specified heading watch.
                     *
                     * @param {String} id       The ID of the watch returned from #watchPosition
                     */
                    clearWatch: function (id) {
                        if (id && timers[id] !== undefined) {
                            clearTimeout(timers[id].timer);
                            timers[id].timer = false;
                            exec(null, null, "Geolocation", "clearWatch", [id]);
                        }
                    }
                };

                module.exports = geolocation;
            });
        }

        //https://github.com/litehelpers/Cordova-sqlite-storage
        //Sqlite storage with sandbox modification
        cordova.define("cordova-sqlite-storage.SQLitePlugin", function (require, exports, module) {
            (function () {
                var DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, nextTick, root, txLocks;

                root = this;

                READ_ONLY_REGEX = /^\s*(?:drop|delete|insert|update|create)\s/i;

                DB_STATE_INIT = "INIT";

                DB_STATE_OPEN = "OPEN";

                txLocks = {};

                newSQLError = function (error, code) {
                    var sqlError;
                    sqlError = error;
                    if (!code) {
                        code = 0;
                    }
                    if (!sqlError) {
                        sqlError = new Error("a plugin had an error but provided no response");
                        sqlError.code = code;
                    }
                    if (typeof sqlError === "string") {
                        sqlError = new Error(error);
                        sqlError.code = code;
                    }
                    if (!sqlError.code && sqlError.message) {
                        sqlError.code = code;
                    }
                    if (!sqlError.code && !sqlError.message) {
                        sqlError = new Error("an unknown error was returned: " + JSON.stringify(sqlError));
                        sqlError.code = code;
                    }
                    return sqlError;
                };

                nextTick = window.setImmediate || function (fun) {
                    window.setTimeout(fun, 0);
                };

                /*
                  Utility that avoids leaking the arguments object. See
                  https://www.npmjs.org/package/argsarray
                 */

                argsArray = function (fun) {
                    return function () {
                        var args, i, len;
                        len = arguments.length;
                        if (len) {
                            args = [];
                            i = -1;
                            while (++i < len) {
                                args[i] = arguments[i];
                            }
                            return fun.call(this, args);
                        } else {
                            return fun.call(this, []);
                        }
                    };
                };

                SQLitePlugin = function (openargs, openSuccess, openError) {
                    var dbname;
                    if (!(openargs && openargs['name'])) {
                        throw newSQLError("Cannot create a SQLitePlugin db instance without a db name");
                    }
                    dbname = openargs.name;
                    if (typeof dbname !== 'string') {
                        throw newSQLError('sqlite plugin database name must be a string');
                    }
                    this.openargs = openargs;
                    this.dbname = dbname;
                    this.openSuccess = openSuccess;
                    this.openError = openError;
                    this.openSuccess || (this.openSuccess = function () {
                        console.log("DB opened: " + dbname);
                    });
                    this.openError || (this.openError = function (e) {
                        console.log(e.message);
                    });
                    this.open(this.openSuccess, this.openError);
                };

                SQLitePlugin.prototype.databaseFeatures = {
                    isSQLitePluginDatabase: true
                };

                SQLitePlugin.prototype.openDBs = {};

                SQLitePlugin.prototype.addTransaction = function (t) {
                    if (!txLocks[this.dbname]) {
                        txLocks[this.dbname] = {
                            queue: [],
                            inProgress: false
                        };
                    }
                    txLocks[this.dbname].queue.push(t);
                    if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {
                        this.startNextTransaction();
                    } else {
                        if (this.dbname in this.openDBs) {
                            console.log('new transaction is waiting for open operation');
                        } else {
                            console.log('database is closed, new transaction is [stuck] waiting until db is opened again!');
                        }
                    }
                };

                SQLitePlugin.prototype.transaction = function (fn, error, success) {
                    if (!this.openDBs[this.dbname]) {
                        error(newSQLError('database not open'));
                        return;
                    }
                    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));
                };

                SQLitePlugin.prototype.readTransaction = function (fn, error, success) {
                    if (!this.openDBs[this.dbname]) {
                        error(newSQLError('database not open'));
                        return;
                    }
                    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));
                };

                SQLitePlugin.prototype.startNextTransaction = function () {
                    var self;
                    self = this;
                    nextTick((function (_this) {
                        return function () {
                            var txLock;
                            if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {
                                console.log('cannot start next transaction: database not open');
                                return;
                            }
                            txLock = txLocks[self.dbname];
                            if (!txLock) {
                                console.log('cannot start next transaction: database connection is lost');
                                return;
                            } else if (txLock.queue.length > 0 && !txLock.inProgress) {
                                txLock.inProgress = true;
                                txLock.queue.shift().start();
                            }
                        };
                    })(this));
                };

                SQLitePlugin.prototype.abortAllPendingTransactions = function () {
                    var j, len1, ref, tx, txLock;
                    txLock = txLocks[this.dbname];
                    if (!!txLock && txLock.queue.length > 0) {
                        ref = txLock.queue;
                        for (j = 0, len1 = ref.length; j < len1; j++) {
                            tx = ref[j];
                            tx.abortFromQ(newSQLError('Invalid database handle'));
                        }
                        txLock.queue = [];
                        txLock.inProgress = false;
                    }
                };

                SQLitePlugin.prototype.open = function (success, error) {
                    var openerrorcb, opensuccesscb;
                    if (this.dbname in this.openDBs) {
                        console.log('database already open: ' + this.dbname);
                        nextTick((function (_this) {
                            return function () {
                                success(_this);
                            };
                        })(this));
                    } else {
                        console.log('OPEN database: ' + this.dbname);
                        opensuccesscb = (function (_this) {
                            return function () {
                                var txLock;
                                if (!_this.openDBs[_this.dbname]) {
                                    console.log('database was closed during open operation');
                                }
                                if (_this.dbname in _this.openDBs) {
                                    _this.openDBs[_this.dbname] = DB_STATE_OPEN;
                                }
                                if (!!success) {
                                    success(_this);
                                }
                                txLock = txLocks[_this.dbname];
                                if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {
                                    _this.startNextTransaction();
                                }
                            };
                        })(this);
                        openerrorcb = (function (_this) {
                            return function () {
                                console.log('OPEN database: ' + _this.dbname + ' failed, aborting any pending transactions');
                                if (!!error) {
                                    error(newSQLError('Could not open database'));
                                }
                                delete _this.openDBs[_this.dbname];
                                _this.abortAllPendingTransactions();
                            };
                        })(this);
                        this.openDBs[this.dbname] = DB_STATE_INIT;
                        cordova.exec(opensuccesscb, openerrorcb, "SQLitePlugin", "open", [this.openargs]);
                    }
                };

                SQLitePlugin.prototype.close = function (success, error) {
                    if (this.dbname in this.openDBs) {
                        if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
                            console.log('cannot close: transaction is in progress');
                            error(newSQLError('database cannot be closed while a transaction is in progress'));
                            return;
                        }
                        console.log('CLOSE database: ' + this.dbname);
                        delete this.openDBs[this.dbname];
                        if (txLocks[this.dbname]) {
                            console.log('closing db with transaction queue length: ' + txLocks[this.dbname].queue.length);
                        } else {
                            console.log('closing db with no transaction lock state');
                        }
                        cordova.exec(success, error, "SQLitePlugin", "close", [{
                            path: this.dbname
                        }]);
                    } else {
                        console.log('cannot close: database is not open');
                        if (error) {
                            nextTick(function () {
                                return error();
                            });
                        }
                    }
                };

                SQLitePlugin.prototype.executeSql = function (statement, params, success, error) {
                    var myerror, myfn, mysuccess;
                    mysuccess = function (t, r) {
                        if (!!success) {
                            return success(r);
                        }
                    };
                    myerror = function (t, e) {
                        if (!!error) {
                            return error(e);
                        }
                    };
                    myfn = function (tx) {
                        tx.addStatement(statement, params, mysuccess, myerror);
                    };
                    this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));
                };

                SQLitePlugin.prototype.sqlBatch = function (sqlStatements, success, error) {
                    var batchList, j, len1, myfn, st;
                    if (!sqlStatements || sqlStatements.constructor !== Array) {
                        throw newSQLError('sqlBatch expects an array');
                    }
                    batchList = [];
                    for (j = 0, len1 = sqlStatements.length; j < len1; j++) {
                        st = sqlStatements[j];
                        if (st.constructor === Array) {
                            if (st.length === 0) {
                                throw newSQLError('sqlBatch array element of zero (0) length');
                            }
                            batchList.push({
                                sql: st[0],
                                params: st.length === 0 ? [] : st[1]
                            });
                        } else {
                            batchList.push({
                                sql: st,
                                params: []
                            });
                        }
                    }
                    myfn = function (tx) {
                        var elem, k, len2, results;
                        results = [];
                        for (k = 0, len2 = batchList.length; k < len2; k++) {
                            elem = batchList[k];
                            results.push(tx.addStatement(elem.sql, elem.params, null, null));
                        }
                        return results;
                    };
                    this.addTransaction(new SQLitePluginTransaction(this, myfn, error, success, true, false));
                };

                SQLitePluginTransaction = function (db, fn, error, success, txlock, readOnly) {
                    if (typeof fn !== "function") {
                        /*
                        This is consistent with the implementation in Chrome -- it
                        throws if you pass anything other than a function. This also
                        prevents us from stalling our txQueue if somebody passes a
                        false value for fn.
                         */
                        throw newSQLError("transaction expected a function");
                    }
                    this.db = db;
                    this.fn = fn;
                    this.error = error;
                    this.success = success;
                    this.txlock = txlock;
                    this.readOnly = readOnly;
                    this.executes = [];
                    if (txlock) {
                        this.addStatement("BEGIN", [], null, function (tx, err) {
                            throw newSQLError("unable to begin transaction: " + err.message, err.code);
                        });
                    }
                };

                SQLitePluginTransaction.prototype.start = function () {
                    var err, error1;
                    try {
                        this.fn(this);
                        this.run();
                    } catch (error1) {
                        err = error1;
                        txLocks[this.db.dbname].inProgress = false;
                        this.db.startNextTransaction();
                        if (this.error) {
                            this.error(newSQLError(err));
                        }
                    }
                };

                SQLitePluginTransaction.prototype.executeSql = function (sql, values, success, error) {
                    if (this.finalized) {
                        throw {
                            message: 'InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs on a subsequent tick and therefore after the transaction commits.',
                            code: 11
                        };
                        return;
                    }
                    if (this.readOnly && READ_ONLY_REGEX.test(sql)) {
                        this.handleStatementFailure(error, {
                            message: 'invalid sql for a read-only transaction'
                        });
                        return;
                    }
                    this.addStatement(sql, values, success, error);
                };

                SQLitePluginTransaction.prototype.addStatement = function (sql, values, success, error) {
                    var j, len1, params, t, v;
                    params = [];
                    if (!!values && values.constructor === Array) {
                        for (j = 0, len1 = values.length; j < len1; j++) {
                            v = values[j];
                            t = typeof v;
                            params.push((v === null || v === void 0 || t === 'number' || t === 'string' ? v : v instanceof Blob ? v.valueOf() : v.toString()));
                        }
                    }
                    this.executes.push({
                        success: success,
                        error: error,
                        sql: sql,
                        params: params
                    });
                };

                SQLitePluginTransaction.prototype.handleStatementSuccess = function (handler, response) {
                    var payload, rows;
                    if (!handler) {
                        return;
                    }
                    rows = response.rows || [];
                    payload = {
                        rows: {
                            item: function (i) {
                                return rows[i];
                            },
                            length: rows.length
                        },
                        rowsAffected: response.rowsAffected || 0,
                        insertId: response.insertId || void 0
                    };
                    handler(this, payload);
                };

                SQLitePluginTransaction.prototype.handleStatementFailure = function (handler, response) {
                    if (!handler) {
                        throw newSQLError("a statement with no error handler failed: " + response.message, response.code);
                    }
                    if (handler(this, response) !== false) {
                        throw newSQLError("a statement error callback did not return false: " + response.message, response.code);
                    }
                };

                SQLitePluginTransaction.prototype.run = function () {
                    var batchExecutes, handlerFor, i, mycb, mycbmap, request, tropts, tx, txFailure, waiting;
                    txFailure = null;
                    tropts = [];
                    batchExecutes = this.executes;
                    waiting = batchExecutes.length;
                    this.executes = [];
                    tx = this;
                    handlerFor = function (index, didSucceed) {
                        return function (response) {
                            var err, error1;
                            try {
                                if (didSucceed) {
                                    tx.handleStatementSuccess(batchExecutes[index].success, response);
                                } else {
                                    tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));
                                }
                            } catch (error1) {
                                err = error1;
                                if (!txFailure) {
                                    txFailure = newSQLError(err);
                                }
                            }
                            if (--waiting === 0) {
                                if (txFailure) {
                                    tx.abort(txFailure);
                                } else if (tx.executes.length > 0) {
                                    tx.run();
                                } else {
                                    tx.finish();
                                }
                            }
                        };
                    };
                    i = 0;
                    mycbmap = {};
                    while (i < batchExecutes.length) {
                        request = batchExecutes[i];
                        mycbmap[i] = {
                            success: handlerFor(i, true),
                            error: handlerFor(i, false)
                        };
                        tropts.push({
                            qid: 1111,
                            sql: request.sql,
                            params: request.params
                        });
                        i++;
                    }
                    mycb = function (result) {
                        var j, last, q, r, ref, res, type;
                        last = result.length - 1;
                        for (i = j = 0, ref = last; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                            r = result[i];
                            type = r.type;
                            res = r.result;
                            q = mycbmap[i];
                            if (q) {
                                if (q[type]) {
                                    q[type](res);
                                }
                            }
                        }
                    };
                    cordova.exec(mycb, null, "SQLitePlugin", "backgroundExecuteSqlBatch", [{
                        dbargs: {
                            dbname: this.db.dbname
                        },
                        executes: tropts
                    }]);
                };

                SQLitePluginTransaction.prototype.abort = function (txFailure) {
                    var failed, succeeded, tx;
                    if (this.finalized) {
                        return;
                    }
                    tx = this;
                    succeeded = function (tx) {
                        txLocks[tx.db.dbname].inProgress = false;
                        tx.db.startNextTransaction();
                        if (tx.error) {
                            tx.error(txFailure);
                        }
                    };
                    failed = function (tx, err) {
                        txLocks[tx.db.dbname].inProgress = false;
                        tx.db.startNextTransaction();
                        if (tx.error) {
                            tx.error(newSQLError("error while trying to roll back: " + err.message, err.code));
                        }
                    };
                    this.finalized = true;
                    if (this.txlock) {
                        this.addStatement("ROLLBACK", [], succeeded, failed);
                        this.run();
                    } else {
                        succeeded(tx);
                    }
                };

                SQLitePluginTransaction.prototype.finish = function () {
                    var failed, succeeded, tx;
                    if (this.finalized) {
                        return;
                    }
                    tx = this;
                    succeeded = function (tx) {
                        txLocks[tx.db.dbname].inProgress = false;
                        tx.db.startNextTransaction();
                        if (tx.success) {
                            tx.success();
                        }
                    };
                    failed = function (tx, err) {
                        txLocks[tx.db.dbname].inProgress = false;
                        tx.db.startNextTransaction();
                        if (tx.error) {
                            tx.error(newSQLError("error while trying to commit: " + err.message, err.code));
                        }
                    };
                    this.finalized = true;
                    if (this.txlock) {
                        this.addStatement("COMMIT", [], succeeded, failed);
                        this.run();
                    } else {
                        succeeded(tx);
                    }
                };

                SQLitePluginTransaction.prototype.abortFromQ = function (sqlerror) {
                    if (this.error) {
                        this.error(sqlerror);
                    }
                };

                dblocations = ["docs", "libs", "nosync"];

                SQLiteFactory = {
                    /*
                    NOTE: this function should NOT be translated from Javascript
                    back to CoffeeScript by js2coffee.
                    If this function is edited in Javascript then someone will
                    have to translate it back to CoffeeScript by hand.
                     */
                    opendb: argsArray(function (args) {
                        var dblocation, errorcb, first, okcb, openargs;
                        if (args.length < 1) {
                            return null;
                        }
                        first = args[0];
                        openargs = null;
                        okcb = null;
                        errorcb = null;
                        if (first.constructor === String) {
                            openargs = {
                                name: first
                            };
                            if (args.length >= 5) {
                                okcb = args[4];
                                if (args.length > 5) {
                                    errorcb = args[5];
                                }
                            }
                        } else {
                            openargs = first;
                            if (args.length >= 2) {
                                okcb = args[1];
                                if (args.length > 2) {
                                    errorcb = args[2];
                                }
                            }
                        }
                        dblocation = !!openargs.location ? dblocations[openargs.location] : null;
                        openargs.dblocation = dblocation || dblocations[0];
                        if (!!openargs.createFromLocation && openargs.createFromLocation === 1) {
                            openargs.createFromResource = "1";
                        }
                        if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {
                            openargs.androidOldDatabaseImplementation = 1;
                        }
                        if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {
                            openargs.androidBugWorkaround = 1;
                        }
                        return new SQLitePlugin(openargs, okcb, errorcb);
                    }),
                    deleteDb: function (first, success, error) {
                        var args, dblocation;
                        args = {};
                        if (first.constructor === String) {
                            args.path = first;
                            args.dblocation = dblocations[0];
                        } else {
                            if (!(first && first['name'])) {
                                throw new Error("Please specify db name");
                            }
                            args.path = first.name;
                            dblocation = !!first.location ? dblocations[first.location] : null;
                            args.dblocation = dblocation || dblocations[0];
                        }
                        delete SQLitePlugin.prototype.openDBs[args.path];
                        return cordova.exec(success, error, "SQLitePlugin", "delete", [args]);
                    }
                };

                root.sqlitePlugin = {
                    sqliteFeatures: {
                        isSQLitePlugin: true
                    },
                    echoTest: function (okcb, errorcb) {
                        var error, ok;
                        ok = function (s) {
                            if (s === 'test-string') {
                                return okcb();
                            } else {
                                return errorcb("Mismatch: got: '" + s + "' expected 'test-string'");
                            }
                        };
                        error = function (e) {
                            return errorcb(e);
                        };
                        return cordova.exec(okcb, errorcb, "SQLitePlugin", "echoStringValue", [{
                            value: 'test-string'
                        }]);
                    },
                    openDatabase: SQLiteFactory.opendb,
                    deleteDatabase: SQLiteFactory.deleteDb
                };
            }).call(this);
        });

        //Decimal Keyboard
        //https://github.com/dronahq/cordova-plugin-decimal-keyboard-wkwebview
        cordova.define("cordova-plugin-decimal-keyboard-wkwebview", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec');

            var DecimalKeyboard = function () {

            };
            DecimalKeyboard.getActiveElementType = function () {
                return document.activeElement.type;
            };
            DecimalKeyboard.isDecimal = function () {
                var showDecimal = null;
                var activeElement = document.activeElement;
                if (activeElement.attributes["decimal"] == undefined ||
                    activeElement.attributes["decimal"] == 'undefined' ||
                    activeElement.attributes["decimal"].value == 'false') {
                    showDecimal = false;
                } else {
                    showDecimal = true;
                }
                return showDecimal;
            };
            DecimalKeyboard.getDecimalChar = function (activeElement) {

                if (activeElement == undefined || activeElement == null || activeElement == 'undefined')
                    activeElement = document.activeElement;

                var decimalChar = null;
                if (activeElement.attributes["decimal-char"] == undefined ||
                    activeElement.attributes["decimal-char"] == 'undefined') {
                    decimalChar = '.'
                } else {
                    decimalChar = activeElement.attributes["decimal-char"].value;
                }
                return decimalChar;
            };
            DecimalKeyboard.addDecimalAtPos = function (val, position) {

            };
            DecimalKeyboard.addDecimal = function () {
                var activeElement = document.activeElement;
                var allowMultipleDecimals = true;
                if (activeElement.attributes["allow-multiple-decimals"] == undefined ||
                    activeElement.attributes["allow-multiple-decimals"] == 'undefined' ||
                    activeElement.attributes["allow-multiple-decimals"].value == 'false') {
                    allowMultipleDecimals = false;
                }
                var value = activeElement.value;
                var valueToSet = '';
                var decimalChar = DecimalKeyboard.getDecimalChar(activeElement);
                var caretPosStart = activeElement.selectionStart;
                var caretPosEnd = activeElement.selectionEnd;
                var first = '';
                var last = '';

                first = value.substring(0, caretPosStart);
                last = value.substring(caretPosEnd);

                if (allowMultipleDecimals) {
                    valueToSet = first + decimalChar + last;
                } else {
                    if (value.indexOf(decimalChar) > -1)
                        return;
                    else {
                        if (caretPosStart == 0) {
                            first = '0';
                        }
                        valueToSet = first + decimalChar + last;

                    }
                }

                activeElement.value = valueToSet;
            };


            module.exports = DecimalKeyboard;
        });

        //Ionic Keyboard
        //https://github.com/driftyco/ionic-plugin-keyboard
        cordova.define("ionic-plugin-keyboard.iOS", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec');

            var Keyboard = function () { };

            Keyboard.hideKeyboardAccessoryBar = function (hide) {
                // exec(null, null, "Keyboard", "hideKeyboardAccessoryBar", [hide]);
                console.warn('hideKeyboardAccessoryBar has been removed until a method is found that doesn\'t get rejected from the App Store.')
            };

            Keyboard.close = function () {
                exec(null, null, "Keyboard", "close", []);
            };

            Keyboard.show = function () {
                console.warn('Showing keyboard not supported in iOS due to platform limitations.')
                console.warn('Instead, use input.focus(), and ensure that you have the following setting in your config.xml: \n');
                console.warn('    <preference name="KeyboardDisplayRequiresUserAction" value="false"/>\n');
                // exec(null, null, "Keyboard", "show", []);
            };

            Keyboard.disableScroll = function (disable) {
                exec(null, null, "Keyboard", "disableScroll", [disable]);
            };

            /*
            Keyboard.styleDark = function(dark) {
            exec(null, null, "Keyboard", "styleDark", [dark]);
            };
            */

            Keyboard.isVisible = false;

            module.exports = Keyboard;
        });
        cordova.define("ionic-plugin-keyboard.Android", function (require, exports, module) {
            var argscheck = require('cordova/argscheck'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec'),
                channel = require('cordova/channel');

            var Keyboard = function () { };

            Keyboard.hideKeyboardAccessoryBar = function (hide) {
                exec(null, null, "Keyboard", "hideKeyboardAccessoryBar", [hide]);
            };

            Keyboard.close = function () {
                exec(null, null, "Keyboard", "close", []);
            };

            Keyboard.show = function () {
                exec(null, null, "Keyboard", "show", []);
            };

            Keyboard.disableScroll = function (disable) {
                exec(null, null, "Keyboard", "disableScroll", [disable]);
            };

            /*
            Keyboard.styleDark = function(dark) {
            exec(null, null, "Keyboard", "styleDark", [dark]);
            };
            */

            Keyboard.isVisible = false;

            channel.onCordovaReady.subscribe(function () {
                exec(success, null, 'Keyboard', 'init', []);

                function success(msg) {
                    var action = msg.charAt(0);
                    if (action === 'S') {
                        var keyboardHeight = msg.substr(1);
                        cordova.plugins.Keyboard.isVisible = true;
                        cordova.fireWindowEvent('native.keyboardshow', {
                            'keyboardHeight': +keyboardHeight
                        });

                        //deprecated
                        cordova.fireWindowEvent('native.showkeyboard', {
                            'keyboardHeight': +keyboardHeight
                        });
                    } else if (action === 'H') {
                        cordova.plugins.Keyboard.isVisible = false;
                        cordova.fireWindowEvent('native.keyboardhide');

                        //deprecated
                        cordova.fireWindowEvent('native.hidekeyboard');
                    }
                }
            });

            module.exports = Keyboard;
        });

        //Local notification: https://github.com/katzer/cordova-plugin-local-notifications
        cordova.define("de.appplant.cordova.plugin.local-notification.LocalNotification", function (require, exports, module) {
            /*
             * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.
             *
             * @APPPLANT_LICENSE_HEADER_START@
             *
             * This file contains Original Code and/or Modifications of Original Code
             * as defined in and that are subject to the Apache License
             * Version 2.0 (the 'License'). You may not use this file except in
             * compliance with the License. Please obtain a copy of the License at
             * http://opensource.org/licenses/Apache-2.0/ and read it before using this
             * file.
             *
             * The Original Code and all software distributed under the License are
             * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
             * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
             * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
             * Please see the License for the specific language governing rights and
             * limitations under the License.
             *
             * @APPPLANT_LICENSE_HEADER_END@
             */

            /*************
             * INTERFACE *
             *************/

            /**
             * Returns the default settings.
             *
             * @return {Object}
             */
            exports.getDefaults = function () {
                return this.core.getDefaults();
            };

            /**
             * Overwrite default settings.
             *
             * @param {Object} defaults
             */
            exports.setDefaults = function (defaults) {
                this.core.setDefaults(defaults);
            };

            /**
             * Schedule a new local notification.
             *
             * @param {Object} notifications
             *      The notification properties
             * @param {Function} callback
             *      A function to be called after the notification has been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             * @param {Object?} args
             *      skipPermission:true schedules the notifications immediatly without
             *                          registering or checking for permission
             */
            exports.schedule = function (notifications, callback, scope, args) {
                this.core.schedule(notifications, callback, scope, args);
            };

            /**
             * Update existing notifications specified by IDs in options.
             *
             * @param {Object} notifications
             *      The notification properties to update
             * @param {Function} callback
             *      A function to be called after the notification has been updated
             * @param {Object?} scope
             *      The scope for the callback function
             * @param {Object?} args
             *      skipPermission:true schedules the notifications immediatly without
             *                          registering or checking for permission
             */
            exports.update = function (notifications, callback, scope, args) {
                this.core.update(notifications, callback, scope, args);
            };

            /**
             * Clear the specified notification.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A function to be called after the notification has been cleared
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.clear = function (ids, callback, scope) {
                this.core.clear(ids, callback, scope);
            };

            /**
             * Clear all previously sheduled notifications.
             *
             * @param {Function} callback
             *      A function to be called after all notifications have been cleared
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.clearAll = function (callback, scope) {
                this.core.clearAll(callback, scope);
            };

            /**
             * Cancel the specified notifications.
             *
             * @param {String[]} ids
             *      The IDs of the notifications
             * @param {Function} callback
             *      A function to be called after the notifications has been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.cancel = function (ids, callback, scope) {
                this.core.cancel(ids, callback, scope);
            };

            /**
             * Remove all previously registered notifications.
             *
             * @param {Function} callback
             *      A function to be called after all notifications have been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.cancelAll = function (callback, scope) {
                this.core.cancelAll(callback, scope);
            };

            /**
             * Check if a notification with an ID is present.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isPresent = function (id, callback, scope) {
                this.core.isPresent(id, callback, scope);
            };

            /**
             * Check if a notification with an ID is scheduled.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isScheduled = function (id, callback, scope) {
                this.core.isScheduled(id, callback, scope);
            };

            /**
             * Check if a notification with an ID was triggered.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isTriggered = function (id, callback, scope) {
                this.core.isTriggered(id, callback, scope);
            };

            /**
             * List all local notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllIds = function (callback, scope) {
                this.core.getAllIds(callback, scope);
            };

            /**
             * Alias for `getAllIds`.
             */
            exports.getIds = function () {
                this.getAllIds.apply(this, arguments);
            };

            /**
             * List all scheduled notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getScheduledIds = function (callback, scope) {
                this.core.getScheduledIds(callback, scope);
            };

            /**
             * List all triggered notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getTriggeredIds = function (callback, scope) {
                this.core.getTriggeredIds(callback, scope);
            };

            /**
             * Property list for given local notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.get = function () {
                this.core.get.apply(this.core, arguments);
            };

            /**
             * Property list for all local notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAll = function (callback, scope) {
                this.core.getAll(callback, scope);
            };

            /**
             * Property list for given scheduled notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getScheduled = function () {
                this.core.getScheduled.apply(this.core, arguments);
            };

            /**
             * Property list for all scheduled notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllScheduled = function (callback, scope) {
                this.core.getAllScheduled(callback, scope);
            };

            /**
             * Property list for given triggered notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getTriggered = function () {
                this.core.getTriggered.apply(this.core, arguments);
            };

            /**
             * Property list for all triggered notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllTriggered = function (callback, scope) {
                this.core.getAllTriggered(callback, scope);
            };

            /**
             * Informs if the app has the permission to show notifications.
             *
             * @param {Function} callback
             *      The function to be exec as the callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.hasPermission = function (callback, scope) {
                this.core.hasPermission(callback, scope);
            };

            /**
             * Register permission to show notifications if not already granted.
             *
             * @param {Function} callback
             *      The function to be exec as the callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.registerPermission = function (callback, scope) {
                this.core.registerPermission(callback, scope);
            };

            /****************
             * DEPRECATIONS *
             ****************/

            /**
             * Schedule a new local notification.
             */
            exports.add = function () {
                console.warn('Depreated: Please use `notification.local.schedule` instead.');

                this.schedule.apply(this, arguments);
            };

            /**
             * Register permission to show notifications
             * if not already granted.
             */
            exports.promptForPermission = function () {
                console.warn('Depreated: Please use `notification.local.registerPermission` instead.');

                this.registerPermission.apply(this, arguments);
            };

            /**********
             * EVENTS *
             **********/

            /**
             * Register callback for given event.
             *
             * @param {String} event
             *      The event's name
             * @param {Function} callback
             *      The function to be exec as callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.on = function (event, callback, scope) {
                this.core.on(event, callback, scope);
            };

            /**
             * Unregister callback for given event.
             *
             * @param {String} event
             *      The event's name
             * @param {Function} callback
             *      The function to be exec as callback
             */
            exports.un = function (event, callback) {
                this.core.un(event, callback);
            };
        });
        cordova.define("de.appplant.cordova.plugin.local-notification.LocalNotification.Core", function (require, exports, module) {
            /*
             * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.
             *
             * @APPPLANT_LICENSE_HEADER_START@
             *
             * This file contains Original Code and/or Modifications of Original Code
             * as defined in and that are subject to the Apache License
             * Version 2.0 (the 'License'). You may not use this file except in
             * compliance with the License. Please obtain a copy of the License at
             * http://opensource.org/licenses/Apache-2.0/ and read it before using this
             * file.
             *
             * The Original Code and all software distributed under the License are
             * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
             * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
             * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
             * Please see the License for the specific language governing rights and
             * limitations under the License.
             *
             * @APPPLANT_LICENSE_HEADER_END@
             */

            var exec = require('cordova/exec');

            /********
             * CORE *
             ********/

            /**
             * Returns the default settings.
             *
             * @return {Object}
             */
            exports.getDefaults = function () {
                return this._defaults;
            };

            /**
             * Overwrite default settings.
             *
             * @param {Object} defaults
             */
            exports.setDefaults = function (newDefaults) {
                var defaults = this.getDefaults();

                for (var key in defaults) {
                    if (newDefaults.hasOwnProperty(key)) {
                        defaults[key] = newDefaults[key];
                    }
                }
            };

            /**
             * Schedule a new local notification.
             *
             * @param {Object} msgs
             *      The notification properties
             * @param {Function} callback
             *      A function to be called after the notification has been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             * @param {Object?} args
             *      skipPermission:true schedules the notifications immediatly without
             *                          registering or checking for permission
             */
            exports.schedule = function (msgs, callback, scope, args) {
                var fn = function (granted) {
                    if (!granted) return;

                    var notifications = Array.isArray(msgs) ? msgs : [msgs];

                    for (var i = 0; i < notifications.length; i++) {
                        var notification = notifications[i];

                        this.mergeWithDefaults(notification);
                        this.convertProperties(notification);
                    }

                    this.exec('schedule', notifications, callback, scope);
                };

                if (args && args.skipPermission) {
                    fn.call(this, true);
                } else {
                    this.registerPermission(fn, this);
                }
            };

            /**
             * Update existing notifications specified by IDs in options.
             *
             * @param {Object} notifications
             *      The notification properties to update
             * @param {Function} callback
             *      A function to be called after the notification has been updated
             * @param {Object?} scope
             *      The scope for the callback function
             * @param {Object?} args
             *      skipPermission:true schedules the notifications immediatly without
             *                          registering or checking for permission
             */
            exports.update = function (msgs, callback, scope, args) {
                var fn = function (granted) {
                    if (!granted) return;

                    var notifications = Array.isArray(msgs) ? msgs : [msgs];

                    for (var i = 0; i < notifications.length; i++) {
                        var notification = notifications[i];

                        this.convertProperties(notification);
                    }

                    this.exec('update', notifications, callback, scope);
                };

                if (args && args.skipPermission) {
                    fn.call(this, true);
                } else {
                    this.registerPermission(fn, this);
                }
            };

            /**
             * Clear the specified notification.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A function to be called after the notification has been cleared
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.clear = function (ids, callback, scope) {
                ids = Array.isArray(ids) ? ids : [ids];
                ids = this.convertIds(ids);

                this.exec('clear', ids, callback, scope);
            };

            /**
             * Clear all previously sheduled notifications.
             *
             * @param {Function} callback
             *      A function to be called after all notifications have been cleared
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.clearAll = function (callback, scope) {
                this.exec('clearAll', null, callback, scope);
            };

            /**
             * Cancel the specified notifications.
             *
             * @param {String[]} ids
             *      The IDs of the notifications
             * @param {Function} callback
             *      A function to be called after the notifications has been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.cancel = function (ids, callback, scope) {
                ids = Array.isArray(ids) ? ids : [ids];
                ids = this.convertIds(ids);

                this.exec('cancel', ids, callback, scope);
            };

            /**
             * Remove all previously registered notifications.
             *
             * @param {Function} callback
             *      A function to be called after all notifications have been canceled
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.cancelAll = function (callback, scope) {
                this.exec('cancelAll', null, callback, scope);
            };

            /**
             * Check if a notification with an ID is present.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isPresent = function (id, callback, scope) {
                this.exec('isPresent', id || 0, callback, scope);
            };

            /**
             * Check if a notification with an ID is scheduled.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isScheduled = function (id, callback, scope) {
                this.exec('isScheduled', id || 0, callback, scope);
            };

            /**
             * Check if a notification with an ID was triggered.
             *
             * @param {String} id
             *      The ID of the notification
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.isTriggered = function (id, callback, scope) {
                this.exec('isTriggered', id || 0, callback, scope);
            };

            /**
             * List all local notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllIds = function (callback, scope) {
                this.exec('getAllIds', null, callback, scope);
            };

            /**
             * Alias for `getAllIds`.
             */
            exports.getIds = function () {
                this.getAllIds.apply(this, arguments);
            };

            /**
             * List all scheduled notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getScheduledIds = function (callback, scope) {
                this.exec('getScheduledIds', null, callback, scope);
            };

            /**
             * List all triggered notification IDs.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getTriggeredIds = function (callback, scope) {
                this.exec('getTriggeredIds', null, callback, scope);
            };

            /**
             * Property list for given local notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.get = function () {
                var args = Array.apply(null, arguments);

                if (typeof args[0] == 'function') {
                    args.unshift([]);
                }

                var ids = args[0],
                    callback = args[1],
                    scope = args[2];

                if (!Array.isArray(ids)) {
                    this.exec('getSingle', Number(ids), callback, scope);
                    return;
                }

                ids = this.convertIds(ids);

                this.exec('getAll', ids, callback, scope);
            };

            /**
             * Property list for all local notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAll = function (callback, scope) {
                this.exec('getAll', null, callback, scope);
            };

            /**
             * Property list for given scheduled notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getScheduled = function () {
                var args = Array.apply(null, arguments);

                if (typeof args[0] == 'function') {
                    args.unshift([]);
                }

                var ids = args[0],
                    callback = args[1],
                    scope = args[2];

                if (!Array.isArray(ids)) {
                    ids = [ids];
                }

                if (!Array.isArray(ids)) {
                    this.exec('getSingleScheduled', Number(ids), callback, scope);
                    return;
                }

                ids = this.convertIds(ids);

                this.exec('getScheduled', ids, callback, scope);
            };

            /**
             * Property list for all scheduled notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllScheduled = function (callback, scope) {
                this.exec('getScheduled', null, callback, scope);
            };

            /**
             * Property list for given triggered notifications.
             * If called without IDs, all notification will be returned.
             *
             * @param {Number[]?} ids
             *      Set of notification IDs
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getTriggered = function () {
                var args = Array.apply(null, arguments);

                if (typeof args[0] == 'function') {
                    args.unshift([]);
                }

                var ids = args[0],
                    callback = args[1],
                    scope = args[2];

                if (!Array.isArray(ids)) {
                    ids = [ids];
                }

                if (!Array.isArray(ids)) {
                    this.exec('getSingleTriggered', Number(ids), callback, scope);
                    return;
                }

                ids = this.convertIds(ids);

                this.exec('getTriggered', ids, callback, scope);
            };

            /**
             * Property list for all triggered notifications.
             *
             * @param {Function} callback
             *      A callback function to be called with the list
             * @param {Object?} scope
             *      The scope for the callback function
             */
            exports.getAllTriggered = function (callback, scope) {
                this.exec('getTriggered', null, callback, scope);
            };

            /**
             * Informs if the app has the permission to show notifications.
             *
             * @param {Function} callback
             *      The function to be exec as the callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.hasPermission = function (callback, scope) {
                var fn = this.createCallbackFn(callback, scope);

                if (device.platform != 'iOS') {
                    fn(true);
                    return;
                }

                exec(fn, null, 'LocalNotification', 'hasPermission', []);
            };

            /**
             * Register permission to show notifications if not already granted.
             *
             * @param {Function} callback
             *      The function to be exec as the callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.registerPermission = function (callback, scope) {
                if (this._registered) {
                    return this.hasPermission(callback, scope);
                } else {
                    this._registered = true;
                }

                var fn = this.createCallbackFn(callback, scope);

                if (device.platform != 'iOS') {
                    fn(true);
                    return;
                }

                exec(fn, null, 'LocalNotification', 'registerPermission', []);
            };

            /**********
             * EVENTS *
             **********/

            /**
             * Register callback for given event.
             *
             * @param {String} event
             *      The event's name
             * @param {Function} callback
             *      The function to be exec as callback
             * @param {Object?} scope
             *      The callback function's scope
             */
            exports.on = function (event, callback, scope) {
                if (typeof callback !== "function")
                    return;

                if (!this._listener[event]) {
                    this._listener[event] = [];
                }

                var item = [callback, scope || window];

                this._listener[event].push(item);
            };

            /**
             * Unregister callback for given event.
             *
             * @param {String} event
             *      The event's name
             * @param {Function} callback
             *      The function to be exec as callback
             */
            exports.un = function (event, callback) {
                var listener = this._listener[event];

                if (!listener)
                    return;

                for (var i = 0; i < listener.length; i++) {
                    var fn = listener[i][0];

                    if (fn == callback) {
                        listener.splice(i, 1);
                        break;
                    }
                }
            };
        });
        cordova.define("de.appplant.cordova.plugin.local-notification.LocalNotification.Util", function (require, exports, module) {
            /*
             * Copyright (c) 2013-2015 by appPlant UG. All rights reserved.
             *
             * @APPPLANT_LICENSE_HEADER_START@
             *
             * This file contains Original Code and/or Modifications of Original Code
             * as defined in and that are subject to the Apache License
             * Version 2.0 (the 'License'). You may not use this file except in
             * compliance with the License. Please obtain a copy of the License at
             * http://opensource.org/licenses/Apache-2.0/ and read it before using this
             * file.
             *
             * The Original Code and all software distributed under the License are
             * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
             * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
             * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
             * Please see the License for the specific language governing rights and
             * limitations under the License.
             *
             * @APPPLANT_LICENSE_HEADER_END@
             */

            var exec = require('cordova/exec'),
                channel = require('cordova/channel');

            /***********
             * MEMBERS *
             ***********/

            // Default values
            exports._defaults = {
                text: '',
                title: '',
                sound: 'res://platform_default',
                badge: 0,
                id: 0,
                data: undefined,
                every: undefined,
                at: undefined
            };

            // listener
            exports._listener = {};

            // Registered permission flag
            exports._registered = false;

            /********
             * UTIL *
             ********/

            /**
             * Merge platform specific properties into the default ones.
             *
             * @return {Object}
             *      The default properties for the platform
             */
            exports.applyPlatformSpecificOptions = function () {
                var defaults = this._defaults;

                switch (device.platform) {
                    case 'Android':
                        defaults.icon = 'res://ic_popup_reminder';
                        defaults.smallIcon = undefined;
                        defaults.ongoing = false;
                        defaults.autoClear = true;
                        defaults.led = undefined;
                        defaults.color = undefined;
                        break;
                }

                return defaults;
            };

            /**
             * Merge custom properties with the default values.
             *
             * @param {Object} options
             *      Set of custom values
             *
             * @retrun {Object}
             *      The merged property list
             */
            exports.mergeWithDefaults = function (options) {
                var defaults = this.getDefaults();

                options.at = this.getValueFor(options, 'at', 'firstAt', 'date');
                options.text = this.getValueFor(options, 'text', 'message');
                options.data = this.getValueFor(options, 'data', 'json');

                if (defaults.hasOwnProperty('autoClear')) {
                    options.autoClear = this.getValueFor(options, 'autoClear', 'autoCancel');
                }

                if (options.autoClear !== true && options.ongoing) {
                    options.autoClear = false;
                }

                if (options.at === undefined || options.at === null) {
                    options.at = new Date();
                }

                for (var key in defaults) {
                    if (options[key] === null || options[key] === undefined) {
                        if (options.hasOwnProperty(key) && ['data', 'sound'].indexOf(key) > -1) {
                            options[key] = undefined;
                        } else {
                            options[key] = defaults[key];
                        }
                    }
                }

                for (key in options) {
                    if (!defaults.hasOwnProperty(key)) {
                        delete options[key];
                        console.warn('Unknown property: ' + key);
                    }
                }

                return options;
            };

            /**
             * Convert the passed values to their required type.
             *
             * @param {Object} options
             *      Set of custom values
             *
             * @retrun {Object}
             *      The converted property list
             */
            exports.convertProperties = function (options) {
                if (options.id) {
                    if (isNaN(options.id)) {
                        options.id = this.getDefaults().id;
                        console.warn('Id is not a number: ' + options.id);
                    } else {
                        options.id = Number(options.id);
                    }
                }

                if (options.title) {
                    options.title = options.title.toString();
                }

                if (options.text) {
                    options.text = options.text.toString();
                }

                if (options.badge) {
                    if (isNaN(options.badge)) {
                        options.badge = this.getDefaults().badge;
                        console.warn('Badge number is not a number: ' + options.id);
                    } else {
                        options.badge = Number(options.badge);
                    }
                }

                if (options.at) {
                    if (typeof options.at == 'object') {
                        options.at = options.at.getTime();
                    }

                    options.at = Math.round(options.at / 1000);
                }

                if (typeof options.data == 'object') {
                    options.data = JSON.stringify(options.data);
                }

                if (options.every) {
                    if (device.platform == 'iOS' && typeof options.every != 'string') {
                        options.every = this.getDefaults().every;
                        var warning = 'Every option is not a string: ' + options.id;
                        warning += '. Expects one of: second, minute, hour, day, week, ';
                        warning += 'month, year on iOS.';
                        console.warn(warning);
                    }
                }

                return options;
            };

            /**
             * Create callback, which will be executed within a specific scope.
             *
             * @param {Function} callbackFn
             *      The callback function
             * @param {Object} scope
             *      The scope for the function
             *
             * @return {Function}
             *      The new callback function
             */
            exports.createCallbackFn = function (callbackFn, scope) {
                if (typeof callbackFn != 'function')
                    return;

                return function () {
                    callbackFn.apply(scope || this, arguments);
                };
            };

            /**
             * Convert the IDs to numbers.
             *
             * @param {String/Number[]} ids
             *
             * @return Array of Numbers
             */
            exports.convertIds = function (ids) {
                var convertedIds = [];

                for (var i = 0; i < ids.length; i++) {
                    convertedIds.push(Number(ids[i]));
                }

                return convertedIds;
            };

            /**
             * First found value for the given keys.
             *
             * @param {Object} options
             *      Object with key-value properties
             * @param {String[]} keys*
             *      Key list
             */
            exports.getValueFor = function (options) {
                var keys = Array.apply(null, arguments).slice(1);

                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];

                    if (options.hasOwnProperty(key)) {
                        return options[key];
                    }
                }
            };

            /**
             * Fire event with given arguments.
             *
             * @param {String} event
             *      The event's name
             * @param {args*}
             *      The callback's arguments
             */
            exports.fireEvent = function (event) {
                var args = Array.apply(null, arguments).slice(1),
                    listener = this._listener[event];

                if (!listener)
                    return;

                for (var i = 0; i < listener.length; i++) {
                    var fn = listener[i][0],
                        scope = listener[i][1];

                    fn.apply(scope, args);
                }
            };

            /**
             * Execute the native counterpart.
             *
             * @param {String} action
             *      The name of the action
             * @param args[]
             *      Array of arguments
             * @param {Function} callback
             *      The callback function
             * @param {Object} scope
             *      The scope for the function
             */
            exports.exec = function (action, args, callback, scope) {
                var fn = this.createCallbackFn(callback, scope),
                    params = [];

                if (Array.isArray(args)) {
                    params = args;
                } else if (args) {
                    params.push(args);
                }

                exec(fn, null, 'LocalNotification', action, params);
            };

            /*********
             * HOOKS *
             *********/

            // Called after 'deviceready' event
            channel.deviceready.subscribe(function () {
                // Device is ready now, the listeners are registered
                // and all queued events can be executed.
                exec(null, null, 'LocalNotification', 'deviceready', []);
            });

            // Called before 'deviceready' event
            channel.onCordovaReady.subscribe(function () {
                // Device plugin is ready now
                channel.onCordovaInfoReady.subscribe(function () {
                    // Merge platform specifics into defaults
                    exports.applyPlatformSpecificOptions();
                });
            });
        });

        //Calendar Plugin: https://github.com/dronahq/Calendar-PhoneGap-Plugin
        cordova.define("cordova-plugin-calendar.Calendar", function (require, exports, module) {
            "use strict";

            function Calendar() { }

            Calendar.prototype.getCreateCalendarOptions = function () {
                return {
                    calendarName: null,
                    calendarColor: null // optional, the OS will choose one if left empty, example: pass "#FF0000" for red
                };
            };

            Calendar.prototype.hasReadPermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "hasReadPermission", []);
            };

            Calendar.prototype.requestReadPermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "requestReadPermission", []);
            };

            Calendar.prototype.hasWritePermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "hasWritePermission", []);
            };

            Calendar.prototype.requestWritePermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "requestWritePermission", []);
            };

            Calendar.prototype.hasReadWritePermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "hasReadWritePermission", []);
            };

            Calendar.prototype.requestReadWritePermission = function (callback) {
                cordova.exec(callback, null, "Calendar", "requestReadWritePermission", []);
            };

            Calendar.prototype.createCalendar = function (calendarNameOrOptionsObject, successCallback, errorCallback) {
                var options;
                if (typeof calendarNameOrOptionsObject == "string") {
                    options = {
                        "calendarName": calendarNameOrOptionsObject
                    };
                } else {
                    options = calendarNameOrOptionsObject;
                }
                // merge passed options with defaults
                var mergedOptions = Calendar.prototype.getCreateCalendarOptions();
                for (var val in options) {
                    if (options.hasOwnProperty(val)) {
                        mergedOptions[val] = options[val];
                    }
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "createCalendar", [mergedOptions]);
            };

            Calendar.prototype.deleteCalendar = function (calendarName, successCallback, errorCallback) {
                cordova.exec(successCallback, errorCallback, "Calendar", "deleteCalendar", [{
                    "calendarName": calendarName
                }]);
            };

            Calendar.prototype.openCalendar = function (date, successCallback, errorCallback) {
                // default: today
                if (!(date instanceof Date)) {
                    date = new Date();
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "openCalendar", [{
                    "date": date.getTime()
                }]);
            };

            Calendar.prototype.getCalendarOptions = function () {
                return {
                    firstReminderMinutes: 60,
                    secondReminderMinutes: null,
                    recurrence: null, // options are: 'daily', 'weekly', 'monthly', 'yearly'
                    recurrenceInterval: 1, // only used when recurrence is set
                    recurrenceEndDate: null,
                    calendarName: null,
                    calendarId: null,
                    url: null
                };
            };

            /**
             * This method can be used if you want more control over the event details.
             * Pass in an options object which you can easily override as follow:
             *   var options = window.plugins.calendar.getCalendarOptions();
             *   options.firstReminderMinutes = 150;
             */
            Calendar.prototype.createEventWithOptions = function (title, location, notes, startDate, endDate, options, successCallback, errorCallback) {
                if (!(startDate instanceof Date && endDate instanceof Date)) {
                    errorCallback("startDate and endDate must be JavaScript Date Objects");
                    return;
                }

                // merge passed options with defaults
                var mergedOptions = Calendar.prototype.getCalendarOptions();
                for (var val in options) {
                    if (options.hasOwnProperty(val)) {
                        mergedOptions[val] = options[val];
                    }
                }
                if (options.recurrenceEndDate != null) {
                    mergedOptions.recurrenceEndTime = options.recurrenceEndDate.getTime();
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "createEventWithOptions", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null,
                    "options": mergedOptions
                }]);
            };

            /**
             * @deprecated use createEventWithOptions instead
             */
            Calendar.prototype.createEventInNamedCalendar = function (title, location, notes, startDate, endDate, calendarName, successCallback, errorCallback) {
                Calendar.prototype.createEventWithOptions(title, location, notes, startDate, endDate, {
                    calendarName: calendarName
                }, successCallback, errorCallback);
            };

            Calendar.prototype.createEvent = function (title, location, notes, startDate, endDate, successCallback, errorCallback) {
                Calendar.prototype.createEventWithOptions(title, location, notes, startDate, endDate, {}, successCallback, errorCallback);
            };

            Calendar.prototype.createEventInteractively = function (title, location, notes, startDate, endDate, successCallback, errorCallback) {
                Calendar.prototype.createEventInteractivelyWithOptions(title, location, notes, startDate, endDate, {}, successCallback, errorCallback);
            };

            Calendar.prototype.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options, successCallback, errorCallback) {
                // merge passed options with defaults
                var mergedOptions = Calendar.prototype.getCalendarOptions();
                for (var val in options) {
                    if (options.hasOwnProperty(val)) {
                        mergedOptions[val] = options[val];
                    }
                }
                if (options.recurrenceEndDate != null) {
                    mergedOptions.recurrenceEndTime = options.recurrenceEndDate.getTime();
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "createEventInteractively", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null,
                    "options": mergedOptions
                }])
            };

            Calendar.prototype.findEventWithOptions = function (title, location, notes, startDate, endDate, options, successCallback, errorCallback) {
                // merge passed options with defaults
                var mergedOptions = Calendar.prototype.getCalendarOptions();
                for (var val in options) {
                    if (options.hasOwnProperty(val)) {
                        mergedOptions[val] = options[val];
                    }
                }
                if (options.recurrenceEndDate != null) {
                    mergedOptions.recurrenceEndTime = options.recurrenceEndDate.getTime();
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "findEventWithOptions", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null,
                    "options": mergedOptions
                }])
            };

            Calendar.prototype.findEvent = function (title, location, notes, startDate, endDate, successCallback, errorCallback) {
                Calendar.prototype.findEventWithOptions(title, location, notes, startDate, endDate, {}, successCallback, errorCallback);
            };

            Calendar.prototype.findAllEventsInNamedCalendar = function (calendarName, successCallback, errorCallback) {
                cordova.exec(successCallback, errorCallback, "Calendar", "findAllEventsInNamedCalendar", [{
                    "calendarName": calendarName
                }]);
            };

            Calendar.prototype.deleteEvent = function (title, location, notes, startDate, endDate, successCallback, errorCallback) {
                if (!(startDate instanceof Date && endDate instanceof Date)) {
                    errorCallback("startDate and endDate must be JavaScript Date Objects");
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "deleteEvent", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null
                }])
            };

            Calendar.prototype.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName, successCallback, errorCallback) {
                cordova.exec(successCallback, errorCallback, "Calendar", "deleteEventFromNamedCalendar", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null,
                    "calendarName": calendarName
                }])
            };

            Calendar.prototype.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, options, newOptions, successCallback, errorCallback) {
                if (!(newStartDate instanceof Date && newEndDate instanceof Date)) {
                    errorCallback("newStartDate and newEndDate must be JavaScript Date Objects");
                    return;
                }
                // merge passed options with defaults
                var mergedOptions = Calendar.prototype.getCalendarOptions();
                for (var val in options) {
                    if (options.hasOwnProperty(val)) {
                        mergedOptions[val] = options[val];
                    }
                }
                if (options.recurrenceEndDate != null) {
                    mergedOptions.recurrenceEndTime = options.recurrenceEndDate.getTime();
                }
                // and also merge passed newOptions with defaults
                var newMergedOptions = Calendar.prototype.getCalendarOptions();
                for (var val2 in newOptions) {
                    if (newOptions.hasOwnProperty(val2)) {
                        newMergedOptions[val2] = newOptions[val2];
                    }
                }
                if (newOptions.recurrenceEndDate != null) {
                    newMergedOptions.recurrenceEndTime = newOptions.recurrenceEndDate.getTime();
                }
                cordova.exec(successCallback, errorCallback, "Calendar", "modifyEventWithOptions", [{
                    "title": title,
                    "location": location,
                    "notes": notes,
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null,
                    "newTitle": newTitle,
                    "newLocation": newLocation,
                    "newNotes": newNotes,
                    "newStartTime": newStartDate instanceof Date ? newStartDate.getTime() : null,
                    "newEndTime": newEndDate instanceof Date ? newEndDate.getTime() : null,
                    "options": mergedOptions,
                    "newOptions": newMergedOptions
                }])
            };

            Calendar.prototype.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, successCallback, errorCallback) {
                Calendar.prototype.modifyEventWithOptions(title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, {}, successCallback, errorCallback);
            };

            Calendar.prototype.modifyEventInNamedCalendar = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, calendarName, successCallback, errorCallback) {
                var options = Calendar.prototype.getCalendarOptions();
                options.calendarName = calendarName;
                Calendar.prototype.modifyEventWithOptions(title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, options, successCallback, errorCallback);
            };

            Calendar.prototype.listEventsInRange = function (startDate, endDate, successCallback, errorCallback) {
                cordova.exec(successCallback, errorCallback, "Calendar", "listEventsInRange", [{
                    "startTime": startDate instanceof Date ? startDate.getTime() : null,
                    "endTime": endDate instanceof Date ? endDate.getTime() : null
                }])
            };

            Calendar.prototype.listCalendars = function (successCallback, errorCallback) {
                cordova.exec(successCallback, errorCallback, "Calendar", "listCalendars", []);
            };

            Calendar.install = function () {
                if (!window.plugins) {
                    window.plugins = {};
                }

                window.plugins.calendar = new Calendar();
                return window.plugins.calendar;
            };

            cordova.addConstructor(Calendar.install);
        });

        //Dialogs plugin: https://github.com/dronahq/cordova-plugin-dialogs
        cordova.define("cordova-plugin-dialogs.notification", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec');
            var platform = require('cordova/platform');

            /**
             * Provides access to notifications on the device.
             */

            module.exports = {
                /**
                 * Open a native alert dialog, with a customizable title and button text.
                 *
                 * @param {String} message              Message to print in the body of the alert
                 * @param {Function} completeCallback   The callback that is called when user clicks on a button.
                 * @param {String} title                Title of the alert dialog (default: Alert)
                 * @param {String} buttonLabel          Label of the close button (default: OK)
                 */
                alert: function (message, completeCallback, title, buttonLabel) {
                    var _message = (typeof message === "string" ? message : JSON.stringify(message));
                    var _title = (typeof title === "string" ? title : "Alert");
                    var _buttonLabel = (buttonLabel || "OK");
                    exec(completeCallback, null, "Notification", "alert", [_message, _title, _buttonLabel]);
                },

                /**
                 * Open a native confirm dialog, with a customizable title and button text.
                 * The result that the user selects is returned to the result callback.
                 *
                 * @param {String} message              Message to print in the body of the alert
                 * @param {Function} resultCallback     The callback that is called when user clicks on a button.
                 * @param {String} title                Title of the alert dialog (default: Confirm)
                 * @param {Array} buttonLabels          Array of the labels of the buttons (default: ['OK', 'Cancel'])
                 */
                confirm: function (message, resultCallback, title, buttonLabels) {
                    var _message = (typeof message === "string" ? message : JSON.stringify(message));
                    var _title = (typeof title === "string" ? title : "Confirm");
                    var _buttonLabels = (buttonLabels || ["OK", "Cancel"]);

                    // Strings are deprecated!
                    if (typeof _buttonLabels === 'string') {
                        console.log("Notification.confirm(string, function, string, string) is deprecated.  Use Notification.confirm(string, function, string, array).");
                    }

                    _buttonLabels = convertButtonLabels(_buttonLabels);

                    exec(resultCallback, null, "Notification", "confirm", [_message, _title, _buttonLabels]);
                },

                /**
                 * Open a native prompt dialog, with a customizable title and button text.
                 * The following results are returned to the result callback:
                 *  buttonIndex     Index number of the button selected.
                 *  input1          The text entered in the prompt dialog box.
                 *
                 * @param {String} message              Dialog message to display (default: "Prompt message")
                 * @param {Function} resultCallback     The callback that is called when user clicks on a button.
                 * @param {String} title                Title of the dialog (default: "Prompt")
                 * @param {Array} buttonLabels          Array of strings for the button labels (default: ["OK","Cancel"])
                 * @param {String} defaultText          Textbox input value (default: empty string)
                 */
                prompt: function (message, resultCallback, title, buttonLabels, defaultText) {
                    var _message = (typeof message === "string" ? message : JSON.stringify(message));
                    var _title = (typeof title === "string" ? title : "Prompt");
                    var _buttonLabels = (buttonLabels || ["OK", "Cancel"]);

                    // Strings are deprecated!
                    if (typeof _buttonLabels === 'string') {
                        console.log("Notification.prompt(string, function, string, string) is deprecated.  Use Notification.confirm(string, function, string, array).");
                    }

                    _buttonLabels = convertButtonLabels(_buttonLabels);

                    var _defaultText = (defaultText || "");
                    exec(resultCallback, null, "Notification", "prompt", [_message, _title, _buttonLabels, _defaultText]);
                },

                /**
                 * Causes the device to beep.
                 * On Android, the default notification ringtone is played "count" times.
                 *
                 * @param {Integer} count       The number of beeps.
                 */
                beep: function (count) {
                    var defaultedCount = count || 1;
                    exec(null, null, "Notification", "beep", [defaultedCount]);
                }
            };

            function convertButtonLabels(buttonLabels) {
                // Some platforms take an array of button label names.
                // Other platforms take a comma separated list.
                // For compatibility, we convert to the desired type based on the platform.
                if (platform.id == "amazon-fireos" || platform.id == "android" || platform.id == "ios" ||
                    platform.id == "windowsphone" || platform.id == "firefoxos" || platform.id == "ubuntu" ||
                    platform.id == "windows8" || platform.id == "windows") {
                    if (typeof buttonLabels === 'string') {
                        buttonLabels = buttonLabels.split(","); // not crazy about changing the var type here
                    }
                } else {
                    if (Array.isArray(buttonLabels)) {
                        var buttonLabelArray = buttonLabels;
                        buttonLabels = buttonLabelArray.toString();
                    }
                }

                return buttonLabels;
            }
        });

        //Barcode scanner: https://github.com/dronahq/phonegap-plugin-barcodescanner
        cordova.define("phonegap-plugin-barcodescanner.BarcodeScanner", function (require, exports, module) {
            /**
             * cordova is available under *either* the terms of the modified BSD license *or* the
             * MIT License (2008). See http://opensource.org/licenses/alphabetical for full text.
             *
             * Copyright (c) Matt Kane 2010
             * Copyright (c) 2011, IBM Corporation
             */

            var exec = cordova.require("cordova/exec");

            var scanInProgress = false;

            /**
             * Constructor.
             *
             * @returns {BarcodeScanner}
             */
            function BarcodeScanner() {
                /**
                 * Encoding constants.
                 *
                 * @type Object
                 */
                this.Encode = {
                    TEXT_TYPE: "TEXT_TYPE",
                    EMAIL_TYPE: "EMAIL_TYPE",
                    PHONE_TYPE: "PHONE_TYPE",
                    SMS_TYPE: "SMS_TYPE"
                    //  CONTACT_TYPE: "CONTACT_TYPE",  // TODO:  not implemented, requires passing a Bundle class from Javascript to Java
                    //  LOCATION_TYPE: "LOCATION_TYPE" // TODO:  not implemented, requires passing a Bundle class from Javascript to Java
                };

                /**
                 * Barcode format constants, defined in ZXing library.
                 *
                 * @type Object
                 */
                this.format = {
                    "all_1D": 61918,
                    "aztec": 1,
                    "codabar": 2,
                    "code_128": 16,
                    "code_39": 4,
                    "code_93": 8,
                    "data_MATRIX": 32,
                    "ean_13": 128,
                    "ean_8": 64,
                    "itf": 256,
                    "maxicode": 512,
                    "msi": 131072,
                    "pdf_417": 1024,
                    "plessey": 262144,
                    "qr_CODE": 2048,
                    "rss_14": 4096,
                    "rss_EXPANDED": 8192,
                    "upc_A": 16384,
                    "upc_E": 32768,
                    "upc_EAN_EXTENSION": 65536
                };
            }

            /**
             * Read code from scanner.
             *
             * @param {Function} successCallback This function will recieve a result object: {
             *        text : '12345-mock',    // The code that was scanned.
             *        format : 'FORMAT_NAME', // Code format.
             *        cancelled : true/false, // Was canceled.
             *    }
             * @param {Function} errorCallback
             * @param config
             */
            BarcodeScanner.prototype.scan = function (successCallback, errorCallback, config) {
                if (config instanceof Array) {
                    // do nothing
                } else {
                    if (typeof (config) === 'object') {
                        config = [config];
                    } else {
                        config = [];
                    }
                }

                if (errorCallback == null) {
                    errorCallback = function () { };
                }

                if (typeof errorCallback != "function") {
                    console.log("BarcodeScanner.scan failure: failure parameter not a function");
                    return;
                }

                if (typeof successCallback != "function") {
                    console.log("BarcodeScanner.scan failure: success callback parameter must be a function");
                    return;
                }

                if (scanInProgress) {
                    errorCallback('Scan is already in progress');
                    return;
                }

                scanInProgress = true;

                exec(
                    function (result) {
                        scanInProgress = false;
                        successCallback(result);
                    },
                    function (error) {
                        scanInProgress = false;
                        errorCallback(error);
                    },
                    'BarcodeScanner',
                    'scan',
                    config
                );
            };

            //-------------------------------------------------------------------
            BarcodeScanner.prototype.encode = function (type, data, successCallback, errorCallback, options) {
                if (errorCallback == null) {
                    errorCallback = function () { };
                }

                if (typeof errorCallback != "function") {
                    console.log("BarcodeScanner.encode failure: failure parameter not a function");
                    return;
                }

                if (typeof successCallback != "function") {
                    console.log("BarcodeScanner.encode failure: success callback parameter must be a function");
                    return;
                }

                exec(successCallback, errorCallback, 'BarcodeScanner', 'encode', [{
                    "type": type,
                    "data": data,
                    "options": options
                }]);
            };

            var barcodeScanner = new BarcodeScanner();
            module.exports = barcodeScanner;
        });

        // Network Info
        cordova.define("cordova-plugin-network-information.Connection", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Network status
             */
            module.exports = {
                UNKNOWN: "unknown",
                ETHERNET: "ethernet",
                WIFI: "wifi",
                CELL_2G: "2g",
                CELL_3G: "3g",
                CELL_4G: "4g",
                CELL: "cellular",
                NONE: "none"
            };
        });

        cordova.define("cordova-plugin-network-information.network", function (require, exports, module) {
            /*
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var exec = require('cordova/exec'),
                cordova = require('cordova'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils');

            // Link the onLine property with the Cordova-supplied network info.
            // This works because we clobber the navigator object with our own
            // object in bootstrap.js.
            // Browser platform do not need to define this property, because
            // it is already supported by modern browsers
            if (cordova.platformId !== 'browser' && typeof navigator != 'undefined') {
                utils.defineGetter(navigator, 'onLine', function () {
                    return this.connection.type != 'none';
                });
            }

            function NetworkConnection() {
                this.type = 'unknown';
            }

            /**
             * Get connection info
             *
             * @param {Function} successCallback The function to call when the Connection data is available
             * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)
             */
            NetworkConnection.prototype.getInfo = function (successCallback, errorCallback) {
                exec(successCallback, errorCallback, "NetworkStatus", "getConnectionInfo", []);
            };

            var me = new NetworkConnection();
            var timerId = null;
            var timeout = 500;

            channel.createSticky('onCordovaConnectionReady');
            channel.waitForInitialization('onCordovaConnectionReady');

            channel.onCordovaReady.subscribe(function () {
                me.getInfo(function (info) {
                    me.type = info;
                    if (info === "none") {
                        // set a timer if still offline at the end of timer send the offline event
                        timerId = setTimeout(function () {
                            cordova.fireDocumentEvent("offline");
                            timerId = null;
                        }, timeout);
                    } else {
                        // If there is a current offline event pending clear it
                        if (timerId !== null) {
                            clearTimeout(timerId);
                            timerId = null;
                        }
                        cordova.fireDocumentEvent("online");
                    }

                    // should only fire this once
                    if (channel.onCordovaConnectionReady.state !== 2) {
                        channel.onCordovaConnectionReady.fire();
                    }
                },
                    function (e) {
                        // If we can't get the network info we should still tell Cordova
                        // to fire the deviceready event.
                        if (channel.onCordovaConnectionReady.state !== 2) {
                            channel.onCordovaConnectionReady.fire();
                        }
                        console.log("Error initializing Network Connection: " + e);
                    });
            });
            module.exports = me;
        });

        // X Social Sharing: https://github.com/dronahq/SocialSharing-PhoneGap-Plugin
        cordova.define("cordova-plugin-x-socialsharing.SocialSharing", function (require, exports, module) {
            function SocialSharing() { }

            // Override this method (after deviceready) to set the location where you want the iPad popup arrow to appear.
            // If not overridden with different values, the popup is not used. Example:
            // 
            //   window.plugins.socialsharing.iPadPopupCoordinates = function() {
            //     return "100,100,200,300";
            //   };
            SocialSharing.prototype.iPadPopupCoordinates = function () {
                // left,top,width,height
                return "-1,-1,-1,-1";
            };

            SocialSharing.prototype.setIPadPopupCoordinates = function (coords) {
                // left,top,width,height
                cordova.exec(function () { }, this._getErrorCallback(function () { }, "setIPadPopupCoordinates"), "SocialSharing", "setIPadPopupCoordinates", [coords]);
            };

            SocialSharing.prototype.available = function (callback) {
                cordova.exec(function (avail) {
                    callback(avail ? true : false);
                }, null, "SocialSharing", "available", []);
            };

            // this is the recommended way to share as it is the most feature-rich with respect to what you pass in and get back
            SocialSharing.prototype.shareWithOptions = function (options, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareWithOptions"), "SocialSharing", "shareWithOptions", [options]);
            };

            SocialSharing.prototype.shareW3C = function (sharedata) {
                return new Promise(function (resolve, reject) {
                    var options = {
                        subject: sharedata.title,
                        message: sharedata.text,
                        url: sharedata.url
                    };
                    if (sharedata.hasOwnProperty('title') ||
                        sharedata.hasOwnProperty('text') ||
                        sharedata.hasOwnProperty('url')) {
                        cordova.exec(resolve, reject, "SocialSharing", "shareWithOptions", [options]);
                    } else {
                        reject();
                    }
                });
            };

            SocialSharing.prototype.share = function (message, subject, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "share"), "SocialSharing", "share", [message, subject, this._asArray(fileOrFileArray), url]);
            };

            SocialSharing.prototype.shareViaTwitter = function (message, file /* multiple not allowed by twitter */, url, successCallback, errorCallback) {
                var fileArray = this._asArray(file);
                var ecb = this._getErrorCallback(errorCallback, "shareViaTwitter");
                if (fileArray.length > 1) {
                    ecb("shareViaTwitter supports max one file");
                } else {
                    cordova.exec(successCallback, ecb, "SocialSharing", "shareViaTwitter", [message, null, fileArray, url]);
                }
            };

            SocialSharing.prototype.shareViaFacebook = function (message, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaFacebook"), "SocialSharing", "shareViaFacebook", [message, null, this._asArray(fileOrFileArray), url]);
            };

            SocialSharing.prototype.shareViaFacebookWithPasteMessageHint = function (message, fileOrFileArray, url, pasteMessageHint, successCallback, errorCallback) {
                pasteMessageHint = pasteMessageHint || "If you like you can paste a message from your clipboard";
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaFacebookWithPasteMessageHint"), "SocialSharing", "shareViaFacebookWithPasteMessageHint", [message, null, this._asArray(fileOrFileArray), url, pasteMessageHint]);
            };

            SocialSharing.prototype.shareViaWhatsApp = function (message, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaWhatsApp"), "SocialSharing", "shareViaWhatsApp", [message, null, this._asArray(fileOrFileArray), url, null, null]);
            };

            SocialSharing.prototype.shareViaWhatsAppToReceiver = function (receiver, message, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaWhatsAppToReceiver"), "SocialSharing", "shareViaWhatsApp", [message, null, this._asArray(fileOrFileArray), url, receiver, null]);
            };

            SocialSharing.prototype.shareViaWhatsAppToPhone = function (phone, message, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaWhatsAppToPhone"), "SocialSharing", "shareViaWhatsApp", [message, null, this._asArray(fileOrFileArray), url, null, phone]);
            };

            SocialSharing.prototype.shareViaSMS = function (options, phonenumbers, successCallback, errorCallback) {
                var opts = options;
                if (typeof options === "string") {
                    opts = {
                        "message": options
                    }; // for backward compatibility as the options param used to be the message
                }
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaSMS"), "SocialSharing", "shareViaSMS", [opts, phonenumbers]);
            };

            SocialSharing.prototype.shareViaEmail = function (message, subject, toArray, ccArray, bccArray, fileOrFileArray, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaEmail"), "SocialSharing", "shareViaEmail", [message, subject, this._asArray(toArray), this._asArray(ccArray), this._asArray(bccArray), this._asArray(fileOrFileArray)]);
            };

            SocialSharing.prototype.canShareVia = function (via, message, subject, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "canShareVia"), "SocialSharing", "canShareVia", [message, subject, this._asArray(fileOrFileArray), url, via]);
            };

            SocialSharing.prototype.canShareViaEmail = function (successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "canShareViaEmail"), "SocialSharing", "canShareViaEmail", []);
            };

            SocialSharing.prototype.shareViaInstagram = function (message, fileOrFileArray, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareViaInstagram"), "SocialSharing", "shareViaInstagram", [message, null, this._asArray(fileOrFileArray), null]);
            };

            SocialSharing.prototype.shareVia = function (via, message, subject, fileOrFileArray, url, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "shareVia"), "SocialSharing", "shareVia", [message, subject, this._asArray(fileOrFileArray), url, via]);
            };

            SocialSharing.prototype.saveToPhotoAlbum = function (fileOrFileArray, successCallback, errorCallback) {
                cordova.exec(successCallback, this._getErrorCallback(errorCallback, "saveToPhotoAlbum"), "SocialSharing", "saveToPhotoAlbum", [this._asArray(fileOrFileArray)]);
            };

            SocialSharing.prototype._asArray = function (param) {
                if (param == null) {
                    param = [];
                } else if (typeof param === 'string') {
                    param = new Array(param);
                }
                return param;
            };

            SocialSharing.prototype._getErrorCallback = function (ecb, functionName) {
                if (typeof ecb === 'function') {
                    return ecb;
                } else {
                    return function (result) {
                        console.log("The injected error callback of '" + functionName + "' received: " + JSON.stringify(result));
                    }
                }
            };

            SocialSharing.install = function () {
                if (!window.plugins) {
                    window.plugins = {};
                }

                window.plugins.socialsharing = new SocialSharing();
                navigator.share = window.plugins.socialsharing.shareW3C;
                return window.plugins.socialsharing;
            };

            cordova.addConstructor(SocialSharing.install);
        });

        // https://github.com/dronahq/mobile-connected-client
        if (DronaHQ.onIos) {
            cordova.define("tableau-plugin-oauth.TableauOAuth", function (require, exports, module) {
                var exec = require('cordova/exec');

                module.exports = {
                    requestOAuthTokens: function (serverUrl, success, error) {
                        exec(success, error, "TableauOAuth", "requestOAuthTokensCordova", [serverUrl]);
                    },
                    checkSignInStatus: function (serverUrl, siteName, success, error) {
                        exec(success, error, "TableauOAuth", "checkSignInStatusCordova", [serverUrl, siteName]);
                    },
                    signOut: function (serverUrl, error) {
                        exec(null, error, "TableauOAuth", "signOutCordova", [serverUrl]);
                    }
                };
            });
        }

        // Call Number: https://github.com/dronahq/CordovaCallNumberPlugin
        cordova.define("call-number.CallNumber", function (require, exports, module) {
            var CallNumber = function () { };

            CallNumber.prototype.callNumber = function (success, failure, number, bypassAppChooser) {
                cordova.exec(success, failure, "CallNumber", "callNumber", [number, bypassAppChooser]);
            };

            //Plug in to Cordova
            cordova.addConstructor(function () {
                if (!window.Cordova) {
                    window.Cordova = cordova;
                };

                if (!window.plugins) window.plugins = {};
                window.plugins.CallNumber = new CallNumber();
            });
        });

        // Location Accuracy: https://github.com/dronahq/cordova-plugin-request-location-accuracy
        if (DronaHQ.onAndroid) {
            cordova.define("cordova-plugin-request-location-accuracy.RequestLocationAccuracy", function (require, exports, module) {
                /**
                 *  Request Location Accuracy plugin
                 *
                 *  Copyright (c) 2016 Dave Alden (Working Edge Ltd.)
                 **/
                var RequestLocationAccuracy = function () {
                    this.requesting = false;
                };

                /**
                 * Request location mode priority "no power": the best accuracy possible with zero additional power consumption.
                 * https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_NO_POWER
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.REQUEST_PRIORITY_NO_POWER = 0;

                /**
                 * Request location mode priority "low power":  "city" level accuracy (about 10km accuracy)
                 * https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_LOW_POWER
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.REQUEST_PRIORITY_LOW_POWER = 1;

                /**
                 * Request location mode priority "balanced power":  "block" level accuracy (about 100 meter accuracy)
                 * https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_BALANCED_POWER_ACCURACY
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.REQUEST_PRIORITY_BALANCED_POWER_ACCURACY = 2;

                /**
                 * Request location mode priority "high accuracy":  the most accurate locations available. This will use GPS hardware to retrieve positions.
                 * https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_HIGH_ACCURACY
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.REQUEST_PRIORITY_HIGH_ACCURACY = 3;

                /**
                 * Success due to current location settings already satisfying requested accuracy
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.SUCCESS_SETTINGS_SATISFIED = 0;

                /**
                 * Success due to user agreeing to requested accuracy change
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.SUCCESS_USER_AGREED = 1;

                /**
                 * Error due an unresolved request already being in progress.
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_ALREADY_REQUESTING = -1;

                /**
                 * Error due invalid action requested
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_INVALID_ACTION = 0;

                /**
                 * Error due invalid accuracy requested
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_INVALID_ACCURACY = 1;

                /**
                 * Error due to exception in the native code
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_EXCEPTION = 2;

                /**
                 * Error due to not being able to change location accuracy to requested state
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_CANNOT_CHANGE_ACCURACY = 3;

                /**
                 * Error due to user rejecting requested accuracy change
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_USER_DISAGREED = 4;

                /**
                 * Error due to failure to connect to Google Play Services API
                 * @type {number}
                 */
                RequestLocationAccuracy.prototype.ERROR_GOOGLE_API_CONNECTION_FAILED = 5;

                /**
                 * Requests a specific accuracy for Location Services.
                 *
                 * @param [Function} successCallback - callback to be invoked on successful resolution of the requested accuracy.
                 * A single object argument will be passed which has two keys: "code" in an integer corresponding to a SUCCESS constant and indicates the reason for success;
                 * "message" is a string containing a description of the success.
                 * @param {Function} errorCallback - callback to be invoked on failure to resolve the requested accuracy.
                 * A single object argument will be passed which has two keys: "code" in an integer corresponding to an ERROR constant and indicates the reason for failure;
                 * "message" is a string containing a description of the error.
                 * @param {Integer} accuracy - The location accuracy to request defined by an integer corresponding to a REQUEST constant.
                 */
                RequestLocationAccuracy.prototype.request = function (successCallback, errorCallback, accuracy) {
                    var _this = this;

                    if (this.requesting) {
                        return errorCallback({
                            code: _this.ERROR_ALREADY_REQUESTING,
                            message: "A request is already in progress"
                        });
                    }

                    this.requesting = true;

                    return cordova.exec(function (data) {
                        _this.requesting = false;
                        successCallback(data)
                    },
                        function (err) {
                            _this.requesting = false;
                            errorCallback(err);
                        },
                        'RequestLocationAccuracy',
                        'request', [accuracy]);
                };

                /**
                 * Indicates if a request is currently in progress.
                 *
                 * @param [Function} successCallback - callback to pass result to.
                 * This is passed a boolean argument indicating if a request is currently in progress;
                 */
                RequestLocationAccuracy.prototype.isRequesting = function (successCallback) {
                    successCallback(!!this.requesting);
                };

                /**
                 * Indicates if it is possible to request a specific location accuracy.
                 * This will return true if the app is authorized to use location.
                 *
                 * @param [Function} successCallback - callback to pass result to.
                 * This is passed a boolean argument indicating if a request can be made.
                 */
                RequestLocationAccuracy.prototype.canRequest = function (successCallback) {
                    return cordova.exec(successCallback, null, 'RequestLocationAccuracy', 'canRequest', []);
                };

                module.exports = new RequestLocationAccuracy();
            });
        } else if (DronaHQ.onIos) {
            cordova.define("cordova-plugin-request-location-accuracy.RequestLocationAccuracy", function (require, exports, module) {
                /**
                 *  Request Location Accuracy plugin
                 *
                 *  Copyright (c) 2016 Dave Alden (Working Edge Ltd.)
                 **/
                var RequestLocationAccuracy = function () { };

                /**
                 * Requests a position to invoke to native dialog to turn on Location Services.
                 *
                 * @param [Function} successCallback - callback to be invoked on successful position request.
                 * @param {Function} errorCallback - callback to be invoked on failure to request position.
                 */
                RequestLocationAccuracy.prototype.request = function (successCallback, errorCallback) {
                    return cordova.exec(successCallback, errorCallback, 'RequestLocationAccuracy', 'request', []);
                };

                /**
                 * Indicates if a request is possible to invoke to native dialog to turn on Location Services.
                 * This will return true if Location Services is currently OFF and request is not currently in progress.
                 *
                 * @param [Function} successCallback - callback to pass result to.
                 * This is passed a boolean argument indicating if a request can be made.
                 */
                RequestLocationAccuracy.prototype.canRequest = function (successCallback) {
                    return cordova.exec(successCallback, null, 'RequestLocationAccuracy', 'canRequest', []);
                };

                /**
                 * Indicates if a request is currently in progress.
                 *
                 * @param [Function} successCallback - callback to pass result to.
                 * This is passed a boolean argument indicating if a request is currently in progress;
                 */
                RequestLocationAccuracy.prototype.isRequesting = function (successCallback) {
                    return cordova.exec(successCallback, null, 'RequestLocationAccuracy', 'isRequesting', []);
                };

                module.exports = new RequestLocationAccuracy();
            });
        }

        // Device Orientation: https://github.com/dronahq/cordova-plugin-device-orientation
        cordova.define("cordova-plugin-device-orientation.compass", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                utils = require('cordova/utils'),
                CompassHeading = require('./CompassHeading'),
                CompassError = require('./CompassError'),

                timers = {},
                eventTimerId = null,
                compass = {
                    /**
                     * Asynchronously acquires the current heading.
                     * @param {Function} successCallback The function to call when the heading
                     * data is available
                     * @param {Function} errorCallback The function to call when there is an error
                     * getting the heading data.
                     * @param {CompassOptions} options The options for getting the heading data (not used).
                     */
                    getCurrentHeading: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'compass.getCurrentHeading', arguments);

                        var win = function (result) {
                            var ch = new CompassHeading(result.magneticHeading, result.trueHeading, result.headingAccuracy, result.timestamp);
                            successCallback(ch);
                        };
                        var fail = errorCallback && function (code) {
                            var ce = new CompassError(code);
                            errorCallback(ce);
                        };

                        // Get heading
                        exec(win, fail, "Compass", "getHeading", [options]);
                    },

                    /**
                     * Asynchronously acquires the heading repeatedly at a given interval.
                     * @param {Function} successCallback The function to call each time the heading
                     * data is available
                     * @param {Function} errorCallback The function to call when there is an error
                     * getting the heading data.
                     * @param {HeadingOptions} options The options for getting the heading data
                     * such as timeout and the frequency of the watch. For iOS, filter parameter
                     * specifies to watch via a distance filter rather than time.
                     */
                    watchHeading: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'compass.watchHeading', arguments);
                        // Default interval (100 msec)
                        var frequency = (options !== undefined && options.frequency !== undefined) ? options.frequency : 100;
                        var filter = (options !== undefined && options.filter !== undefined) ? options.filter : 0;

                        var id = utils.createUUID();
                        if (filter > 0) {
                            // is an iOS request for watch by filter, no timer needed
                            timers[id] = "iOS";
                            compass.getCurrentHeading(successCallback, errorCallback, options);
                        } else {
                            // Start watch timer to get headings
                            timers[id] = window.setInterval(function () {
                                compass.getCurrentHeading(successCallback, errorCallback);
                            }, frequency);
                        }

                        if (cordova.platformId === 'browser' && !eventTimerId) {
                            // Start firing deviceorientation events if haven't already
                            var deviceorientationEvent = new Event('deviceorientation');
                            eventTimerId = window.setInterval(function () {
                                window.dispatchEvent(deviceorientationEvent);
                            }, 200);
                        }

                        return id;
                    },

                    /**
                     * Clears the specified heading watch.
                     * @param {String} id The ID of the watch returned from #watchHeading.
                     */
                    clearWatch: function (id) {
                        // Stop javascript timer & remove from timer list
                        if (id && timers[id]) {
                            if (timers[id] != "iOS") {
                                clearInterval(timers[id]);
                            } else {
                                // is iOS watch by filter so call into device to stop
                                exec(null, null, "Compass", "stopHeading", []);
                            }
                            delete timers[id];

                            if (eventTimerId && Object.keys(timers).length === 0) {
                                // No more watchers, so stop firing 'deviceorientation' events
                                window.clearInterval(eventTimerId);
                                eventTimerId = null;
                            }
                        }
                    }
                };

            module.exports = compass;
        });
        cordova.define("cordova-plugin-device-orientation.CompassError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             *  CompassError.
             *  An error code assigned by an implementation when an error has occurred
             * @constructor
             */
            var CompassError = function (err) {
                this.code = (err !== undefined ? err : null);
            };

            CompassError.COMPASS_INTERNAL_ERR = 0;
            CompassError.COMPASS_NOT_SUPPORTED = 20;

            module.exports = CompassError;
        });
        cordova.define("cordova-plugin-device-orientation.CompassHeading", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var CompassHeading = function (magneticHeading, trueHeading, headingAccuracy, timestamp) {
                this.magneticHeading = magneticHeading;
                this.trueHeading = trueHeading;
                this.headingAccuracy = headingAccuracy;
                this.timestamp = timestamp || new Date().getTime();
            };

            module.exports = CompassHeading;
        });

        // Cordova Email Plugin@v0.8.2: https://github.com/dronahq/cordova-plugin-email-composer/tree/0.8.2
        cordova.define("cordova-plugin-email-composer.EmailComposer", function (require, exports, module) {
            /*
                Copyright 2013-2016 appPlant UG

                Licensed to the Apache Software Foundation (ASF) under one
                or more contributor license agreements.  See the NOTICE file
                distributed with this work for additional information
                regarding copyright ownership.  The ASF licenses this file
                to you under the Apache License, Version 2.0 (the
                "License"); you may not use this file except in compliance
                with the License.  You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

                Unless required by applicable law or agreed to in writing,
                software distributed under the License is distributed on an
                "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                KIND, either express or implied.  See the License for the
                specific language governing permissions and limitations
                under the License.
            */

            var exec = require('cordova/exec');

            /**
             * List of all registered mail app aliases.
             */
            exports.aliases = {
                gmail: 'com.google.android.gm'
            };

            /**
             * List of all available options with their default value.
             *
             * @return {Object}
             */
            exports.getDefaults = function () {
                return {
                    app: undefined,
                    subject: '',
                    body: '',
                    to: [],
                    cc: [],
                    bcc: [],
                    attachments: [],
                    isHtml: true
                };
            };

            /**
             * Verifies if sending emails is supported on the device.
             *
             * @param {Function} callback
             *      A callback function to be called with the result
             * @param {Object} scope
             *      The scope of the callback
             */
            exports.isAvailable = function (callback, scope) {
                var fn = this.createCallbackFn(callback, scope);

                exec(fn, null, 'EmailComposer', 'isAvailable', []);
            };

            /**
             * Displays the email composer pre-filled with data.
             *
             * @param {Object} options
             *      Different properties of the email like the body, subject
             * @param {Function} callback
             *      A callback function to be called with the result
             * @param {Object?} scope
             *      The scope of the callback
             */
            exports.open = function (options, callback, scope) {
                var fn = this.createCallbackFn(callback, scope);

                options = this.mergeWithDefaults(options || {});

                exec(fn, null, 'EmailComposer', 'open', [options]);
            };

            /**
             * Adds a new mail app alias.
             *
             * @param {String} alias
             *      The alias name
             * @param {String} package
             *      The package name
             */
            exports.addAlias = function (alias, package) {
                this.aliases[alias] = package;
            }

            /**
             * @depreacted
             */
            exports.isServiceAvailable = function () {
                console.log('`email.isServiceAvailable` is deprecated.' +
                    ' Please use `email.isAvailable` instead.');

                this.isAvailable.apply(this, arguments);
            };

            /**
             * Alias für `open()`.
             */
            exports.openDraft = function () {
                this.open.apply(this, arguments);
            };

            /**
             * @private
             *
             * Merge settings with default values.
             *
             * @param {Object} options
             *      The custom options
             *
             * @retrun {Object}
             *      Default values merged
             *      with custom values
             */
            exports.mergeWithDefaults = function (options) {
                var defaults = this.getDefaults();

                if (options.hasOwnProperty('isHTML')) {
                    options.isHtml = options.isHTML;
                }

                if (options.hasOwnProperty('app')) {
                    var package = this.aliases[options.app];

                    options.app = package || options.app;
                }

                for (var key in defaults) {
                    if (!options.hasOwnProperty(key)) {
                        options[key] = defaults[key];
                        continue;
                    }

                    var custom_ = options[key],
                        default_ = defaults[key];

                    if (custom_ === null || custom_ === undefined) {
                        options[key] = default_;
                        continue;
                    }

                    if (typeof default_ != typeof custom_) {
                        if (typeof default_ == 'string') {
                            options[key] = custom_.join('');
                        } else if (typeof default_ == 'object') {
                            options[key] = [custom_.toString()];
                        }
                    }
                }

                return options;
            };

            /**
             * @private
             *
             * Creates a callback, which will be executed
             * within a specific scope.
             *
             * @param {Function} callbackFn
             *      The callback function
             * @param {Object} scope
             *      The scope for the function
             *
             * @return {Function}
             *      The new callback function
             */
            exports.createCallbackFn = function (callbackFn, scope) {
                if (typeof callbackFn != 'function')
                    return;

                return function () {
                    callbackFn.apply(scope || this, arguments);
                };
            };
        });

        // SSL Certificate Checker: https://github.com/dronahq/SSLCertificateChecker-PhoneGap-Plugin
        cordova.define("cordova-plugin-sslcertificatechecker.SSLCertificateChecker", function (require, exports, module) {
            "use strict";
            var exec = require('cordova/exec');

            function SSLCertificateChecker() { }

            SSLCertificateChecker.prototype.check = function (successCallback, errorCallback, serverURL, allowedSHA1FingerprintOrArray, allowedSHA1FingerprintAlt) {
                if (typeof errorCallback != "function") {
                    console.log("SSLCertificateChecker.find failure: errorCallback parameter must be a function");
                    return
                }

                if (typeof successCallback != "function") {
                    console.log("SSLCertificateChecker.find failure: successCallback parameter must be a function");
                    return
                }

                // if an array is not passed, transform the input into one
                var fpArr = [];
                if (allowedSHA1FingerprintOrArray !== undefined) {
                    if (typeof allowedSHA1FingerprintOrArray == "string") {
                        fpArr.push(allowedSHA1FingerprintOrArray);
                    } else {
                        fpArr = allowedSHA1FingerprintOrArray.slice(0);
                    }
                }
                if (allowedSHA1FingerprintAlt !== undefined) {
                    fpArr.push(allowedSHA1FingerprintAlt);
                }
                exec(successCallback, errorCallback, "SSLCertificateChecker", "check", [serverURL, false, fpArr]);
            };

            var sslCertificateChecker = new SSLCertificateChecker();
            module.exports = sslCertificateChecker;
        });

        // Contacts: https://github.com/dronahq/cordova-plugin-contacts
        cordova.define("cordova-plugin-contacts.Contact", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                ContactError = require('./ContactError'),
                utils = require('cordova/utils'),
                convertUtils = require('./convertUtils');

            /**
             * Contains information about a single contact.
             * @constructor
             * @param {DOMString} id unique identifier
             * @param {DOMString} displayName
             * @param {ContactName} name
             * @param {DOMString} nickname
             * @param {Array.<ContactField>} phoneNumbers array of phone numbers
             * @param {Array.<ContactField>} emails array of email addresses
             * @param {Array.<ContactAddress>} addresses array of addresses
             * @param {Array.<ContactField>} ims instant messaging user ids
             * @param {Array.<ContactOrganization>} organizations
             * @param {DOMString} birthday contact's birthday
             * @param {DOMString} note user notes about contact
             * @param {Array.<ContactField>} photos
             * @param {Array.<ContactField>} categories
             * @param {Array.<ContactField>} urls contact's web sites
             */
            var Contact = function (id, displayName, name, nickname, phoneNumbers, emails, addresses,
                ims, organizations, birthday, note, photos, categories, urls) {
                this.id = id || null;
                this.rawId = null;
                this.displayName = displayName || null;
                this.name = name || null; // ContactName
                this.nickname = nickname || null;
                this.phoneNumbers = phoneNumbers || null; // ContactField[]
                this.emails = emails || null; // ContactField[]
                this.addresses = addresses || null; // ContactAddress[]
                this.ims = ims || null; // ContactField[]
                this.organizations = organizations || null; // ContactOrganization[]
                this.birthday = birthday || null;
                this.note = note || null;
                this.photos = photos || null; // ContactField[]
                this.categories = categories || null; // ContactField[]
                this.urls = urls || null; // ContactField[]
            };

            /**
             * Removes contact from device storage.
             * @param successCB success callback
             * @param errorCB error callback
             */
            Contact.prototype.remove = function (successCB, errorCB) {
                argscheck.checkArgs('FF', 'Contact.remove', arguments);
                var fail = errorCB && function (code) {
                    errorCB(new ContactError(code));
                };
                if (this.id === null) {
                    fail(ContactError.UNKNOWN_ERROR);
                } else {
                    exec(successCB, fail, "Contacts", "remove", [this.id]);
                }
            };

            /**
             * Creates a deep copy of this Contact.
             * With the contact ID set to null.
             * @return copy of this Contact
             */
            Contact.prototype.clone = function () {
                var clonedContact = utils.clone(this);
                clonedContact.id = null;
                clonedContact.rawId = null;

                function nullIds(arr) {
                    if (arr) {
                        for (var i = 0; i < arr.length; ++i) {
                            arr[i].id = null;
                        }
                    }
                }

                // Loop through and clear out any id's in phones, emails, etc.
                nullIds(clonedContact.phoneNumbers);
                nullIds(clonedContact.emails);
                nullIds(clonedContact.addresses);
                nullIds(clonedContact.ims);
                nullIds(clonedContact.organizations);
                nullIds(clonedContact.categories);
                nullIds(clonedContact.photos);
                nullIds(clonedContact.urls);
                return clonedContact;
            };

            /**
             * Persists contact to device storage.
             * @param successCB success callback
             * @param errorCB error callback
             */
            Contact.prototype.save = function (successCB, errorCB) {
                argscheck.checkArgs('FFO', 'Contact.save', arguments);
                var fail = errorCB && function (code) {
                    errorCB(new ContactError(code));
                };
                var success = function (result) {
                    if (result) {
                        if (successCB) {
                            var fullContact = require('./contacts').create(result);
                            successCB(convertUtils.toCordovaFormat(fullContact));
                        }
                    } else {
                        // no Entry object returned
                        fail(ContactError.UNKNOWN_ERROR);
                    }
                };
                var dupContact = convertUtils.toNativeFormat(utils.clone(this));
                exec(success, fail, "Contacts", "save", [dupContact]);
            };

            module.exports = Contact;
        });
        cordova.define("cordova-plugin-contacts.ContactAddress", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Contact address.
             * @constructor
             * @param {DOMString} id unique identifier, should only be set by native code
             * @param formatted // NOTE: not a W3C standard
             * @param streetAddress
             * @param locality
             * @param region
             * @param postalCode
             * @param country
             */

            var ContactAddress = function (pref, type, formatted, streetAddress, locality, region, postalCode, country) {
                this.id = null;
                this.pref = (typeof pref != 'undefined' ? pref : false);
                this.type = type || null;
                this.formatted = formatted || null;
                this.streetAddress = streetAddress || null;
                this.locality = locality || null;
                this.region = region || null;
                this.postalCode = postalCode || null;
                this.country = country || null;
            };

            module.exports = ContactAddress;
        });
        cordova.define("cordova-plugin-contacts.ContactError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             *  ContactError.
             *  An error code assigned by an implementation when an error has occurred
             * @constructor
             */
            var ContactError = function (err) {
                this.code = (typeof err != 'undefined' ? err : null);
            };

            /**
             * Error codes
             */
            ContactError.UNKNOWN_ERROR = 0;
            ContactError.INVALID_ARGUMENT_ERROR = 1;
            ContactError.TIMEOUT_ERROR = 2;
            ContactError.PENDING_OPERATION_ERROR = 3;
            ContactError.IO_ERROR = 4;
            ContactError.NOT_SUPPORTED_ERROR = 5;
            ContactError.OPERATION_CANCELLED_ERROR = 6;
            ContactError.PERMISSION_DENIED_ERROR = 20;

            module.exports = ContactError;
        });
        cordova.define("cordova-plugin-contacts.ContactField", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Generic contact field.
             * @constructor
             * @param {DOMString} id unique identifier, should only be set by native code // NOTE: not a W3C standard
             * @param type
             * @param value
             * @param pref
             */
            var ContactField = function (type, value, pref) {
                this.id = null;
                this.type = (type && type.toString()) || null;
                this.value = (value && value.toString()) || null;
                this.pref = (typeof pref != 'undefined' ? pref : false);
            };

            module.exports = ContactField;
        });
        cordova.define("cordova-plugin-contacts.ContactFieldType", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            // Possible field names for various platforms.
            // Some field names are platform specific

            var fieldType = {
                addresses: "addresses",
                birthday: "birthday",
                categories: "categories",
                country: "country",
                department: "department",
                displayName: "displayName",
                emails: "emails",
                familyName: "familyName",
                formatted: "formatted",
                givenName: "givenName",
                honorificPrefix: "honorificPrefix",
                honorificSuffix: "honorificSuffix",
                id: "id",
                ims: "ims",
                locality: "locality",
                middleName: "middleName",
                name: "name",
                nickname: "nickname",
                note: "note",
                organizations: "organizations",
                phoneNumbers: "phoneNumbers",
                photos: "photos",
                postalCode: "postalCode",
                region: "region",
                streetAddress: "streetAddress",
                title: "title",
                urls: "urls"
            };

            module.exports = fieldType;
        });
        cordova.define("cordova-plugin-contacts.ContactFindOptions", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * ContactFindOptions.
             * @constructor
             * @param filter used to match contacts against
             * @param multiple boolean used to determine if more than one contact should be returned
             * @param desiredFields
             * @param hasPhoneNumber boolean used to filter the search and only return contacts that have a phone number informed
             */

            var ContactFindOptions = function (filter, multiple, desiredFields, hasPhoneNumber) {
                this.filter = filter || '';
                this.multiple = (typeof multiple != 'undefined' ? multiple : false);
                this.desiredFields = typeof desiredFields != 'undefined' ? desiredFields : [];
                this.hasPhoneNumber = typeof hasPhoneNumber != 'undefined' ? hasPhoneNumber : false;
            };

            module.exports = ContactFindOptions;
        });
        cordova.define("cordova-plugin-contacts.ContactName", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Contact name.
             * @constructor
             * @param formatted // NOTE: not part of W3C standard
             * @param familyName
             * @param givenName
             * @param middle
             * @param prefix
             * @param suffix
             */
            var ContactName = function (formatted, familyName, givenName, middle, prefix, suffix) {
                this.formatted = formatted || null;
                this.familyName = familyName || null;
                this.givenName = givenName || null;
                this.middleName = middle || null;
                this.honorificPrefix = prefix || null;
                this.honorificSuffix = suffix || null;
            };

            module.exports = ContactName;
        });
        cordova.define("cordova-plugin-contacts.ContactOrganization", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Contact organization.
             * @constructor
             * @param pref
             * @param type
             * @param name
             * @param dept
             * @param title
             */

            var ContactOrganization = function (pref, type, name, dept, title) {
                this.id = null;
                this.pref = (typeof pref != 'undefined' ? pref : false);
                this.type = type || null;
                this.name = name || null;
                this.department = dept || null;
                this.title = title || null;
            };

            module.exports = ContactOrganization;
        });
        cordova.define("cordova-plugin-contacts.contacts", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec'),
                ContactError = require('./ContactError'),
                Contact = require('./Contact'),
                fieldType = require('./ContactFieldType'),
                convertUtils = require('./convertUtils');

            /**
             * Represents a group of Contacts.
             * @constructor
             */
            var contacts = {
                fieldType: fieldType,
                /**
                 * Returns an array of Contacts matching the search criteria.
                 * @param fields that should be searched
                 * @param successCB success callback
                 * @param errorCB error callback
                 * @param {ContactFindOptions} options that can be applied to contact searching
                 * @return array of Contacts matching search criteria
                 */
                find: function (fields, successCB, errorCB, options) {
                    argscheck.checkArgs('afFO', 'contacts.find', arguments);
                    if (!fields.length) {
                        if (errorCB) {
                            errorCB(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
                        }
                    } else {
                        // missing 'options' param means return all contacts
                        options = options || {
                            filter: '',
                            multiple: true
                        };
                        var win = function (result) {
                            var cs = [];
                            for (var i = 0, l = result.length; i < l; i++) {
                                cs.push(convertUtils.toCordovaFormat(contacts.create(result[i])));
                            }
                            successCB(cs);
                        };
                        exec(win, errorCB, "Contacts", "search", [fields, options]);
                    }
                },

                /**
                 * This function picks contact from phone using contact picker UI
                 * @returns new Contact object
                 */
                pickContact: function (successCB, errorCB) {
                    argscheck.checkArgs('fF', 'contacts.pick', arguments);

                    var win = function (result) {
                        // if Contacts.pickContact return instance of Contact object
                        // don't create new Contact object, use current
                        var contact = result instanceof Contact ? result : contacts.create(result);
                        successCB(convertUtils.toCordovaFormat(contact));
                    };
                    exec(win, errorCB, "Contacts", "pickContact", []);
                },

                /**
                 * This function creates a new contact, but it does not persist the contact
                 * to device storage. To persist the contact to device storage, invoke
                 * contact.save().
                 * @param properties an object whose properties will be examined to create a new Contact
                 * @returns new Contact object
                 */
                create: function (properties) {
                    argscheck.checkArgs('O', 'contacts.create', arguments);
                    var contact = new Contact();
                    for (var i in properties) {
                        if (typeof contact[i] !== 'undefined' && properties.hasOwnProperty(i)) {
                            contact[i] = properties[i];
                        }
                    }
                    return contact;
                }
            };

            module.exports = contacts;
        });
        cordova.define("cordova-plugin-contacts.convertUtils", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var utils = require('cordova/utils');

            module.exports = {
                /**
                 * Converts primitives into Complex Object
                 * Currently only used for Date fields
                 */
                toCordovaFormat: function (contact) {
                    var value = contact.birthday;
                    if (value !== null) {
                        try {
                            contact.birthday = new Date(parseFloat(value));

                            //we might get 'Invalid Date' which does not throw an error
                            //and is an instance of Date.
                            if (isNaN(contact.birthday.getTime())) {
                                contact.birthday = null;
                            }
                        } catch (exception) {
                            console.log("Cordova Contact toCordovaFormat error: exception creating date.");
                        }
                    }
                    return contact;
                },

                /**
                 * Converts Complex objects into primitives
                 * Only conversion at present is for Dates.
                 **/
                toNativeFormat: function (contact) {
                    var value = contact.birthday;
                    if (value !== null) {
                        // try to make it a Date object if it is not already
                        if (!utils.isDate(value)) {
                            try {
                                value = new Date(value);
                            } catch (exception) {
                                value = null;
                            }
                        }
                        if (utils.isDate(value)) {
                            value = value.valueOf(); // convert to milliseconds
                        }
                        contact.birthday = value;
                    }
                    return contact;
                }
            };
        });
        if (DronaHQ.onIos) {
            cordova.define("cordova-plugin-contacts.Contact-iOS", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                var exec = require('cordova/exec'),
                    ContactError = require('./ContactError');

                /**
                 * Provides iOS Contact.display API.
                 */
                module.exports = {
                    display: function (errorCB, options) {
                        /*
                         *    Display a contact using the iOS Contact Picker UI
                         *    NOT part of W3C spec so no official documentation
                         *
                         *    @param errorCB error callback
                         *    @param options object
                         *    allowsEditing: boolean AS STRING
                         *        "true" to allow editing the contact
                         *        "false" (default) display contact
                         */

                        if (this.id === null) {
                            if (typeof errorCB === "function") {
                                var errorObj = new ContactError(ContactError.UNKNOWN_ERROR);
                                errorCB(errorObj);
                            }
                        } else {
                            exec(null, errorCB, "Contacts", "displayContact", [this.id, options]);
                        }
                    }
                };
            });
            cordova.define("cordova-plugin-contacts.contacts-ios", function (require, exports, module) {
                /*
                 *
                 * Licensed to the Apache Software Foundation (ASF) under one
                 * or more contributor license agreements.  See the NOTICE file
                 * distributed with this work for additional information
                 * regarding copyright ownership.  The ASF licenses this file
                 * to you under the Apache License, Version 2.0 (the
                 * "License"); you may not use this file except in compliance
                 * with the License.  You may obtain a copy of the License at
                 *
                 *   http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing,
                 * software distributed under the License is distributed on an
                 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                 * KIND, either express or implied.  See the License for the
                 * specific language governing permissions and limitations
                 * under the License.
                 *
                 */

                var exec = require('cordova/exec');

                /**
                 * Provides iOS enhanced contacts API.
                 */
                module.exports = {
                    newContactUI: function (successCallback) {
                        /*
                         *    Create a contact using the iOS Contact Picker UI
                         *    NOT part of W3C spec so no official documentation
                         *
                         * returns:  the id of the created contact as param to successCallback
                         */
                        exec(successCallback, null, "Contacts", "newContact", []);
                    },
                    chooseContact: function (successCallback, options) {
                        /*
                         *    Select a contact using the iOS Contact Picker UI
                         *    NOT part of W3C spec so no official documentation
                         *
                         *    @param errorCB error callback
                         *    @param options object
                         *    allowsEditing: boolean AS STRING
                         *        "true" to allow editing the contact
                         *        "false" (default) display contact
                         *      fields: array of fields to return in contact object (see ContactOptions.fields)
                         *
                         *    @returns
                         *        id of contact selected
                         *        ContactObject
                         *            if no fields provided contact contains just id information
                         *            if fields provided contact object contains information for the specified fields
                         *
                         */
                        var win = function (result) {
                            var fullContact = require('./contacts').create(result);
                            successCallback(fullContact.id, fullContact);
                        };
                        exec(win, null, "Contacts", "chooseContact", [options]);
                    }
                };
            });
        }

        // Cordova SMS Plugin: https://github.com/dronahq/cordova-sms-plugin
        cordova.define("cordova-sms-plugin.Sms", function (require, exports, module) {
            'use strict';

            var exec = require('cordova/exec');

            var sms = {};

            function convertPhoneToArray(phone) {
                if (typeof phone === 'string' && phone.indexOf(',') !== -1) {
                    phone = phone.split(',');
                }
                if (Object.prototype.toString.call(phone) !== '[object Array]') {
                    phone = [phone];
                }
                return phone;
            }

            sms.send = function (phone, message, options, success, failure) {
                // parsing phone numbers
                phone = convertPhoneToArray(phone);

                // parsing options
                var replaceLineBreaks = false;
                var androidIntent = '';
                if (typeof options === 'string') { // ensuring backward compatibility
                    window.console.warn('[DEPRECATED] Passing a string as a third argument is deprecated. Please refer to the documentation to pass the right parameter: https://github.com/cordova-sms/cordova-sms-plugin.');
                    androidIntent = options;
                } else if (typeof options === 'object') {
                    replaceLineBreaks = options.replaceLineBreaks || false;
                    if (options.android && typeof options.android === 'object') {
                        androidIntent = options.android.intent;
                    }
                }

                // fire
                exec(
                    success,
                    failure,
                    'Sms',
                    'send', [phone, message, androidIntent, replaceLineBreaks]
                );
            };

            sms.hasPermission = function (success, failure) {
                // fire
                exec(
                    success,
                    failure,
                    'Sms',
                    'has_permission', []
                );
            };

            module.exports = sms;
        });

        // ADAL plugin: https://github.com/AzureAD/azure-activedirectory-library-for-cordova
        cordova.define("cordova-plugin-ms-adal.AuthenticationContext", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var checkArgs = require('cordova/argscheck').checkArgs;

            var bridge = require('./CordovaBridge');
            var Deferred = require('./utility').Utility.Deferred;
            var AuthenticationResult = require('./AuthenticationResult');
            var TokenCache = require('./TokenCache');

            /**
             * Constructs context to use with known authority to get the token. It reuses existing context
             * for this authority URL in native proxy or creates a new one if it doesn't exists.
             * Corresponding native context will be created at first time when it will be needed.
             *
             * @param   {String}  authority         Authority url to send code and token requests
             * @param   {Boolean} validateAuthority Validate authority before sending token request
             *                                      When context is being created syncronously using this constructor
             *                                      validateAuthority in native context will be disabled to prevent
             *                                      context initialization failure
             *
             * @returns {Object}  Newly created authentication context.
             */
            function AuthenticationContext(authority, validateAuthority) {
                checkArgs('s*', 'AuthenticationContext', arguments);

                if (validateAuthority !== false) {
                    validateAuthority = true;
                }

                this.authority = authority;
                this.validateAuthority = validateAuthority;
                this.tokenCache = new TokenCache(this);
            }

            /**
             * Constructs context asynchronously to use with known authority to get the token.
             * It reuses existing context for this authority URL in native proxy or creates a new one if it doesn't exists.
             *
             * @param   {String}   authority         Authority url to send code and token requests
             * @param   {Boolean}  validateAuthority Validate authority before sending token request. True by default
             *
             * @returns {Promise}  Promise either fulfilled with newly created authentication context or rejected with error
             */
            AuthenticationContext.createAsync = function (authority, validateAuthority) {
                checkArgs('s*', 'AuthenticationContext.createAsync', arguments);

                var d = new Deferred();

                if (validateAuthority !== false) {
                    validateAuthority = true;
                }

                bridge.executeNativeMethod('createAsync', [authority, validateAuthority]).then(function () {
                    d.resolve(new AuthenticationContext(authority, validateAuthority));
                }, function (err) {
                    d.reject(err);
                });

                return d;
            };

            /**
             * Acquires token using interactive flow. It always shows UI and skips token from cache.
             *
             * @param   {String}  resourceUrl Resource identifier
             * @param   {String}  clientId    Client (application) identifier
             * @param   {String}  redirectUrl Redirect url for this application
             * @param   {String}  userId      User identifier (optional)
             * @param   {String}  extraQueryParameters
             *                                Extra query parameters (optional)
             *                                Parameters should be escaped before passing to this method (e.g. using 'encodeURI()')
             *
             * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error
             */
            AuthenticationContext.prototype.acquireTokenAsync = function (resourceUrl, clientId, redirectUrl, userId, extraQueryParameters) {
                checkArgs('sssSS', 'AuthenticationContext.acquireTokenAsync', arguments);

                var d = new Deferred();

                bridge.executeNativeMethod('acquireTokenAsync', [this.authority, this.validateAuthority, resourceUrl, clientId, redirectUrl,
                    userId, extraQueryParameters
                ])
                    .then(function (authResult) {
                        d.resolve(new AuthenticationResult(authResult));
                    }, function (err) {
                        d.reject(err);
                    });

                return d;
            };

            /**
             * Acquires token WITHOUT using interactive flow. It checks the cache to return existing result
             * if not expired. It tries to use refresh token if available. If it fails to get token without
             * displaying UI it will fail. This method guarantees that no UI will be shown to user.
             *
             * @param   {String}  resourceUrl Resource identifier
             * @param   {String}  clientId    Client (application) identifier
             * @param   {String}  userId      User identifier (optional)
             *
             * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error
             */
            AuthenticationContext.prototype.acquireTokenSilentAsync = function (resourceUrl, clientId, userId) {
                checkArgs('ssS', 'AuthenticationContext.acquireTokenSilentAsync', arguments);

                var d = new Deferred();

                bridge.executeNativeMethod('acquireTokenSilentAsync', [this.authority, this.validateAuthority, resourceUrl, clientId, userId])
                    .then(function (authResult) {
                        d.resolve(new AuthenticationResult(authResult));
                    }, function (err) {
                        d.reject(err);
                    });

                return d;
            };

            module.exports = AuthenticationContext;
        });
        cordova.define("cordova-plugin-ms-adal.AuthenticationResult", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var UserInfo = require('./UserInfo');

            /**
             * Represents the result token acquisition operation.
             */
            function AuthenticationResult(authResult) {
                this.accessToken = authResult.accessToken;
                this.accessTokenType = authResult.accessTokenType;
                this.expiresOn = authResult.expiresOn ? new Date(authResult.expiresOn) : null;
                this.idToken = authResult.idToken;
                this.isMultipleResourceRefreshToken = authResult.isMultipleResourceRefreshToken;
                this.status = authResult.status;
                this.statusCode = authResult.statusCode;
                this.tenantId = authResult.tenantId;

                this.userInfo = authResult.idToken ? UserInfo.fromJWT(authResult.idToken) : null;
            }

            /**
             * Creates authorization header for web requests.
             *
             * @returns {String} The authorization header.
             */
            AuthenticationResult.prototype.createAuthorizationHeader = function () {
                return "Bearer " + this.accessToken;
            };

            module.exports = AuthenticationResult;
        });
        cordova.define("cordova-plugin-ms-adal.AuthenticationSettings", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var checkArgs = require('cordova/argscheck').checkArgs;

            var bridge = require('./CordovaBridge');
            var Deferred = require('./utility').Utility.Deferred;

            module.exports = {
                /**
                 * Sets flag to use or skip authentication broker.
                 * By default, the flag value is false and ADAL will not talk to broker.
                 *
                 * @param   {Boolean}   useBroker         Flag to use or skip authentication broker
                 *
                 * @returns {Promise}  Promise either fulfilled or rejected with error
                 */
                setUseBroker: function (useBroker) {
                    checkArgs('*', 'AuthenticationSettings.setUseBroker', arguments);

                    return bridge.executeNativeMethod('setUseBroker', [!!useBroker]);
                }
            }
        });
        cordova.define("cordova-plugin-ms-adal.CordovaBridge", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var exec = require('cordova/exec');
            var Deferred = require('./utility').Utility.Deferred;

            var GENERIC_ERR_MESSAGE = "Error occured while executing native method.";
            var GENERIC_ERR_CODE = "NATIVE_METHOD_GENERAL_FAILURE";
            /**
             * Implements proxy between Cordova JavaScript and Native functionality
             */
            var cordovaBridge = {
                /**
                 * Helper method to execute Cordova native method
                 *
                 * @param   {String}  nativeMethodName Method to execute.
                 * @param   {Array}   args             Execution arguments.
                 *
                 * @returns {Promise} Promise which wraps method success/error callbacks.
                 */
                executeNativeMethod: function (nativeMethodName, args) {
                    var deferred = new Deferred();

                    var win = function (res) {
                        deferred.resolve(res);
                    };

                    var fail = function (err) {
                        if (typeof err === "string") {
                            err = {
                                errorDescription: err
                            };
                        }

                        var error = new Error(err.errorDescription || err.message || err.Message || GENERIC_ERR_MESSAGE);
                        error.code = err.error || err.errorCode || GENERIC_ERR_CODE;
                        error.details = err;

                        deferred.reject(error);
                    };

                    exec(win, fail, "ADALProxy", nativeMethodName, args);

                    return deferred;
                }
            };

            module.exports = cordovaBridge;
        });
        cordova.define("cordova-plugin-ms-adal.TokenCache", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var bridge = require('./CordovaBridge');
            var TokenCacheItem = require('./TokenCacheItem');
            var Deferred = require('./utility').Utility.Deferred;
            var checkArgs = require('cordova/argscheck').checkArgs;

            /**
             * Token cache class used by {AuthenticationContext} to store access and refresh tokens.
             */
            function TokenCache(authContext) {
                this.authContext = authContext;
            }

            /**
             * Clears the cache by deleting all the items.
             *
             * @returns {Promise} Promise either fulfilled when operation is completed or rejected with error.
             */
            TokenCache.prototype.clear = function () {
                return bridge.executeNativeMethod('tokenCacheClear', [this.authContext.authority, this.authContext.validateAuthority]);
            };

            /**
             * Gets all cached items.
             *
             * @returns {Promise} Promise either fulfilled with array of cached items or rejected with error.
             */
            TokenCache.prototype.readItems = function () {
                checkArgs('', 'TokenCache.readItems', arguments);
                var result = [];

                var d = new Deferred();

                bridge.executeNativeMethod('tokenCacheReadItems', [this.authContext.authority, this.authContext.validateAuthority])
                    .then(function (tokenCacheItems) {
                        tokenCacheItems.forEach(function (item) {
                            result.push(new TokenCacheItem(item));
                        });
                        d.resolve(result);
                    }, function (err) {
                        d.reject(err);
                    });

                return d;
            };

            /**
             * Deletes cached item.
             *
             * @param   {TokenCacheItem}  item Cached item to delete from cache
             *
             * @returns {Promise} Promise either fulfilled when operation is completed or rejected with error.
             */
            TokenCache.prototype.deleteItem = function (item) {
                checkArgs('*', 'TokenCache.deleteItem', arguments);

                var args = [
                    this.authContext.authority,
                    this.authContext.validateAuthority,
                    item.authority,
                    item.resource,
                    item.clientId,
                    item.userInfo && item.userInfo.userId,
                    item.isMultipleResourceRefreshToken
                ];

                return bridge.executeNativeMethod('tokenCacheDeleteItem', args);
            };

            module.exports = TokenCache;
        });
        cordova.define("cordova-plugin-ms-adal.TokenCacheItem", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module, require*/

            var UserInfo = require('./UserInfo');

            /**
             * Represents token cache item.
             */
            function TokenCacheItem(cacheItem) {
                cacheItem = cacheItem || {};

                this.accessToken = cacheItem.accessToken;
                this.authority = cacheItem.authority;
                this.clientId = cacheItem.clientId;
                this.displayableId = cacheItem.displayableId;
                this.expiresOn = cacheItem.expiresOn ? new Date(cacheItem.expiresOn) : null;
                this.isMultipleResourceRefreshToken = cacheItem.isMultipleResourceRefreshToken;
                this.resource = cacheItem.resource;
                this.tenantId = cacheItem.tenantId;

                this.userInfo = cacheItem.idToken ? UserInfo.fromJWT(cacheItem.idToken) : null;
            }

            module.exports = TokenCacheItem;
        });
        cordova.define("cordova-plugin-ms-adal.UserInfo", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            /*global module*/

            var util = require('./utility');

            /**
             * Represents information about authorized user.
             */
            function UserInfo(userInfo) {
                userInfo = userInfo || {};

                this.displayableId = userInfo.displayableId;
                this.userId = userInfo.userId || userInfo.uniqueId;
                this.familyName = userInfo.familyName;
                this.givenName = userInfo.givenName;
                this.identityProvider = userInfo.identityProvider;
                this.passwordChangeUrl = userInfo.passwordChangeUrl; //uri
                this.passwordExpiresOn = userInfo.passwordExpiresOn ? new Date(userInfo.passwordExpiresOn) : null;
                this.uniqueId = userInfo.uniqueId;
            }

            /**
             * Parses jwt token that contains a use information and produces a valid UserInfo structure.
             * This method is intended for internal use and should not be used by end-user.
             *
             * @param  {String} jwtToken String that contains a valid JWT token, that contains user information.
             *                           Usually this is an idToken field of authenticationResult structure.
             *
             * @return {Object}          UserInfo object, created from token data.
             */
            UserInfo.fromJWT = function function_name(jwtToken) {
                // JWT token passed here should be a non-empty string
                if (typeof jwtToken !== 'string' || jwtToken.length === 0) {
                    return null;
                }

                var token;
                // If there is non-valid JWT token passed we don't want to
                // bubble error up and return null, as jwt isn't passed at all.
                try {
                    token = util.parseJWT(jwtToken);
                } catch (e) {
                    return null;
                }

                var result = new UserInfo();

                result.displayableId = token.name;
                result.familyName = token.family_name;
                result.givenName = token.given_name;
                // Due to https://msdn.microsoft.com/en-us/library/azure/dn195587.aspx this value is
                // identical to the value of the Issuer claim unless the user account is in a different tenant than the issuer.
                // In case when identity provider is not specified in token, we use 'issuer' field ('iss' claim) of token
                result.identityProvider = token.idp || token.iss;
                result.passwordChangeUrl = token.pwd_url;
                // JWT 'exp' is in seconds, Date requires value in milliseconds
                result.passwordExpiresOn = token.exp ? new Date(token.exp * 1000) : null;
                result.uniqueId = token.unique_name;
                // Users not synced will have no `oid` so we fallback to `sub` similar to what native libs do, for example:
                // https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/blob/c5c66c097a6499e0c646f5ed1db1d6d278683104/src/ADAL.PCL/TokenResponse.cs#L205
                result.userId = token.oid || token.sub;

                return result;
            };

            module.exports = UserInfo;
        });
        cordova.define("cordova-plugin-ms-adal.utility", function (require, exports, module) {
            // Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

            var __extends = this.__extends || function (d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];

                function __() {
                    this.constructor = d;
                }
                __.prototype = b.prototype;
                d.prototype = new __();
            };

            (function (Microsoft) {
                (function (Utility) {
                    (function (EncodingHelpers) {
                        function getKeyExpression(entityKeys) {
                            var entityInstanceKey = '(';

                            if (entityKeys.length == 1) {
                                entityInstanceKey += formatLiteral(entityKeys[0]);
                            } else {
                                var addComma = false;
                                for (var i = 0; i < entityKeys.length; i++) {
                                    if (addComma) {
                                        entityInstanceKey += ',';
                                    } else {
                                        addComma = true;
                                    }

                                    entityInstanceKey += entityKeys[i].name + '=' + formatLiteral(entityKeys[i]);
                                }
                            }

                            entityInstanceKey += ')';

                            return entityInstanceKey;
                        }
                        EncodingHelpers.getKeyExpression = getKeyExpression;

                        function formatLiteral(literal) {
                            /// <summary>Formats a value according to Uri literal format</summary>
                            /// <param name="value">Value to be formatted.</param>
                            /// <param name="type">Edm type of the value</param>
                            /// <returns type="string">Value after formatting</returns>
                            var result = "" + formatRowLiteral(literal.value, literal.type);

                            result = encodeURIComponent(result.replace("'", "''"));

                            switch ((literal.type)) {
                                case "Edm.Binary":
                                    return "X'" + result + "'";
                                case "Edm.DateTime":
                                    return "datetime" + "'" + result + "'";
                                case "Edm.DateTimeOffset":
                                    return "datetimeoffset" + "'" + result + "'";
                                case "Edm.Decimal":
                                    return result + "M";
                                case "Edm.Guid":
                                    return "guid" + "'" + result + "'";
                                case "Edm.Int64":
                                    return result + "L";
                                case "Edm.Float":
                                    return result + "f";
                                case "Edm.Double":
                                    return result + "D";
                                case "Edm.Geography":
                                    return "geography" + "'" + result + "'";
                                case "Edm.Geometry":
                                    return "geometry" + "'" + result + "'";
                                case "Edm.Time":
                                    return "time" + "'" + result + "'";
                                case "Edm.String":
                                    return "'" + result + "'";
                                default:
                                    return result;
                            }
                        }
                        EncodingHelpers.formatLiteral = formatLiteral;

                        function formatRowLiteral(value, type) {
                            switch (type) {
                                case "Edm.Binary":
                                    return Microsoft.Utility.decodeBase64AsHexString(value);
                                default:
                                    return value;
                            }
                        }
                    })(Utility.EncodingHelpers || (Utility.EncodingHelpers = {}));
                    var EncodingHelpers = Utility.EncodingHelpers;

                    function findProperties(o) {
                        var aPropertiesAndMethods = [];

                        do {
                            aPropertiesAndMethods = aPropertiesAndMethods.concat(Object.getOwnPropertyNames(o));
                        } while (o = Object.getPrototypeOf(o));

                        for (var a = 0; a < aPropertiesAndMethods.length; ++a) {
                            for (var b = a + 1; b < aPropertiesAndMethods.length; ++b) {
                                if (aPropertiesAndMethods[a] === aPropertiesAndMethods[b]) {
                                    aPropertiesAndMethods.splice(a--, 1);
                                }
                            }
                        }

                        return aPropertiesAndMethods;
                    }
                    Utility.findProperties = findProperties;

                    function decodeBase64AsHexString(base64) {
                        var decoded = decodeBase64(base64),
                            hexValue = "",
                            hexValues = "0123456789ABCDEF";

                        for (var j = 0; j < decoded.length; j++) {
                            var byte = decoded[j];
                            hexValue += hexValues[byte >> 4];
                            hexValue += hexValues[byte & 0x0F];
                        }

                        return hexValue;
                    }
                    Utility.decodeBase64AsHexString = decodeBase64AsHexString;

                    function decodeBase64(base64) {
                        var decoded = [];

                        if (window.atob !== undefined) {
                            var binaryStr = window.atob(base64);
                            for (var i = 0; i < binaryStr.length; i++) {
                                decoded.push(binaryStr.charCodeAt(i));
                            }
                            return decoded;
                        }

                        for (var index = 0; index < base64.length; index += 4) {
                            var sextet1 = getBase64Sextet(base64[index]);
                            var sextet2 = getBase64Sextet(base64[index + 1]);
                            var sextet3 = (index + 2 < base64.length) ? getBase64Sextet(base64[index + 2]) : null;
                            var sextet4 = (index + 3 < base64.length) ? getBase64Sextet(base64[index + 3]) : null;
                            decoded.push((sextet1 << 2) | (sextet2 >> 4));
                            if (sextet3)
                                decoded.push(((sextet2 & 0xF) << 4) | (sextet3 >> 2));
                            if (sextet4)
                                decoded.push(((sextet3 & 0x3) << 6) | sextet4);
                        }

                        return decoded;
                    }
                    Utility.decodeBase64 = decodeBase64;

                    function decodeBase64AsString(base64) {
                        var decoded = decodeBase64(base64),
                            decoded_string;

                        decoded.forEach(function (value, index, decoded_access_token) {
                            if (!decoded_string) {
                                decoded_string = String.fromCharCode(value);
                            } else {
                                decoded_string += String.fromCharCode(value);
                            }
                        });

                        return decoded_string;
                    }
                    Utility.decodeBase64AsString = decodeBase64AsString;

                    function getBase64Sextet(character) {
                        var code = character.charCodeAt(0);

                        if (code >= 65 && code <= 90)
                            return code - 65;

                        if (code >= 97 && code <= 122)
                            return code - 71;

                        if (code >= 48 && code <= 57)
                            return code + 4;

                        if (character === "+")
                            return 62;

                        if (character === "/")
                            return 63;

                        return null;
                    }

                    var Exception = (function () {
                        function Exception(message, innerException) {
                            this._message = message;
                            if (innerException) {
                                this._innerException = innerException;
                            }
                        }
                        Object.defineProperty(Exception.prototype, "message", {
                            get: function () {
                                return this._message;
                            },
                            enumerable: true,
                            configurable: true
                        });

                        Object.defineProperty(Exception.prototype, "innerException", {
                            get: function () {
                                return this._innerException;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return Exception;
                    })();
                    Utility.Exception = Exception;

                    var HttpException = (function (_super) {
                        __extends(HttpException, _super);

                        function HttpException(XHR, innerException) {
                            _super.call(this, XHR.statusText, innerException);
                            this.getHeaders = this.getHeadersFn(XHR);
                        }
                        HttpException.prototype.getHeadersFn = function (xhr) {
                            return function (headerName) {
                                if (headerName && headerName.length > 0) {
                                    return xhr.getResponseHeader(headerName);
                                } else {
                                    return xhr.getAllResponseHeaders();
                                };
                            };
                        };

                        Object.defineProperty(HttpException.prototype, "xhr", {
                            get: function () {
                                return this._xhr;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return HttpException;
                    })(Exception);
                    Utility.HttpException = HttpException;

                    var DeferredState;
                    (function (DeferredState) {
                        DeferredState[DeferredState["UNFULFILLED"] = 0] = "UNFULFILLED";
                        DeferredState[DeferredState["RESOLVED"] = 1] = "RESOLVED";
                        DeferredState[DeferredState["REJECTED"] = 2] = "REJECTED";
                    })(DeferredState || (DeferredState = {}));

                    var Deferred = (function () {
                        function Deferred() {
                            this._fulfilled = function () { };
                            this._rejected = function () { };
                            this._progress = function () { };
                            this._state = 0 /* UNFULFILLED */;
                        }
                        Deferred.prototype.then = function (onFulfilled, onRejected, onProgress) {
                            this._deferred = new Deferred();
                            var that = this;

                            if (onFulfilled && typeof onFulfilled === 'function') {
                                this._fulfilled = function (value) {
                                    var result;
                                    try {
                                        result = onFulfilled(value);
                                    } catch (err) {
                                        that._deferred.reject(err);
                                        return;
                                    }

                                    if (result instanceof Deferred) {
                                        result.then(function (res) {
                                            that._deferred.resolve(res);
                                        }, function (err) {
                                            that._deferred.reject(err);
                                        });
                                    } else {
                                        that._deferred.resolve(result);
                                    }
                                };
                            }

                            if (onRejected && typeof onRejected === 'function') {
                                this._rejected = function (reason) {
                                    var result;
                                    try {
                                        result = onRejected(reason);
                                    } catch (err) {
                                        that._deferred.reject(err);
                                        return;
                                    }

                                    if (result instanceof Deferred) {
                                        result.then(function (res) {
                                            that._deferred.resolve(res);
                                        }, function (err) {
                                            that._deferred.reject(err);
                                        });
                                    } else {
                                        that._deferred.reject(result);
                                    }
                                };
                            }

                            if (onProgress && typeof onProgress === 'function') {
                                this._progress = function (progress) {
                                    var result;
                                    try {
                                        result = onProgress(progress);
                                    } catch (err) {
                                        that._deferred.reject(err);
                                        return;
                                    }

                                    if (result instanceof Deferred) {
                                        result.then(function (res) {
                                            that._deferred.notify(res);
                                        }, function (err) {
                                            that._deferred.reject(err);
                                        });
                                    } else {
                                        that._deferred.notify(result);
                                    }
                                };
                            }

                            switch (this._state) {
                                case 0 /* UNFULFILLED */:
                                    break;
                                case 1 /* RESOLVED */:
                                    this._fulfilled(this._value);
                                    break;
                                case 2 /* REJECTED */:
                                    this._rejected(this._reason);
                                    break;
                            }

                            return this._deferred;
                        };

                        Deferred.prototype.detach = function () {
                            this._fulfilled = function () { };
                            this._rejected = function () { };
                            this._progress = function () { };
                        };

                        Deferred.prototype.resolve = function (value) {
                            if (this._state !== 0 /* UNFULFILLED */) {
                                throw new Microsoft.Utility.Exception("Invalid deferred state = " + this._state);
                            }
                            this._value = value;
                            var fulfilled = this._fulfilled;
                            this.detach();
                            this._state = 1 /* RESOLVED */;
                            fulfilled(value);
                        };

                        Deferred.prototype.reject = function (reason) {
                            if (this._state !== 0 /* UNFULFILLED */) {
                                throw new Microsoft.Utility.Exception("Invalid deferred state = " + this._state);
                            }
                            this._reason = reason;
                            var rejected = this._rejected;
                            this.detach();
                            this._state = 2 /* REJECTED */;
                            rejected(reason);
                        };

                        Deferred.prototype.notify = function (progress) {
                            if (this._state !== 0 /* UNFULFILLED */) {
                                throw new Microsoft.Utility.Exception("Invalid deferred state = " + this._state);
                            }
                            this._progress(progress);
                        };

                        return Deferred;
                    })();
                    Utility.Deferred = Deferred;

                    (function (HttpHelpers) {
                        var Request = (function () {
                            function Request(requestUri, method, data) {
                                this.requestUri = requestUri;
                                this.method = method;
                                this.data = data;
                                this.headers = {};
                                this.disableCache = false;
                            }
                            return Request;
                        })();
                        HttpHelpers.Request = Request;

                        var AuthenticatedHttp = (function () {
                            function AuthenticatedHttp(getAccessTokenFn) {
                                this._disableCache = false;
                                this._noCache = Date.now();
                                this._accept = 'application/json;q=0.9, */*;q=0.1';
                                this._contentType = 'application/json';
                                this._getAccessTokenFn = getAccessTokenFn;
                            }
                            Object.defineProperty(AuthenticatedHttp.prototype, "disableCache", {
                                get: function () {
                                    return this._disableCache;
                                },
                                set: function (value) {
                                    this._disableCache = value;
                                },
                                enumerable: true,
                                configurable: true
                            });

                            Object.defineProperty(AuthenticatedHttp.prototype, "accept", {
                                get: function () {
                                    return this._accept;
                                },
                                set: function (value) {
                                    this._accept = value;
                                },
                                enumerable: true,
                                configurable: true
                            });

                            Object.defineProperty(AuthenticatedHttp.prototype, "contentType", {
                                get: function () {
                                    return this._contentType;
                                },
                                set: function (value) {
                                    this._contentType = value;
                                },
                                enumerable: true,
                                configurable: true
                            });

                            AuthenticatedHttp.prototype.ajax = function (request) {
                                var deferred = new Microsoft.Utility.Deferred();

                                var xhr = new XMLHttpRequest();

                                if (!request.method) {
                                    request.method = 'GET';
                                }

                                xhr.open(request.method.toUpperCase(), request.requestUri, true);

                                if (request.headers) {
                                    for (name in request.headers) {
                                        xhr.setRequestHeader(name, request.headers[name]);
                                    }
                                }

                                xhr.onreadystatechange = function (e) {
                                    if (xhr.readyState == 4) {
                                        if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
                                            deferred.resolve(xhr.responseText);
                                        } else {
                                            deferred.reject(xhr);
                                        }
                                    } else {
                                        deferred.notify(xhr.readyState);
                                    }
                                };

                                if (request.data) {
                                    if (typeof request.data === 'string') {
                                        xhr.send(request.data);
                                    } else {
                                        xhr.send(JSON.stringify(request.data));
                                    }
                                } else {
                                    xhr.send();
                                }

                                return deferred;
                            };

                            AuthenticatedHttp.prototype.getUrl = function (url) {
                                return this.request(new Request(url));
                            };

                            AuthenticatedHttp.prototype.postUrl = function (url, data) {
                                return this.request(new Request(url, 'POST', data));
                            };

                            AuthenticatedHttp.prototype.deleteUrl = function (url) {
                                return this.request(new Request(url, 'DELETE'));
                            };

                            AuthenticatedHttp.prototype.patchUrl = function (url, data) {
                                return this.request(new Request(url, 'PATCH', data));
                            };

                            AuthenticatedHttp.prototype.request = function (request) {
                                var _this = this;
                                var deferred;

                                this.augmentRequest(request);

                                if (this._getAccessTokenFn) {
                                    deferred = new Microsoft.Utility.Deferred();

                                    this._getAccessTokenFn().then((function (token) {
                                        request.headers["Authorization"] = 'Bearer ' + token;
                                        _this.ajax(request).then(deferred.resolve, deferred.reject);
                                    }).bind(this), deferred.reject);
                                } else {
                                    deferred = this.ajax(request);
                                }

                                return deferred;
                            };

                            AuthenticatedHttp.prototype.augmentRequest = function (request) {
                                if (!request.headers) {
                                    request.headers = {};
                                }

                                if (!request.headers['Accept']) {
                                    request.headers['Accept'] = this._accept;
                                }

                                if (!request.headers['Content-Type']) {
                                    request.headers['Content-Type'] = this._contentType;
                                }

                                if (request.disableCache || this._disableCache) {
                                    request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + '_=' + this._noCache++;
                                }
                            };
                            return AuthenticatedHttp;
                        })();
                        HttpHelpers.AuthenticatedHttp = AuthenticatedHttp;
                    })(Utility.HttpHelpers || (Utility.HttpHelpers = {}));
                    var HttpHelpers = Utility.HttpHelpers;
                })(Microsoft.Utility || (Microsoft.Utility = {}));
                var Utility = Microsoft.Utility;
            })(module.exports);

            /**
             * Pads a string at the right to specified length with specified string
             *
             * @param  {String} str Input string to be padded
             *
             * @param  {Number} n   Resulting length
             *
             * @param  {String} pad String to pad with
             *
             * @return {String}     Right-padded string
             */
            function padRight(str, n, pad) {
                var temp = str;

                if (n > str.length) {
                    for (var i = 0; i < n - str.length; i++) {
                        temp += pad;
                    }
                }

                return temp;
            }

            /**
             * Converts Base64URL to Base64 encoded string
             *
             * @param  {String} jwt Base64URL encoded string
             *
             * @return {String}     Base64 encoded string with applied '=' right padding
             */
            function base64UrlToBase64(b64Url) {
                b64Url = padRight(b64Url, b64Url.length + (4 - b64Url.length % 4) % 4, '=');
                return b64Url.replace(/-/g, '+').replace(/_/g, '/');
            }

            /**
             * Decodes the Base64-encoded value into a string with correct utf8 encoding support.
             * See for more details: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem
             *
             * @param  {String} str Base64-encoded string to decode
             *
             * @return {String}     Decoded string
             *
             */
            function b64DecodeUnicode(str) {
                return decodeURIComponent(Array.prototype.map.call(atob(str), function (c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
            }

            /**
             * Parses a valid JWT token into JSON representation.
             * This method doesn't validate/encode token.
             *
             * @param  {String} jwt Raw JWT token string
             *
             * @return {Object}     Raw object that contains data from token
             */
            function parseJWT(jwt) {
                var jwtParseError = new Error("Error parsing JWT token.");

                var jwtParts = jwt.split('.');
                if (jwtParts.length !== 3) {
                    throw jwtParseError;
                }

                var jwtBody = jwtParts[1];
                jwtBody = base64UrlToBase64(jwtBody);

                try {
                    return JSON.parse(b64DecodeUnicode(jwtBody));
                } catch (e) {
                    throw jwtParseError;
                }
            }

            module.exports.extends = __extends;

            module.exports.parseJWT = parseJWT;
        });

        // cordova media
        cordova.define("cordova-plugin-media.Media", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                utils = require('cordova/utils'),
                exec = require('cordova/exec');

            var mediaObjects = {};

            /**
             * This class provides access to the device media, interfaces to both sound and video
             *
             * @constructor
             * @param src                   The file name or url to play
             * @param successCallback       The callback to be called when the file is done playing or recording.
             *                                  successCallback()
             * @param errorCallback         The callback to be called if there is an error.
             *                                  errorCallback(int errorCode) - OPTIONAL
             * @param statusCallback        The callback to be called when media status has changed.
             *                                  statusCallback(int statusCode) - OPTIONAL
             */
            var Media = function (src, successCallback, errorCallback, statusCallback) {
                argscheck.checkArgs('sFFF', 'Media', arguments);
                this.id = utils.createUUID();
                mediaObjects[this.id] = this;
                this.src = src;
                this.successCallback = successCallback;
                this.errorCallback = errorCallback;
                this.statusCallback = statusCallback;
                this._duration = -1;
                this._position = -1;
                exec(null, this.errorCallback, "Media", "create", [this.id, this.src]);
            };

            // Media messages
            Media.MEDIA_STATE = 1;
            Media.MEDIA_DURATION = 2;
            Media.MEDIA_POSITION = 3;
            Media.MEDIA_ERROR = 9;

            // Media states
            Media.MEDIA_NONE = 0;
            Media.MEDIA_STARTING = 1;
            Media.MEDIA_RUNNING = 2;
            Media.MEDIA_PAUSED = 3;
            Media.MEDIA_STOPPED = 4;
            Media.MEDIA_MSG = ["None", "Starting", "Running", "Paused", "Stopped"];

            // "static" function to return existing objs.
            Media.get = function (id) {
                return mediaObjects[id];
            };

            /**
             * Start or resume playing audio file.
             */
            Media.prototype.play = function (options) {
                exec(null, null, "Media", "startPlayingAudio", [this.id, this.src, options]);
            };

            /**
             * Stop playing audio file.
             */
            Media.prototype.stop = function () {
                var me = this;
                exec(function () {
                    me._position = 0;
                }, this.errorCallback, "Media", "stopPlayingAudio", [this.id]);
            };

            /**
             * Seek or jump to a new time in the track..
             */
            Media.prototype.seekTo = function (milliseconds) {
                var me = this;
                exec(function (p) {
                    me._position = p;
                }, this.errorCallback, "Media", "seekToAudio", [this.id, milliseconds]);
            };

            /**
             * Pause playing audio file.
             */
            Media.prototype.pause = function () {
                exec(null, this.errorCallback, "Media", "pausePlayingAudio", [this.id]);
            };

            /**
             * Get duration of an audio file.
             * The duration is only set for audio that is playing, paused or stopped.
             *
             * @return      duration or -1 if not known.
             */
            Media.prototype.getDuration = function () {
                return this._duration;
            };

            /**
             * Get position of audio.
             */
            Media.prototype.getCurrentPosition = function (success, fail) {
                var me = this;
                exec(function (p) {
                    me._position = p;
                    success(p);
                }, fail, "Media", "getCurrentPositionAudio", [this.id]);
            };

            /**
             * Start recording audio file.
             */
            Media.prototype.startRecord = function () {
                exec(null, this.errorCallback, "Media", "startRecordingAudio", [this.id, this.src]);
            };

            /**
             * Stop recording audio file.
             */
            Media.prototype.stopRecord = function () {
                exec(null, this.errorCallback, "Media", "stopRecordingAudio", [this.id]);
            };

            /**
             * Pause recording audio file.
             */
            Media.prototype.pauseRecord = function () {
                exec(null, this.errorCallback, "Media", "pauseRecordingAudio", [this.id]);
            };

            /**
             * Resume recording audio file.
             */
            Media.prototype.resumeRecord = function () {
                exec(null, this.errorCallback, "Media", "resumeRecordingAudio", [this.id]);
            };

            /**
             * Release the resources.
             */
            Media.prototype.release = function () {
                exec(null, this.errorCallback, "Media", "release", [this.id]);
            };

            /**
             * Adjust the volume.
             */
            Media.prototype.setVolume = function (volume) {
                exec(null, null, "Media", "setVolume", [this.id, volume]);
            };

            /**
             * Adjust the playback rate.
             */
            Media.prototype.setRate = function (rate) {
                if (cordova.platformId === 'ios') {
                    exec(null, null, "Media", "setRate", [this.id, rate]);
                } else {
                    console.warn('media.setRate method is currently not supported for', cordova.platformId, 'platform.');
                }
            };

            /**
             * Get amplitude of audio.
             */
            Media.prototype.getCurrentAmplitude = function (success, fail) {
                exec(function (p) {
                    success(p);
                }, fail, "Media", "getCurrentAmplitudeAudio", [this.id]);
            };

            /**
             * Audio has status update.
             * PRIVATE
             *
             * @param id            The media object id (string)
             * @param msgType       The 'type' of update this is
             * @param value         Use of value is determined by the msgType
             */
            Media.onStatus = function (id, msgType, value) {
                var media = mediaObjects[id];

                if (media) {
                    switch (msgType) {
                        case Media.MEDIA_STATE:
                            if (media.statusCallback) {
                                media.statusCallback(value);
                            }
                            if (value == Media.MEDIA_STOPPED) {
                                if (media.successCallback) {
                                    media.successCallback();
                                }
                            }
                            break;
                        case Media.MEDIA_DURATION:
                            media._duration = value;
                            break;
                        case Media.MEDIA_ERROR:
                            if (media.errorCallback) {
                                media.errorCallback(value);
                            }
                            break;
                        case Media.MEDIA_POSITION:
                            media._position = Number(value);
                            break;
                        default:
                            if (console.error) {
                                console.error("Unhandled Media.onStatus :: " + msgType);
                            }
                            break;
                    }
                } else if (console.error) {
                    console.error("Received Media.onStatus callback for unknown media :: " + id);
                }
            };

            module.exports = Media;

            function onMessageFromNative(msg) {
                if (msg.action == 'status') {
                    Media.onStatus(msg.status.id, msg.status.msgType, msg.status.value);
                } else {
                    throw new Error('Unknown media action' + msg.action);
                }
            }

            if (cordova.platformId === 'android' || cordova.platformId === 'amazon-fireos' || cordova.platformId === 'windowsphone') {
                var channel = require('cordova/channel');

                channel.createSticky('onMediaPluginReady');
                channel.waitForInitialization('onMediaPluginReady');

                channel.onCordovaReady.subscribe(function () {
                    exec(onMessageFromNative, undefined, 'Media', 'messageChannel', []);
                    channel.initializationComplete('onMediaPluginReady');
                });
            }
        });
        cordova.define("cordova-plugin-media.MediaError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * This class contains information about any Media errors.
             */
            /*
             According to :: http://dev.w3.org/html5/spec-author-view/video.html#mediaerror
             We should never be creating these objects, we should just implement the interface
             which has 1 property for an instance, 'code'

             instead of doing :
                errorCallbackFunction( new MediaError(3,'msg') );
            we should simply use a literal :
                errorCallbackFunction( {'code':3} );
             */

            var _MediaError = window.MediaError;

            if (!_MediaError) {
                window.MediaError = _MediaError = function (code, msg) {
                    this.code = (typeof code != 'undefined') ? code : null;
                    this.message = msg || ""; // message is NON-standard! do not use!
                };
            }

            _MediaError.MEDIA_ERR_NONE_ACTIVE = _MediaError.MEDIA_ERR_NONE_ACTIVE || 0;
            _MediaError.MEDIA_ERR_ABORTED = _MediaError.MEDIA_ERR_ABORTED || 1;
            _MediaError.MEDIA_ERR_NETWORK = _MediaError.MEDIA_ERR_NETWORK || 2;
            _MediaError.MEDIA_ERR_DECODE = _MediaError.MEDIA_ERR_DECODE || 3;
            _MediaError.MEDIA_ERR_NONE_SUPPORTED = _MediaError.MEDIA_ERR_NONE_SUPPORTED || 4;
            // TODO: MediaError.MEDIA_ERR_NONE_SUPPORTED is legacy, the W3 spec now defines it as below.
            // as defined by http://dev.w3.org/html5/spec-author-view/video.html#error-codes
            _MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = _MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED || 4;

            module.exports = _MediaError;
        });


        // Globalization: https://github.com/dronahq/cordova-plugin-globalizatino
        cordova.define("cordova-plugin-globalization.globalization", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            var argscheck = require('cordova/argscheck'),
                exec = require('cordova/exec');

            var globalization = {
                /**
                 * Returns the string identifier for the client's current language.
                 * It returns the language identifier string to the successCB callback with a
                 * properties object as a parameter. If there is an error getting the language,
                 * then the errorCB callback is invoked.
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 *
                 * @return Object.value {String}: The language identifier
                 *
                 * @error GlobalizationError.UNKNOWN_ERROR
                 *
                 * Example
                 *    globalization.getPreferredLanguage(function (language) {alert('language:' + language.value + '\n');},
                 *                                function () {});
                 */
                getPreferredLanguage: function (successCB, failureCB) {
                    argscheck.checkArgs('fF', 'Globalization.getPreferredLanguage', arguments);
                    exec(successCB, failureCB, "Globalization", "getPreferredLanguage", []);
                },

                /**
                 * Returns the string identifier for the client's current locale setting.
                 * It returns the locale identifier string to the successCB callback with a
                 * properties object as a parameter. If there is an error getting the locale,
                 * then the errorCB callback is invoked.
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 *
                 * @return Object.value {String}: The locale identifier
                 *
                 * @error GlobalizationError.UNKNOWN_ERROR
                 *
                 * Example
                 *    globalization.getLocaleName(function (locale) {alert('locale:' + locale.value + '\n');},
                 *                                function () {});
                 */
                getLocaleName: function (successCB, failureCB) {
                    argscheck.checkArgs('fF', 'Globalization.getLocaleName', arguments);
                    exec(successCB, failureCB, "Globalization", "getLocaleName", []);
                },

                /**
                 * Returns a date formatted as a string according to the client's user preferences and
                 * calendar using the time zone of the client. It returns the formatted date string to the
                 * successCB callback with a properties object as a parameter. If there is an error
                 * formatting the date, then the errorCB callback is invoked.
                 *
                 * The defaults are: formatLenght="short" and selector="date and time"
                 *
                 * @param {Date} date
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            formatLength {String}: 'short', 'medium', 'long', or 'full'
                 *            selector {String}: 'date', 'time', or 'date and time'
                 *
                 * @return Object.value {String}: The localized date string
                 *
                 * @error GlobalizationError.FORMATTING_ERROR
                 *
                 * Example
                 *    globalization.dateToString(new Date(),
                 *                function (date) {alert('date:' + date.value + '\n');},
                 *                function (errorCode) {alert(errorCode);},
                 *                {formatLength:'short'});
                 */
                dateToString: function (date, successCB, failureCB, options) {
                    argscheck.checkArgs('dfFO', 'Globalization.dateToString', arguments);
                    var dateValue = date.valueOf();
                    exec(successCB, failureCB, "Globalization", "dateToString", [{
                        "date": dateValue,
                        "options": options
                    }]);
                },

                /**
                 * Parses a date formatted as a string according to the client's user
                 * preferences and calendar using the time zone of the client and returns
                 * the corresponding date object. It returns the date to the successCB
                 * callback with a properties object as a parameter. If there is an error
                 * parsing the date string, then the errorCB callback is invoked.
                 *
                 * The defaults are: formatLength="short" and selector="date and time"
                 *
                 * @param {String} dateString
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            formatLength {String}: 'short', 'medium', 'long', or 'full'
                 *            selector {String}: 'date', 'time', or 'date and time'
                 *
                 * @return    Object.year {Number}: The four digit year
                 *            Object.month {Number}: The month from (0 - 11)
                 *            Object.day {Number}: The day from (1 - 31)
                 *            Object.hour {Number}: The hour from (0 - 23)
                 *            Object.minute {Number}: The minute from (0 - 59)
                 *            Object.second {Number}: The second from (0 - 59)
                 *            Object.millisecond {Number}: The milliseconds (from 0 - 999),
                 *                                        not available on all platforms
                 *
                 * @error GlobalizationError.PARSING_ERROR
                 *
                 * Example
                 *    globalization.stringToDate('4/11/2011',
                 *                function (date) { alert('Month:' + date.month + '\n' +
                 *                    'Day:' + date.day + '\n' +
                 *                    'Year:' + date.year + '\n');},
                 *                function (errorCode) {alert(errorCode);},
                 *                {selector:'date'});
                 */
                stringToDate: function (dateString, successCB, failureCB, options) {
                    argscheck.checkArgs('sfFO', 'Globalization.stringToDate', arguments);
                    exec(successCB, failureCB, "Globalization", "stringToDate", [{
                        "dateString": dateString,
                        "options": options
                    }]);
                },

                /**
                 * Returns a pattern string for formatting and parsing dates according to the client's
                 * user preferences. It returns the pattern to the successCB callback with a
                 * properties object as a parameter. If there is an error obtaining the pattern,
                 * then the errorCB callback is invoked.
                 *
                 * The defaults are: formatLength="short" and selector="date and time"
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            formatLength {String}: 'short', 'medium', 'long', or 'full'
                 *            selector {String}: 'date', 'time', or 'date and time'
                 *
                 * @return    Object.pattern {String}: The date and time pattern for formatting and parsing dates.
                 *                                    The patterns follow Unicode Technical Standard #35
                 *                                    http://unicode.org/reports/tr35/tr35-4.html
                 *            Object.timezone {String}: The abbreviated name of the time zone on the client
                 *            Object.utc_offset {Number}: The current difference in seconds between the client's
                 *                                        time zone and coordinated universal time.
                 *            Object.dst_offset {Number}: The current daylight saving time offset in seconds
                 *                                        between the client's non-daylight saving's time zone
                 *                                        and the client's daylight saving's time zone.
                 *
                 * @error GlobalizationError.PATTERN_ERROR
                 *
                 * Example
                 *    globalization.getDatePattern(
                 *                function (date) {alert('pattern:' + date.pattern + '\n');},
                 *                function () {},
                 *                {formatLength:'short'});
                 */
                getDatePattern: function (successCB, failureCB, options) {
                    argscheck.checkArgs('fFO', 'Globalization.getDatePattern', arguments);
                    exec(successCB, failureCB, "Globalization", "getDatePattern", [{
                        "options": options
                    }]);
                },

                /**
                 * Returns an array of either the names of the months or days of the week
                 * according to the client's user preferences and calendar. It returns the array of names to the
                 * successCB callback with a properties object as a parameter. If there is an error obtaining the
                 * names, then the errorCB callback is invoked.
                 *
                 * The defaults are: type="wide" and item="months"
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            type {String}: 'narrow' or 'wide'
                 *            item {String}: 'months', or 'days'
                 *
                 * @return Object.value {Array{String}}: The array of names starting from either
                 *                                        the first month in the year or the
                 *                                        first day of the week.
                 * @error GlobalizationError.UNKNOWN_ERROR
                 *
                 * Example
                 *    globalization.getDateNames(function (names) {
                 *        for(var i = 0; i < names.value.length; i++) {
                 *            alert('Month:' + names.value[i] + '\n');}},
                 *        function () {});
                 */
                getDateNames: function (successCB, failureCB, options) {
                    argscheck.checkArgs('fFO', 'Globalization.getDateNames', arguments);
                    exec(successCB, failureCB, "Globalization", "getDateNames", [{
                        "options": options
                    }]);
                },

                /**
                 * Returns whether daylight savings time is in effect for a given date using the client's
                 * time zone and calendar. It returns whether or not daylight savings time is in effect
                 * to the successCB callback with a properties object as a parameter. If there is an error
                 * reading the date, then the errorCB callback is invoked.
                 *
                 * @param {Date} date
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 *
                 * @return Object.dst {Boolean}: The value "true" indicates that daylight savings time is
                 *                                in effect for the given date and "false" indicate that it is not.
                 *
                 * @error GlobalizationError.UNKNOWN_ERROR
                 *
                 * Example
                 *    globalization.isDayLightSavingsTime(new Date(),
                 *                function (date) {alert('dst:' + date.dst + '\n');}
                 *                function () {});
                 */
                isDayLightSavingsTime: function (date, successCB, failureCB) {
                    argscheck.checkArgs('dfF', 'Globalization.isDayLightSavingsTime', arguments);
                    var dateValue = date.valueOf();
                    exec(successCB, failureCB, "Globalization", "isDayLightSavingsTime", [{
                        "date": dateValue
                    }]);
                },

                /**
                 * Returns the first day of the week according to the client's user preferences and calendar.
                 * The days of the week are numbered starting from 1 where 1 is considered to be Sunday.
                 * It returns the day to the successCB callback with a properties object as a parameter.
                 * If there is an error obtaining the pattern, then the errorCB callback is invoked.
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 *
                 * @return Object.value {Number}: The number of the first day of the week.
                 *
                 * @error GlobalizationError.UNKNOWN_ERROR
                 *
                 * Example
                 *    globalization.getFirstDayOfWeek(function (day)
                 *                { alert('Day:' + day.value + '\n');},
                 *                function () {});
                 */
                getFirstDayOfWeek: function (successCB, failureCB) {
                    argscheck.checkArgs('fF', 'Globalization.getFirstDayOfWeek', arguments);
                    exec(successCB, failureCB, "Globalization", "getFirstDayOfWeek", []);
                },

                /**
                 * Returns a number formatted as a string according to the client's user preferences.
                 * It returns the formatted number string to the successCB callback with a properties object as a
                 * parameter. If there is an error formatting the number, then the errorCB callback is invoked.
                 *
                 * The defaults are: type="decimal"
                 *
                 * @param {Number} number
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            type {String}: 'decimal', "percent", or 'currency'
                 *
                 * @return Object.value {String}: The formatted number string.
                 *
                 * @error GlobalizationError.FORMATTING_ERROR
                 *
                 * Example
                 *    globalization.numberToString(3.25,
                 *                function (number) {alert('number:' + number.value + '\n');},
                 *                function () {},
                 *                {type:'decimal'});
                 */
                numberToString: function (number, successCB, failureCB, options) {
                    argscheck.checkArgs('nfFO', 'Globalization.numberToString', arguments);
                    exec(successCB, failureCB, "Globalization", "numberToString", [{
                        "number": number,
                        "options": options
                    }]);
                },

                /**
                 * Parses a number formatted as a string according to the client's user preferences and
                 * returns the corresponding number. It returns the number to the successCB callback with a
                 * properties object as a parameter. If there is an error parsing the number string, then
                 * the errorCB callback is invoked.
                 *
                 * The defaults are: type="decimal"
                 *
                 * @param {String} numberString
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            type {String}: 'decimal', "percent", or 'currency'
                 *
                 * @return Object.value {Number}: The parsed number.
                 *
                 * @error GlobalizationError.PARSING_ERROR
                 *
                 * Example
                 *    globalization.stringToNumber('1234.56',
                 *                function (number) {alert('Number:' + number.value + '\n');},
                 *                function () { alert('Error parsing number');});
                 */
                stringToNumber: function (numberString, successCB, failureCB, options) {
                    argscheck.checkArgs('sfFO', 'Globalization.stringToNumber', arguments);
                    exec(successCB, failureCB, "Globalization", "stringToNumber", [{
                        "numberString": numberString,
                        "options": options
                    }]);
                },

                /**
                 * Returns a pattern string for formatting and parsing numbers according to the client's user
                 * preferences. It returns the pattern to the successCB callback with a properties object as a
                 * parameter. If there is an error obtaining the pattern, then the errorCB callback is invoked.
                 *
                 * The defaults are: type="decimal"
                 *
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 * @param {Object} options {optional}
                 *            type {String}: 'decimal', "percent", or 'currency'
                 *
                 * @return    Object.pattern {String}: The number pattern for formatting and parsing numbers.
                 *                                    The patterns follow Unicode Technical Standard #35.
                 *                                    http://unicode.org/reports/tr35/tr35-4.html
                 *            Object.symbol {String}: The symbol to be used when formatting and parsing
                 *                                    e.g., percent or currency symbol.
                 *            Object.fraction {Number}: The number of fractional digits to use when parsing and
                 *                                    formatting numbers.
                 *            Object.rounding {Number}: The rounding increment to use when parsing and formatting.
                 *            Object.positive {String}: The symbol to use for positive numbers when parsing and formatting.
                 *            Object.negative: {String}: The symbol to use for negative numbers when parsing and formatting.
                 *            Object.decimal: {String}: The decimal symbol to use for parsing and formatting.
                 *            Object.grouping: {String}: The grouping symbol to use for parsing and formatting.
                 *
                 * @error GlobalizationError.PATTERN_ERROR
                 *
                 * Example
                 *    globalization.getNumberPattern(
                 *                function (pattern) {alert('Pattern:' + pattern.pattern + '\n');},
                 *                function () {});
                 */
                getNumberPattern: function (successCB, failureCB, options) {
                    argscheck.checkArgs('fFO', 'Globalization.getNumberPattern', arguments);
                    exec(successCB, failureCB, "Globalization", "getNumberPattern", [{
                        "options": options
                    }]);
                },

                /**
                 * Returns a pattern string for formatting and parsing currency values according to the client's
                 * user preferences and ISO 4217 currency code. It returns the pattern to the successCB callback with a
                 * properties object as a parameter. If there is an error obtaining the pattern, then the errorCB
                 * callback is invoked.
                 *
                 * @param {String} currencyCode
                 * @param {Function} successCB
                 * @param {Function} errorCB
                 *
                 * @return    Object.pattern {String}: The currency pattern for formatting and parsing currency values.
                 *                                    The patterns follow Unicode Technical Standard #35
                 *                                    http://unicode.org/reports/tr35/tr35-4.html
                 *            Object.code {String}: The ISO 4217 currency code for the pattern.
                 *            Object.fraction {Number}: The number of fractional digits to use when parsing and
                 *                                    formatting currency.
                 *            Object.rounding {Number}: The rounding increment to use when parsing and formatting.
                 *            Object.decimal: {String}: The decimal symbol to use for parsing and formatting.
                 *            Object.grouping: {String}: The grouping symbol to use for parsing and formatting.
                 *
                 * @error GlobalizationError.FORMATTING_ERROR
                 *
                 * Example
                 *    globalization.getCurrencyPattern('EUR',
                 *                function (currency) {alert('Pattern:' + currency.pattern + '\n');}
                 *                function () {});
                 */
                getCurrencyPattern: function (currencyCode, successCB, failureCB) {
                    argscheck.checkArgs('sfF', 'Globalization.getCurrencyPattern', arguments);
                    exec(successCB, failureCB, "Globalization", "getCurrencyPattern", [{
                        "currencyCode": currencyCode
                    }]);
                }
            };

            module.exports = globalization;
        });
        cordova.define("cordova-plugin-globalization.GlobalizationError", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /**
             * Globalization error object
             *
             * @constructor
             * @param code
             * @param message
             */
            var GlobalizationError = function (code, message) {
                this.code = code || null;
                this.message = message || '';
            };

            // Globalization error codes
            GlobalizationError.UNKNOWN_ERROR = 0;
            GlobalizationError.FORMATTING_ERROR = 1;
            GlobalizationError.PARSING_ERROR = 2;
            GlobalizationError.PATTERN_ERROR = 3;

            module.exports = GlobalizationError;
        });
        //pedoMeter: https://github.com/leecrossley/cordova-plugin-pedometer
        cordova.define("cordova-plugin-pedometer", function (require, exports, module) {
            var exec = require("cordova/exec");

            var Pedometer = function () {
                this.name = "Pedometer";
            };

            Pedometer.prototype.isStepCountingAvailable = function (onSuccess, onError) {
                exec(onSuccess, onError, "Pedometer", "isStepCountingAvailable", []);
            };

            Pedometer.prototype.isDistanceAvailable = function (onSuccess, onError) {
                exec(onSuccess, onError, "Pedometer", "isDistanceAvailable", []);
            };

            Pedometer.prototype.isFloorCountingAvailable = function (onSuccess, onError) {
                exec(onSuccess, onError, "Pedometer", "isFloorCountingAvailable", []);
            };

            Pedometer.prototype.startPedometerUpdates = function (onSuccess, onError) {
                exec(onSuccess, onError, "Pedometer", "startPedometerUpdates", []);
            };

            Pedometer.prototype.stopPedometerUpdates = function (onSuccess, onError) {
                exec(onSuccess, onError, "Pedometer", "stopPedometerUpdates", []);
            };

            Pedometer.prototype.queryData = function (onSuccess, onError, options) {
                exec(onSuccess, onError, "Pedometer", "queryData", [options]);
            };

            module.exports = new Pedometer();
        });
        //https://github.com/apache/cordova-plugin-device-motion
        cordova.define("cordova-plugin-device-motion", function (require, exports, module) {
            /*
             *
             * Licensed to the Apache Software Foundation (ASF) under one
             * or more contributor license agreements.  See the NOTICE file
             * distributed with this work for additional information
             * regarding copyright ownership.  The ASF licenses this file
             * to you under the Apache License, Version 2.0 (the
             * "License"); you may not use this file except in compliance
             * with the License.  You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing,
             * software distributed under the License is distributed on an
             * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
             * KIND, either express or implied.  See the License for the
             * specific language governing permissions and limitations
             * under the License.
             *
             */

            /* global cordova */

            /**
             * This class provides access to device accelerometer data.
             * @constructor
             */
            var argscheck = require('cordova/argscheck');
            var utils = require('cordova/utils');
            var exec = require('cordova/exec');

            var Acceleration = function (x, y, z, timestamp) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.timestamp = timestamp || new Date().getTime();
            };

            // Is the accel sensor running?
            var running = false;

            // Keeps reference to watchAcceleration calls.
            var timers = {};

            // Array of listeners; used to keep track of when we should call start and stop.
            var listeners = [];

            // Last returned acceleration object from native
            var accel = null;

            // Timer used when faking up devicemotion events
            var eventTimerId = null;

            // Tells native to start.
            function start() {
                exec(
                    function (a) {
                        var tempListeners = listeners.slice(0);
                        accel = new Acceleration(a.x, a.y, a.z, a.timestamp);
                        for (var i = 0, l = tempListeners.length; i < l; i++) {
                            tempListeners[i].win(accel);
                        }
                    },
                    function (e) {
                        var tempListeners = listeners.slice(0);
                        for (var i = 0, l = tempListeners.length; i < l; i++) {
                            tempListeners[i].fail(e);
                        }
                    },
                    'Accelerometer',
                    'start',
                    []
                );
                running = true;
            }

            // Tells native to stop.
            function stop() {
                exec(null, null, 'Accelerometer', 'stop', []);
                accel = null;
                running = false;
            }

            // Adds a callback pair to the listeners array
            function createCallbackPair(win, fail) {
                return {
                    win: win,
                    fail: fail
                };
            }

            // Removes a win/fail listener pair from the listeners array
            function removeListeners(l) {
                var idx = listeners.indexOf(l);
                if (idx > -1) {
                    listeners.splice(idx, 1);
                    if (listeners.length === 0) {
                        stop();
                    }
                }
            }

            var accelerometer = {
                /**
                 * Asynchronously acquires the current acceleration.
                 *
                 * @param {Function} successCallback    The function to call when the acceleration data is available
                 * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)
                 * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)
                 */
                getCurrentAcceleration: function (successCallback, errorCallback, options) {
                    argscheck.checkArgs('fFO', 'accelerometer.getCurrentAcceleration', arguments);

                    if (cordova.platformId === 'windowsphone') {
                        exec(
                            function (a) {
                                accel = new Acceleration(a.x, a.y, a.z, a.timestamp);
                                successCallback(accel);
                            },
                            function (e) {
                                errorCallback(e);
                            },
                            'Accelerometer',
                            'getCurrentAcceleration',
                            []
                        );

                        return;
                    }

                    if (cordova.platformId === 'browser' && !eventTimerId) {
                        // fire devicemotion event once
                        var devicemotionEvent = new Event('devicemotion');
                        window.setTimeout(function () {
                            window.dispatchEvent(devicemotionEvent);
                        }, 200);
                    }

                    var p;
                    var win = function (a) {
                        removeListeners(p);
                        successCallback(a);
                    };
                    var fail = function (e) {
                        removeListeners(p);
                        if (errorCallback) {
                            errorCallback(e);
                        }
                    };

                    p = createCallbackPair(win, fail);
                    listeners.push(p);

                    if (!running) {
                        start();
                    }
                },

                /**
                 * Asynchronously acquires the acceleration repeatedly at a given interval.
                 *
                 * @param {Function} successCallback    The function to call each time the acceleration data is available
                 * @param {Function} errorCallback      The function to call when there is an error getting the acceleration data. (OPTIONAL)
                 * @param {AccelerationOptions} options The options for getting the accelerometer data such as timeout. (OPTIONAL)
                 * @return String                       The watch id that must be passed to #clearWatch to stop watching.
                 */
                watchAcceleration: function (successCallback, errorCallback, options) {
                    argscheck.checkArgs('fFO', 'accelerometer.watchAcceleration', arguments);
                    // Default interval (10 sec)
                    var frequency = options && options.frequency && typeof options.frequency === 'number' ? options.frequency : 10000;

                    // Keep reference to watch id, and report accel readings as often as defined in frequency
                    var id = utils.createUUID();

                    var p = createCallbackPair(
                        function () { },
                        function (e) {
                            removeListeners(p);
                            if (errorCallback) {
                                errorCallback(e);
                            }
                        }
                    );
                    listeners.push(p);

                    timers[id] = {
                        timer: window.setInterval(function () {
                            if (accel) {
                                successCallback(accel);
                            }
                        }, frequency),
                        listeners: p
                    };

                    if (running) {
                        // If we're already running then immediately invoke the success callback
                        // but only if we have retrieved a value, sample code does not check for null ...
                        if (accel) {
                            successCallback(accel);
                        }
                    } else {
                        start();
                    }

                    if (cordova.platformId === 'browser' && !eventTimerId) {
                        // Start firing devicemotion events if we haven't already
                        var devicemotionEvent = new Event('devicemotion');
                        eventTimerId = window.setInterval(function () {
                            window.dispatchEvent(devicemotionEvent);
                        }, 200);
                    }

                    return id;
                },

                /**
                 * Clears the specified accelerometer watch.
                 *
                 * @param {String} id       The id of the watch returned from #watchAcceleration.
                 */
                clearWatch: function (id) {
                    // Stop javascript timer & remove from timer list
                    if (id && timers[id]) {
                        window.clearInterval(timers[id].timer);
                        removeListeners(timers[id].listeners);
                        delete timers[id];

                        if (eventTimerId && Object.keys(timers).length === 0) {
                            // No more watchers, so stop firing 'devicemotion' events
                            window.clearInterval(eventTimerId);
                            eventTimerId = null;
                        }
                    }
                }
            };
            module.exports = accelerometer;
        });
        if (DronaHQ.onIos || DronaHQ.onAndroid) {
            cordova.define("phonegap-nfc", function (require, exports, module) {
                /*jslint browser: true, unused: vars, quotmark: double */
                /*global cordova, nfc, ndef, blackberry */

                function handleNfcFromIntentFilter() {

                    // This was historically done in cordova.addConstructor but broke with PhoneGap-2.2.0.
                    // We need to handle NFC from an Intent that launched the application, but *after*
                    // the code in the application's deviceready has run.  After upgrading to 2.2.0,
                    // addConstructor was finishing *before* deviceReady was complete and the
                    // ndef listeners had not been registered.
                    // It seems like there should be a better solution.
                    if (cordova.platformId === "android" || cordova.platformId === "windows") {
                        setTimeout(
                            function () {
                                cordova.exec(
                                    function () {
                                        console.log("Initialized the NfcPlugin");
                                    },
                                    function (reason) {
                                        console.log("Failed to initialize the NfcPlugin " + reason);
                                    },
                                    "NfcPlugin", "init", []
                                );
                            }, 10
                        );
                    }
                }

                document.addEventListener('deviceready', handleNfcFromIntentFilter, false);

                var ndef = {

                    // see android.nfc.NdefRecord for documentation about constants
                    // http://developer.android.com/reference/android/nfc/NdefRecord.html
                    TNF_EMPTY: 0x0,
                    TNF_WELL_KNOWN: 0x01,
                    TNF_MIME_MEDIA: 0x02,
                    TNF_ABSOLUTE_URI: 0x03,
                    TNF_EXTERNAL_TYPE: 0x04,
                    TNF_UNKNOWN: 0x05,
                    TNF_UNCHANGED: 0x06,
                    TNF_RESERVED: 0x07,

                    RTD_TEXT: [0x54], // "T"
                    RTD_URI: [0x55], // "U"
                    RTD_SMART_POSTER: [0x53, 0x70], // "Sp"
                    RTD_ALTERNATIVE_CARRIER: [0x61, 0x63], // "ac"
                    RTD_HANDOVER_CARRIER: [0x48, 0x63], // "Hc"
                    RTD_HANDOVER_REQUEST: [0x48, 0x72], // "Hr"
                    RTD_HANDOVER_SELECT: [0x48, 0x73], // "Hs"

                    /**
                     * Creates a JSON representation of a NDEF Record.
                     *
                     * @tnf 3-bit TNF (Type Name Format) - use one of the TNF_* constants
                     * @type byte array, containing zero to 255 bytes, must not be null
                     * @id byte array, containing zero to 255 bytes, must not be null
                     * @payload byte array, containing zero to (2 ** 32 - 1) bytes, must not be null
                     *
                     * @returns JSON representation of a NDEF record
                     *
                     * @see Ndef.textRecord, Ndef.uriRecord and Ndef.mimeMediaRecord for examples
                     */
                    record: function (tnf, type, id, payload) {

                        // handle null values
                        if (!tnf) {
                            tnf = ndef.TNF_EMPTY;
                        }
                        if (!type) {
                            type = [];
                        }
                        if (!id) {
                            id = [];
                        }
                        if (!payload) {
                            payload = [];
                        }

                        // convert strings to arrays
                        if (!(type instanceof Array)) {
                            type = nfc.stringToBytes(type);
                        }
                        if (!(id instanceof Array)) {
                            id = nfc.stringToBytes(id);
                        }
                        if (!(payload instanceof Array)) {
                            payload = nfc.stringToBytes(payload);
                        }

                        return {
                            tnf: tnf,
                            type: type,
                            id: id,
                            payload: payload
                        };
                    },

                    /**
                     * Helper that creates an NDEF record containing plain text.
                     *
                     * @text String of text to encode
                     * @languageCode ISO/IANA language code. Examples: “fi”, “en-US”, “fr- CA”, “jp”. (optional)
                     * @id byte[] (optional)
                     */
                    textRecord: function (text, languageCode, id) {
                        var payload = textHelper.encodePayload(text, languageCode);
                        if (!id) {
                            id = [];
                        }
                        return ndef.record(ndef.TNF_WELL_KNOWN, ndef.RTD_TEXT, id, payload);
                    },

                    /**
                     * Helper that creates a NDEF record containing a URI.
                     *
                     * @uri String
                     * @id byte[] (optional)
                     */
                    uriRecord: function (uri, id) {
                        var payload = uriHelper.encodePayload(uri);
                        if (!id) {
                            id = [];
                        }
                        return ndef.record(ndef.TNF_WELL_KNOWN, ndef.RTD_URI, id, payload);
                    },

                    /**
                     * Helper that creates a NDEF record containing an absolute URI.
                     *
                     * An Absolute URI record means the URI describes the payload of the record.
                     *
                     * For example a SOAP message could use "http://schemas.xmlsoap.org/soap/envelope/"
                     * as the type and XML content for the payload.
                     *
                     * Absolute URI can also be used to write LaunchApp records for Windows.
                     *
                     * See 2.4.2 Payload Type of the NDEF Specification
                     * http://www.nfc-forum.org/specs/spec_list#ndefts
                     *
                     * Note that by default, Android will open the URI defined in the type
                     * field of an Absolute URI record (TNF=3) and ignore the payload.
                     * BlackBerry and Windows do not open the browser for TNF=3.
                     *
                     * To write a URI as the payload use ndef.uriRecord(uri)
                     *
                     * @uri String
                     * @payload byte[] or String
                     * @id byte[] (optional)
                     */
                    absoluteUriRecord: function (uri, payload, id) {
                        if (!id) {
                            id = [];
                        }
                        if (!payload) {
                            payload = [];
                        }
                        return ndef.record(ndef.TNF_ABSOLUTE_URI, uri, id, payload);
                    },

                    /**
                     * Helper that creates a NDEF record containing an mimeMediaRecord.
                     *
                     * @mimeType String
                     * @payload byte[]
                     * @id byte[] (optional)
                     */
                    mimeMediaRecord: function (mimeType, payload, id) {
                        if (!id) {
                            id = [];
                        }
                        return ndef.record(ndef.TNF_MIME_MEDIA, nfc.stringToBytes(mimeType), id, payload);
                    },

                    /**
                     * Helper that creates an NDEF record containing an Smart Poster.
                     *
                     * @ndefRecords array of NDEF Records
                     * @id byte[] (optional)
                     */
                    smartPoster: function (ndefRecords, id) {
                        var payload = [];

                        if (!id) {
                            id = [];
                        }

                        if (ndefRecords) {
                            // make sure we have an array of something like NDEF records before encoding
                            if (ndefRecords[0] instanceof Object && ndefRecords[0].hasOwnProperty('tnf')) {
                                payload = ndef.encodeMessage(ndefRecords);
                            } else {
                                // assume the caller has already encoded the NDEF records into a byte array
                                payload = ndefRecords;
                            }
                        } else {
                            console.log("WARNING: Expecting an array of NDEF records");
                        }

                        return ndef.record(ndef.TNF_WELL_KNOWN, ndef.RTD_SMART_POSTER, id, payload);
                    },

                    /**
                     * Helper that creates an empty NDEF record.
                     *
                     */
                    emptyRecord: function () {
                        return ndef.record(ndef.TNF_EMPTY, [], [], []);
                    },

                    /**
                     * Helper that creates an Android Application Record (AAR).
                     * http://developer.android.com/guide/topics/connectivity/nfc/nfc.html#aar
                     *
                     */
                    androidApplicationRecord: function (packageName) {
                        return ndef.record(ndef.TNF_EXTERNAL_TYPE, "android.com:pkg", [], packageName);
                    },

                    /**
                     * Encodes an NDEF Message into bytes that can be written to a NFC tag.
                     *
                     * @ndefRecords an Array of NDEF Records
                     *
                     * @returns byte array
                     *
                     * @see NFC Data Exchange Format (NDEF) http://www.nfc-forum.org/specs/spec_list/
                     */
                    encodeMessage: function (ndefRecords) {

                        var encoded = [],
                            tnf_byte,
                            type_length,
                            payload_length,
                            id_length,
                            i,
                            mb, me, // messageBegin, messageEnd
                            cf = false, // chunkFlag TODO implement
                            sr, // boolean shortRecord
                            il; // boolean idLengthFieldIsPresent

                        for (i = 0; i < ndefRecords.length; i++) {

                            mb = (i === 0);
                            me = (i === (ndefRecords.length - 1));
                            sr = (ndefRecords[i].payload.length < 0xFF);
                            il = (ndefRecords[i].id.length > 0);
                            tnf_byte = ndef.encodeTnf(mb, me, cf, sr, il, ndefRecords[i].tnf);
                            encoded.push(tnf_byte);

                            type_length = ndefRecords[i].type.length;
                            encoded.push(type_length);

                            if (sr) {
                                payload_length = ndefRecords[i].payload.length;
                                encoded.push(payload_length);
                            } else {
                                payload_length = ndefRecords[i].payload.length;
                                // 4 bytes
                                encoded.push((payload_length >> 24));
                                encoded.push((payload_length >> 16));
                                encoded.push((payload_length >> 8));
                                encoded.push((payload_length & 0xFF));
                            }

                            if (il) {
                                id_length = ndefRecords[i].id.length;
                                encoded.push(id_length);
                            }

                            encoded = encoded.concat(ndefRecords[i].type);

                            if (il) {
                                encoded = encoded.concat(ndefRecords[i].id);
                            }

                            encoded = encoded.concat(ndefRecords[i].payload);
                        }

                        return encoded;
                    },

                    /**
                     * Decodes an array bytes into an NDEF Message
                     *
                     * @bytes an array bytes read from a NFC tag
                     *
                     * @returns array of NDEF Records
                     *
                     * @see NFC Data Exchange Format (NDEF) http://www.nfc-forum.org/specs/spec_list/
                     */
                    decodeMessage: function (ndefBytes) {

                        var bytes = ndefBytes.slice(0), // clone since parsing is destructive
                            ndef_message = [],
                            tnf_byte,
                            header,
                            type_length = 0,
                            payload_length = 0,
                            id_length = 0,
                            record_type = [],
                            id = [],
                            payload = [];

                        while (bytes.length) {
                            tnf_byte = bytes.shift();
                            header = ndef.decodeTnf(tnf_byte);

                            type_length = bytes.shift();

                            if (header.sr) {
                                payload_length = bytes.shift();
                            } else {
                                // next 4 bytes are length
                                payload_length = ((0xFF & bytes.shift()) << 24) |
                                    ((0xFF & bytes.shift()) << 26) |
                                    ((0xFF & bytes.shift()) << 8) |
                                    (0xFF & bytes.shift());
                            }

                            if (header.il) {
                                id_length = bytes.shift();
                            }

                            record_type = bytes.splice(0, type_length);
                            id = bytes.splice(0, id_length);
                            payload = bytes.splice(0, payload_length);

                            ndef_message.push(
                                ndef.record(header.tnf, record_type, id, payload)
                            );

                            if (header.me) {
                                break;
                            } // last message
                        }

                        return ndef_message;
                    },

                    /**
                     * Decode the bit flags from a TNF Byte.
                     *
                     * @returns object with decoded data
                     *
                     *  See NFC Data Exchange Format (NDEF) Specification Section 3.2 RecordLayout
                     */
                    decodeTnf: function (tnf_byte) {
                        return {
                            mb: (tnf_byte & 0x80) !== 0,
                            me: (tnf_byte & 0x40) !== 0,
                            cf: (tnf_byte & 0x20) !== 0,
                            sr: (tnf_byte & 0x10) !== 0,
                            il: (tnf_byte & 0x8) !== 0,
                            tnf: (tnf_byte & 0x7)
                        };
                    },

                    /**
                     * Encode NDEF bit flags into a TNF Byte.
                     *
                     * @returns tnf byte
                     *
                     *  See NFC Data Exchange Format (NDEF) Specification Section 3.2 RecordLayout
                     */
                    encodeTnf: function (mb, me, cf, sr, il, tnf) {

                        var value = tnf;

                        if (mb) {
                            value = value | 0x80;
                        }

                        if (me) {
                            value = value | 0x40;
                        }

                        // note if cf: me, mb, li must be false and tnf must be 0x6
                        if (cf) {
                            value = value | 0x20;
                        }

                        if (sr) {
                            value = value | 0x10;
                        }

                        if (il) {
                            value = value | 0x8;
                        }

                        return value;
                    },

                    /**
                     * Convert TNF to String for user friendly display
                     *
                     */
                    tnfToString: function (tnf) {
                        var value = tnf;

                        switch (tnf) {
                            case ndef.TNF_EMPTY:
                                value = "Empty";
                                break;
                            case ndef.TNF_WELL_KNOWN:
                                value = "Well Known";
                                break;
                            case ndef.TNF_MIME_MEDIA:
                                value = "Mime Media";
                                break;
                            case ndef.TNF_ABSOLUTE_URI:
                                value = "Absolute URI";
                                break;
                            case ndef.TNF_EXTERNAL_TYPE:
                                value = "External";
                                break;
                            case ndef.TNF_UNKNOWN:
                                value = "Unknown";
                                break;
                            case ndef.TNF_UNCHANGED:
                                value = "Unchanged";
                                break;
                            case ndef.TNF_RESERVED:
                                value = "Reserved";
                                break;
                        }
                        return value;
                    }

                };

                // nfc provides javascript wrappers to the native phonegap implementation
                var nfc = {

                    multiCallbackTest: function (success, failure) {
                        cordova.exec(success, failure, "NfcPlugin", "multiCallbackTest", []);
                    },

                    // multiCallbackTest: function(success, failure) {
                    //     //cordova.exec(success, failure, "NfcPlugin", "multiCallbackTest", []);
                    //     setInterval(failure, 10000, 'Test from JavaScript!');
                    // },

                    addTagDiscoveredListener: function (callback, win, fail) {
                        document.addEventListener("tag", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "registerTag", []);
                    },

                    addMimeTypeListener: function (mimeType, callback, win, fail) {
                        document.addEventListener("ndef-mime", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "registerMimeType", [mimeType]);
                    },

                    addNdefListener: function (callback, win, fail) {
                        document.addEventListener("ndef", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "registerNdef", []);
                    },

                    addNdefFormatableListener: function (callback, win, fail) {
                        document.addEventListener("ndef-formatable", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "registerNdefFormatable", []);
                    },

                    write: function (ndefMessage, win, fail, options) {

                        if (cordova.platformId === "ios") {
                            cordova.exec(win, fail, "NfcPlugin", "writeTag", [ndefMessage, options]);
                        } else {
                            cordova.exec(win, fail, "NfcPlugin", "writeTag", [ndefMessage]);
                        }
                    },

                    makeReadOnly: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "makeReadOnly", []);
                    },

                    share: function (ndefMessage, win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "shareTag", [ndefMessage]);
                    },

                    unshare: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "unshareTag", []);
                    },

                    handover: function (uris, win, fail) {
                        // if we get a single URI, wrap it in an array
                        if (!Array.isArray(uris)) {
                            uris = [uris];
                        }
                        cordova.exec(win, fail, "NfcPlugin", "handover", uris);
                    },

                    stopHandover: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "stopHandover", []);
                    },

                    erase: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "eraseTag", [
                            []
                        ]);
                    },

                    enabled: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "enabled", [
                            []
                        ]);
                    },

                    removeTagDiscoveredListener: function (callback, win, fail) {
                        document.removeEventListener("tag", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "removeTag", []);
                    },

                    removeMimeTypeListener: function (mimeType, callback, win, fail) {
                        document.removeEventListener("ndef-mime", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "removeMimeType", [mimeType]);
                    },

                    removeNdefListener: function (callback, win, fail) {
                        document.removeEventListener("ndef", callback, false);
                        cordova.exec(win, fail, "NfcPlugin", "removeNdef", []);
                    },

                    showSettings: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "showSettings", []);
                    },

                    // iOS only - scan for NFC NDEF tag using NFCNDEFReaderSession
                    scanNdef: function (options) {
                        return new Promise(function (resolve, reject) {
                            cordova.exec(resolve, reject, "NfcPlugin", "scanNdef", [options]);
                        });
                    },

                    // iOS only - scan for NFC Tag using NFCTagReaderSession
                    scanTag: function (options) {
                        return new Promise(function (resolve, reject) {
                            cordova.exec(resolve, reject, "NfcPlugin", "scanTag", [options]);
                        });
                    },

                    // iOS only - cancel NFC scan session
                    cancelScan: function () {
                        return new Promise(function (resolve, reject) {
                            cordova.exec(resolve, reject, "NfcPlugin", "cancelScan", []);
                        });
                    },

                    // iOS only - deprecated use scanNdef or scanTag
                    beginSession: function (win, fail) {
                        // cordova.exec(win, fail, "NfcPlugin", "beginSession", []);
                        cordova.exec(win, fail, "NfcPlugin", "beginSession", []);
                    },

                    // iOS only - deprecated use cancelScan
                    invalidateSession: function (win, fail) {
                        cordova.exec(win, fail, "NfcPlugin", "invalidateSession", []);
                    },

                    // connect to begin transceive
                    connect: function (tech, timeout) {
                        return new Promise(function (resolve, reject) {
                            cordova.exec(resolve, reject, 'NfcPlugin', 'connect', [tech, timeout]);
                        });
                    },

                    // close transceive connection
                    close: function () {
                        return new Promise(function (resolve, reject) {
                            cordova.exec(resolve, reject, 'NfcPlugin', 'close', []);
                        });
                    },

                    // data - ArrayBuffer or string of hex data for transcieve
                    // the results of transceive are returned in the promise success as an ArrayBuffer
                    transceive: function (data) {
                        return new Promise(function (resolve, reject) {

                            var buffer;
                            if (typeof data === 'string') {
                                buffer = util.hexStringToArrayBuffer(data);
                            } else if (data instanceof ArrayBuffer) {
                                buffer = data;
                            } else if (data instanceof Uint8Array) {
                                buffer = data.buffer;
                            } else {
                                reject("Expecting an ArrayBuffer or String");
                            }

                            cordova.exec(resolve, reject, 'NfcPlugin', 'transceive', [buffer]);
                        });
                    },

                    // Android NfcAdapter.enableReaderMode flags 
                    FLAG_READER_NFC_A: 0x1,
                    FLAG_READER_NFC_B: 0x2,
                    FLAG_READER_NFC_F: 0x4,
                    FLAG_READER_NFC_V: 0x8,
                    FLAG_READER_NFC_BARCODE: 0x10,
                    FLAG_READER_SKIP_NDEF_CHECK: 0x80,
                    FLAG_READER_NO_PLATFORM_SOUNDS: 0x100,

                    // Android NfcAdapter.enabledReaderMode
                    readerMode: function (flags, readCallback, errorCallback) {
                        cordova.exec(readCallback, errorCallback, 'NfcPlugin', 'readerMode', [flags]);
                    },

                    disableReaderMode: function (successCallback, errorCallback) {
                        cordova.exec(successCallback, errorCallback, 'NfcPlugin', 'disableReaderMode', []);
                    }

                };

                var util = {
                    // i must be <= 256
                    toHex: function (i) {
                        var hex;

                        if (i < 0) {
                            i += 256;
                        }

                        hex = i.toString(16);

                        // zero padding
                        if (hex.length === 1) {
                            hex = "0" + hex;
                        }

                        return hex;
                    },

                    toPrintable: function (i) {

                        if (i >= 0x20 & i <= 0x7F) {
                            return String.fromCharCode(i);
                        } else {
                            return '.';
                        }
                    },

                    bytesToString: function (bytes) {
                        // based on http://ciaranj.blogspot.fr/2007/11/utf8-characters-encoding-in-javascript.html

                        var result = "";
                        var i, c, c1, c2, c3;
                        i = c = c1 = c2 = c3 = 0;

                        // Perform byte-order check.
                        if (bytes.length >= 3) {
                            if ((bytes[0] & 0xef) == 0xef && (bytes[1] & 0xbb) == 0xbb && (bytes[2] & 0xbf) == 0xbf) {
                                // stream has a BOM at the start, skip over
                                i = 3;
                            }
                        }

                        while (i < bytes.length) {
                            c = bytes[i] & 0xff;

                            if (c < 128) {

                                result += String.fromCharCode(c);
                                i++;

                            } else if ((c > 191) && (c < 224)) {

                                if (i + 1 >= bytes.length) {
                                    throw "Un-expected encoding error, UTF-8 stream truncated, or incorrect";
                                }
                                c2 = bytes[i + 1] & 0xff;
                                result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                                i += 2;

                            } else {

                                if (i + 2 >= bytes.length || i + 1 >= bytes.length) {
                                    throw "Un-expected encoding error, UTF-8 stream truncated, or incorrect";
                                }
                                c2 = bytes[i + 1] & 0xff;
                                c3 = bytes[i + 2] & 0xff;
                                result += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                                i += 3;

                            }
                        }
                        return result;
                    },

                    stringToBytes: function (string) {
                        // based on http://ciaranj.blogspot.fr/2007/11/utf8-characters-encoding-in-javascript.html

                        var bytes = [];

                        for (var n = 0; n < string.length; n++) {

                            var c = string.charCodeAt(n);

                            if (c < 128) {

                                bytes[bytes.length] = c;

                            } else if ((c > 127) && (c < 2048)) {

                                bytes[bytes.length] = (c >> 6) | 192;
                                bytes[bytes.length] = (c & 63) | 128;

                            } else {

                                bytes[bytes.length] = (c >> 12) | 224;
                                bytes[bytes.length] = ((c >> 6) & 63) | 128;
                                bytes[bytes.length] = (c & 63) | 128;

                            }

                        }

                        return bytes;
                    },

                    bytesToHexString: function (bytes) {
                        var dec, hexstring, bytesAsHexString = "";
                        for (var i = 0; i < bytes.length; i++) {
                            if (bytes[i] >= 0) {
                                dec = bytes[i];
                            } else {
                                dec = 256 + bytes[i];
                            }
                            hexstring = dec.toString(16);
                            // zero padding
                            if (hexstring.length === 1) {
                                hexstring = "0" + hexstring;
                            }
                            bytesAsHexString += hexstring;
                        }
                        return bytesAsHexString;
                    },

                    // This function can be removed if record.type is changed to a String
                    /**
                     * Returns true if the record's TNF and type matches the supplied TNF and type.
                     *
                     * @record NDEF record
                     * @tnf 3-bit TNF (Type Name Format) - use one of the TNF_* constants
                     * @type byte array or String
                     */
                    isType: function (record, tnf, type) {
                        if (record.tnf === tnf) { // TNF is 3-bit
                            var recordType;
                            if (typeof (type) === 'string') {
                                recordType = type;
                            } else {
                                recordType = nfc.bytesToString(type);
                            }
                            return (nfc.bytesToString(record.type) === recordType);
                        }
                        return false;
                    },

                    /**
                     * Convert an ArrayBuffer to a hex string
                     *
                     * @param {ArrayBuffer} buffer
                     * @returns {srting} - hex representation of bytes e.g. 000407AF 
                     */
                    arrayBufferToHexString: function (buffer) {
                        function toHexString(byte) {
                            return ('0' + (byte & 0xFF).toString(16)).slice(-2);
                        }
                        var typedArray = new Uint8Array(buffer);
                        var array = Array.from(typedArray); // need to convert to [] so our map result is not typed
                        var parts = array.map(function (i) {
                            return toHexString(i)
                        });

                        return parts.join('');
                    },

                    /**
                     * Convert a hex string to an ArrayBuffer.
                     *
                     * @param {string} hexString - hex representation of bytes
                     * @return {ArrayBuffer} - The bytes in an ArrayBuffer.
                     */
                    hexStringToArrayBuffer: function (hexString) {

                        // remove any delimiters - space, dash, or colon
                        hexString = hexString.replace(/[\s-:]/g, '');

                        // remove the leading 0x
                        hexString = hexString.replace(/^0x/, '');

                        // ensure even number of characters
                        if (hexString.length % 2 != 0) {
                            console.log('WARNING: expecting an even number of characters in the hexString');
                        }

                        // check for some non-hex characters
                        var bad = hexString.match(/[G-Z\s]/i);
                        if (bad) {
                            console.log('WARNING: found non-hex characters', bad);
                        }

                        // split the string into pairs of octets
                        var pairs = hexString.match(/[\dA-F]{2}/gi);

                        // convert the octets to integers
                        var ints = pairs.map(function (s) {
                            return parseInt(s, 16)
                        });

                        var array = new Uint8Array(ints);
                        return array.buffer;
                    }

                };

                // this is a module in ndef-js
                var textHelper = {

                    decodePayload: function (data) {

                        var languageCodeLength = (data[0] & 0x3F), // 6 LSBs
                            languageCode = data.slice(1, 1 + languageCodeLength),
                            utf16 = (data[0] & 0x80) !== 0; // assuming UTF-16BE

                        // TODO need to deal with UTF in the future
                        if (utf16) {
                            console.log('WARNING: utf-16 data may not be handled properly for', languageCode);
                        }
                        // Use TextDecoder when we have enough browser support
                        // new TextDecoder('utf-8').decode(data.slice(languageCodeLength + 1));
                        // new TextDecoder('utf-16').decode(data.slice(languageCodeLength + 1));

                        return util.bytesToString(data.slice(languageCodeLength + 1));
                    },

                    // encode text payload
                    // @returns an array of bytes
                    encodePayload: function (text, lang, encoding) {

                        // ISO/IANA language code, but we're not enforcing
                        if (!lang) {
                            lang = 'en';
                        }

                        var encoded = util.stringToBytes(lang + text);
                        encoded.unshift(lang.length);

                        return encoded;
                    }

                };

                // this is a module in ndef-js
                var uriHelper = {
                    // URI identifier codes from URI Record Type Definition NFCForum-TS-RTD_URI_1.0 2006-07-24
                    // index in array matches code in the spec
                    protocols: ["", "http://www.", "https://www.", "http://", "https://", "tel:", "mailto:", "ftp://anonymous:anonymous@", "ftp://ftp.", "ftps://", "sftp://", "smb://", "nfs://", "ftp://", "dav://", "news:", "telnet://", "imap:", "rtsp://", "urn:", "pop:", "sip:", "sips:", "tftp:", "btspp://", "btl2cap://", "btgoep://", "tcpobex://", "irdaobex://", "file://", "urn:epc:id:", "urn:epc:tag:", "urn:epc:pat:", "urn:epc:raw:", "urn:epc:", "urn:nfc:"],

                    // decode a URI payload bytes
                    // @returns a string
                    decodePayload: function (data) {
                        var prefix = uriHelper.protocols[data[0]];
                        if (!prefix) { // 36 to 255 should be ""
                            prefix = "";
                        }
                        return prefix + util.bytesToString(data.slice(1));
                    },

                    // shorten a URI with standard prefix
                    // @returns an array of bytes
                    encodePayload: function (uri) {

                        var prefix,
                            protocolCode,
                            encoded;

                        // check each protocol, unless we've found a match
                        // "urn:" is the one exception where we need to keep checking
                        // slice so we don't check ""
                        uriHelper.protocols.slice(1).forEach(function (protocol) {
                            if ((!prefix || prefix === "urn:") && uri.indexOf(protocol) === 0) {
                                prefix = protocol;
                            }
                        });

                        if (!prefix) {
                            prefix = "";
                        }

                        encoded = util.stringToBytes(uri.slice(prefix.length));
                        protocolCode = uriHelper.protocols.indexOf(prefix);
                        // prepend protocol code
                        encoded.unshift(protocolCode);

                        return encoded;
                    }
                };

                // added since WP8 must call a named function, also used by iOS
                // TODO consider switching NFC events from JS events to using the PG callbacks
                function fireNfcTagEvent(eventType, tagAsJson) {
                    setTimeout(function () {
                        var e = document.createEvent('Events');
                        e.initEvent(eventType, true, false);
                        e.tag = JSON.parse(tagAsJson);
                        console.log(e.tag);
                        document.dispatchEvent(e);
                    }, 10);
                }

                // textHelper and uriHelper aren't exported, add a property
                ndef.uriHelper = uriHelper;
                ndef.textHelper = textHelper;

                // create aliases
                nfc.bytesToString = util.bytesToString;
                nfc.stringToBytes = util.stringToBytes;
                nfc.bytesToHexString = util.bytesToHexString;

                // kludge some global variables for plugman js-module support

                // This channel receives nfcEvent data from native code 
                // and fires JavaScript events.
                require('cordova/channel').onCordovaReady.subscribe(function () {
                    require('cordova/exec')(success, null, 'NfcPlugin', 'channel', []);

                    function success(message) {
                        if (!message.type) {
                            console.log(message);
                        } else {
                            console.log("Received NFC data, firing '" + message.type + "' event");
                            var e = document.createEvent('Events');
                            e.initEvent(message.type);
                            e.tag = message.tag;
                            document.dispatchEvent(e);
                        }
                    }
                });

                // blackberry requires the com.blackberry.invoke plugin installed

                // you need to edit config.xml for your app and add an invoke-target
                // <rim:invoke-target id="com.chariotsolutions.nfc.demo.reader.target">
                //     <type>APPLICATION</type>
                //     <filter>
                //         <action>bb.action.OPEN</action>
                //         <mime-type>application/vnd.rim.nfc.ndef</mime-type>
                //         <property value="ndef://0,ndef://1,ndef://2,ndef://3,ndef://4" var="uris" />
                //     </filter>
                // </rim:invoke-target>

                // clobber existing share function
                nfc.share = function (ndefMessage, success, failure) {
                    "use strict";
                    var byteArray = ndef.encodeMessage(ndefMessage),
                        dataString = "",
                        data,
                        query;

                    for (var i = 0; i < byteArray.length; ++i) {
                        dataString += String.fromCharCode(byteArray[i]);
                    }
                    data = btoa(dataString);

                    query = {
                        "action": "bb.action.SHARE",
                        "type": "application/vnd.rim.nfc.ndef",
                        "target": "sys.NFCViewer",
                        "data": data
                    };

                    // previously we used the invoke plugin, but now it encodes improperly
                    // blackberry.invoke.invoke(query, success, failure);

                    // call native invoke directly
                    cordova.exec(success, failure, "com.blackberry.invoke", "invoke", {
                        request: query
                    });
                };

                // clobber existing unshare function
                nfc.unshare = function (success, failure) {
                    "use strict";
                    blackberry.invoke.closeChildCard();
                    if (success) { // no idea if it worked. assume success.
                        success();
                    }
                };

                // clobber existing showSettings function
                nfc.showSettings = function (success, failure) {
                    "use strict";
                    blackberry.invoke.invoke({
                        uri: "settings://nfc"
                    }, success, failure);
                }

                // takes an ndefMessage from the success callback and fires a javascript event
                var proxy = function (ndefMessageAsString) {
                    "use strict";
                    var ndefMessage = JSON.parse(ndefMessageAsString);
                    cordova.fireDocumentEvent("ndef", {
                        type: "ndef",
                        tag: {
                            ndefMessage: ndefMessage
                        }
                    });
                };

                // clobber existing addNdefListener function
                nfc.addNdefListener = function (callback, success, failure) {
                    "use strict";
                    document.addEventListener("ndef", callback, false);
                    cordova.exec(proxy, failure, "phonegap-nfc", "registerNdef", []);
                    success(); // assume success
                };

                module.exports = {
                    nfc: nfc,
                    ndef: ndef,
                    util: util,
                    fireNfcTagEvent: fireNfcTagEvent
                }
            });
            cordova.define("cordova-plugin-gyroscope", function (require, exports, module) {
                // Copyright (c) 2014, the Dart project authors.  Please see the AUTHORS file
                // for details. All rights reserved. Use of this source code is governed by a
                // BSD-style license that can be found in the LICENSE file.

                /**
                 * This class provides access to device gyroscope data.
                 * @constructor
                 */
                var argscheck = require('cordova/argscheck'),
                    utils = require("cordova/utils"),
                    exec = require("cordova/exec");


                var Orientation = function (x, y, z, timestamp) {
                    this.x = x;
                    this.y = y;
                    this.z = z;
                    this.timestamp = timestamp || (new Date()).getTime();
                };
                // Is the gyroscope sensor running?
                var running = false;

                // Keeps reference to watch calls.
                var timers = {};

                // Array of listeners; used to keep track of when we should call start and stop.
                var listeners = [];
                var eventTimerId = null;

                // Last returned speed object from native
                var speed = null;

                // Tells native to start.
                function start() {
                    exec(function (a) {
                        var tempListeners = listeners.slice(0);
                        speed = new Orientation(a.x, a.y, a.z, a.timestamp);
                        for (var i = 0, l = tempListeners.length; i < l; i++) {
                            tempListeners[i].win(speed);
                        }
                    }, function (e) {
                        var tempListeners = listeners.slice(0);
                        for (var i = 0, l = tempListeners.length; i < l; i++) {
                            tempListeners[i].fail(e);
                        }
                    }, "Gyroscope", "start", []);
                    running = true;
                }

                // Tells native to stop.
                function stop() {
                    exec(null, null, "Gyroscope", "stop", []);
                    running = false;
                }

                // Adds a callback pair to the listeners array
                function createCallbackPair(win, fail) {
                    return {
                        win: win,
                        fail: fail
                    };
                }

                // Removes a win/fail listener pair from the listeners array
                function removeListeners(l) {
                    var idx = listeners.indexOf(l);
                    if (idx > -1) {
                        listeners.splice(idx, 1);
                        if (listeners.length === 0) {
                            stop();
                        }
                    }
                }

                var gyroscope = {
                    /**
                     * Asynchronously acquires the current speed.
                     *
                     * @param {Function} successCallback    The function to call when the speed data is available
                     * @param {Function} errorCallback      The function to call when there is an error getting the speed data. (OPTIONAL)
                     * @param {GyroscopeOptions} options    The options for getting the gyroscope data such as frequency. (OPTIONAL)
                     */
                    getCurrent: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'gyroscope.getCurrent', arguments);

                        var p;
                        var win = function (a) {
                            removeListeners(p);
                            successCallback(a);
                        };
                        var fail = function (e) {
                            removeListeners(p);
                            errorCallback && errorCallback(e);
                        };

                        p = createCallbackPair(win, fail);
                        listeners.push(p);

                        if (!running) {
                            start();
                        }
                    },

                    /**
                     * Asynchronously acquires the speed repeatedly at a given interval.
                     *
                     * @param {Function} successCallback    The function to call each time the speed data is available
                     * @param {Function} errorCallback      The function to call when there is an error getting the speed data. (OPTIONAL)
                     * @param {GyroscopeOptions} options    The options for getting the gyroscope data such as frequency. (OPTIONAL)
                     * @return String                       The watch id that must be passed to #clearWatch to stop watching.
                     */
                    watch: function (successCallback, errorCallback, options) {
                        argscheck.checkArgs('fFO', 'gyroscope.watch', arguments);
                        // Default interval (10 sec)
                        var frequency = (options && options.frequency && typeof options.frequency == 'number') ? options.frequency : 10000;

                        // Keep reference to watch id, and report speed readings as often as defined in frequency
                        var id = utils.createUUID();

                        var p = createCallbackPair(function () { }, function (e) {
                            removeListeners(p);
                            errorCallback && errorCallback(e);
                        });
                        listeners.push(p);

                        timers[id] = {
                            timer: window.setInterval(function () {
                                if (speed) {
                                    successCallback(speed);
                                }
                            }, frequency),
                            listeners: p
                        };

                        if (running) {
                            // If we're already running then immediately invoke the success callback
                            // but only if we have retrieved a value, sample code does not check for null ...
                            if (speed) {
                                successCallback(speed);
                            }
                        } else {
                            start();
                        }

                        if (cordova.platformId === "browser" && !eventTimerId) {
                            // Start firing devicemotion events if we haven't already
                            var devicegyroEvent = new Event('devicegyro');
                            eventTimerId = window.setInterval(function () {
                                window.dispatchEvent(devicegyroEvent);
                            }, 200);
                        }

                        return id;
                    },

                    /**
                     * Clears the specified gyroscope watch.
                     *
                     * @param {String} id       The id of the watch returned from #watch.
                     */
                    clearWatch: function (id) {
                        // Stop javascript timer & remove from timer list
                        if (id && timers[id]) {
                            window.clearInterval(timers[id].timer);
                            removeListeners(timers[id].listeners);
                            delete timers[id];

                            if (eventTimerId && Object.keys(timers).length === 0) {
                                // No more watchers, so stop firing 'devicemotion' events
                                window.clearInterval(eventTimerId);
                                eventTimerId = null;
                            }
                        }
                    }
                };
                module.exports = gyroscope;
            })
            cordova.define("cordova-plugin-geofence", function (require, exports, module) {
                var exec = require("cordova/exec");
                var channel = require("cordova/channel");
                var TransitionType = {
                    ENTER: 1,
                    EXIT: 2,
                    BOTH: 3,
                };
                var isIOS = cordova.platformId === "ios"

                function addOrUpdateIOS(geofences, success, error) {
                    var promises = geofences.map(function (geofence) {
                        return execPromise(null, null, "GeofencePlugin", "addOrUpdate", [geofence]);
                    });

                    return Promise
                        .all(promises)
                        .then(function (results) {
                            if (typeof success === "function") {
                                success(results);
                            }
                            return results;
                        })
                        .catch(function (reason) {
                            if (typeof error === "function") {
                                error(reason);
                            }
                            throw reason;
                        });
                }

                module.exports = {
                    /**
                     * Initializing geofence plugin
                     *
                     * @name initialize
                     * @param  {Function} success callback
                     * @param  {Function} error callback
                     *
                     * @return {Promise}
                     */
                    initialize: function (success, error) {
                        return execPromise(success, error, "GeofencePlugin", "initialize", []);
                    },
                    /**
                     * Adding new geofence to monitor.
                     * Geofence could override the previously one with the same id.
                     *
                     * @name addOrUpdate
                     * @param {Geofence|Array} geofences
                     * @param {Function} success callback
                     * @param {Function} error callback
                     *
                     * @return {Promise}
                     */
                    addOrUpdate: function (geofences, success, error) {
                        if (!Array.isArray(geofences)) {
                            geofences = [geofences];
                        }

                        geofences.forEach(coerceProperties);

                        if (isIOS) {
                            return addOrUpdateIOS(geofences, success, error);
                        }

                        return execPromise(success, error, "GeofencePlugin", "addOrUpdate", geofences);
                    },
                    /**
                     * Removing geofences with given ids
                     *
                     * @name  remove
                     * @param  {Number|Array} ids
                     * @param  {Function} success callback
                     * @param  {Function} error callback
                     * @return {Promise}
                     */
                    remove: function (ids, success, error) {
                        if (!Array.isArray(ids)) {
                            ids = [ids];
                        }
                        return execPromise(success, error, "GeofencePlugin", "remove", ids);
                    },
                    /**
                     * removing all stored geofences on the device
                     *
                     * @name  removeAll
                     * @param  {Function} success callback
                     * @param  {Function} error callback
                     * @return {Promise}
                     */
                    removeAll: function (success, error) {
                        return execPromise(success, error, "GeofencePlugin", "removeAll", []);
                    },
                    /**
                     * Getting all watched geofences from the device
                     *
                     * @name  getWatched
                     * @param  {Function} success callback
                     * @param  {Function} error callback
                     * @return {Promise} if successful returns geofences array stringify to JSON
                     */
                    getWatched: function (success, error) {
                        return execPromise(success, error, "GeofencePlugin", "getWatched", []);
                    },
                    /**
                     * Called when app is opened via Notification bar
                     *
                     * @name onNotificationClicked
                     * @param {JSON} notificationData user data from notification
                     */
                    onNotificationClicked: function (notificationData) { },
                    /**
                     * Called when app received geofence transition event
                     * @param  {Array} geofences
                     */
                    onTransitionReceived: function (geofences) {
                        this.receiveTransition(geofences);
                    },
                    /**
                     * Called when app received geofence transition event
                     * @deprecated since version 0.4.0, see onTransitionReceived
                     * @param  {Array} geofences
                     */
                    receiveTransition: function (geofences) { },
                    /**
                     * Simple ping function for testing
                     * @param  {Function} success callback
                     * @param  {Function} error callback
                     *
                     * @return {Promise}
                     */
                    ping: function (success, error) {
                        return execPromise(success, error, "GeofencePlugin", "ping", []);
                    }
                };

                function execPromise(success, error, pluginName, method, args) {
                    return new Promise(function (resolve, reject) {
                        exec(function (result) {
                            resolve(result);
                            if (typeof success === "function") {
                                success(result);
                            }
                        },
                            function (reason) {
                                reject(reason);
                                if (typeof error === "function") {
                                    error(reason);
                                }
                            },
                            pluginName,
                            method,
                            args);
                    });
                }

                function coerceProperties(geofence) {
                    if (geofence.id) {
                        geofence.id = geofence.id.toString();
                    } else {
                        throw new Error("Geofence id is not provided");
                    }

                    if (geofence.latitude) {
                        geofence.latitude = coerceNumber("Geofence latitude", geofence.latitude);
                    } else {
                        throw new Error("Geofence latitude is not provided");
                    }

                    if (geofence.longitude) {
                        geofence.longitude = coerceNumber("Geofence longitude", geofence.longitude);
                    } else {
                        throw new Error("Geofence longitude is not provided");
                    }

                    if (geofence.radius) {
                        geofence.radius = coerceNumber("Geofence radius", geofence.radius);
                    } else {
                        throw new Error("Geofence radius is not provided");
                    }

                    if (geofence.transitionType) {
                        geofence.transitionType = coerceNumber("Geofence transitionType", geofence.transitionType);
                    } else {
                        throw new Error("Geofence transitionType is not provided");
                    }

                    if (geofence.notification) {
                        if (geofence.notification.id) {
                            geofence.notification.id = coerceNumber("Geofence notification.id", geofence.notification.id);
                        }

                        if (geofence.notification.title) {
                            geofence.notification.title = geofence.notification.title.toString();
                        }

                        if (geofence.notification.text) {
                            geofence.notification.text = geofence.notification.text.toString();
                        }

                        if (geofence.notification.smallIcon) {
                            geofence.notification.smallIcon = geofence.notification.smallIcon.toString();
                        }

                        if (geofence.notification.openAppOnClick) {
                            geofence.notification.openAppOnClick = coerceBoolean("Geofence notification.openAppOnClick", geofence.notification.openAppOnClick);
                        }

                        if (geofence.notification.vibration) {
                            if (Array.isArray(geofence.notification.vibration)) {
                                for (var i = 0; i < geofence.notification.vibration.length; i++) {
                                    geofence.notification.vibration[i] = coerceInteger("Geofence notification.vibration[" + i + "]", geofence.notification.vibration[i]);
                                }
                            } else {
                                throw new Error("Geofence notification.vibration is not an Array");
                            }
                        }
                    }
                }

                function coerceNumber(name, value) {
                    if (typeof (value) !== "number") {
                        console.warn(name + " is not a number, trying to convert to number");
                        value = Number(value);

                        if (isNaN(value)) {
                            throw new Error("Cannot convert " + name + " to number");
                        }
                    }

                    return value;
                }

                function coerceInteger(name, value) {
                    if (!isInt(value)) {
                        console.warn(name + " is not an integer, trying to convert to integer");
                        value = parseInt(value);

                        if (isNaN(value)) {
                            throw new Error("Cannot convert " + name + " to integer");
                        }
                    }

                    return value;
                }

                function coerceBoolean(name, value) {
                    if (typeof (value) !== "boolean") {
                        console.warn(name + " is not a boolean value, converting to boolean");
                        value = Boolean(value);
                    }

                    return value;
                }

                function isInt(n) {
                    return Number(n) === n && n % 1 === 0;
                }

                // Called after "deviceready" event
                channel.deviceready.subscribe(function () {
                    // Device is ready now, the listeners are registered
                    // and all queued events can be executed.
                    exec(null, null, "GeofencePlugin", "deviceReady", []);
                });
            })
            cordova.define("cordova-background-geolocation-plugin", function (require, exports, module) {
                /*
                According to apache license
                This is fork of christocracy cordova-plugin-background-geolocation plugin
                https://github.com/christocracy/cordova-plugin-background-geolocation
                Differences to original version:
                1. new method isLocationEnabled
                */

                var exec = require('cordova/exec');
                var channel = require('cordova/channel');
                var TAG = 'CDVBackgroundGeolocation';
                var radio = (function (name, global, definition) {
                    if (typeof module !== 'undefined') module.exports = definition(name, global);
                    else if (typeof define === 'function' && typeof define.amd === 'object') define(definition);
                    else global[name] = definition(name, global);
                })('radio', this, function (name, global) {

                    "use strict";

                    /**
                     * Main Wrapper for radio.$ and create a function radio to accept the channelName
                     * @param {String} channelName topic of event
                     */
                    function radio(channelName) {
                        arguments.length ? radio.$.channel(channelName) : radio.$.reset();
                        return radio.$;
                    }

                    radio.$ = {
                        version: '0.2',
                        channelName: "",
                        channels: [],

                        /**
                         * Reset global state, by removing all channels
                         * @example
                         *    radio()
                         */
                        reset: function () {
                            radio.$.channelName = "";
                            radio.$.channels = [];
                        },

                        /**
                         * Broadcast (publish)
                         * Iterate through all listeners (callbacks) in current channel and pass arguments to subscribers
                         * @param arguments data to be sent to listeners
                         * @example
                         *    //basic usage
                         *    radio('channel1').broadcast('my message'); 
                         *    //send an unlimited number of parameters
                         *    radio('channel2').broadcast(param1, param2, param3 ... );
                         */
                        broadcast: function () {
                            // use slice() so as to loop on a copy of channels list as it might be changed while looping
                            var i, c = this.channels[this.channelName].slice(),
                                l = c.length,
                                subscriber, callback, context;
                            //iterate through current channel and run each subscriber
                            for (i = 0; i < l; i++) {
                                subscriber = c[i];
                                //if subscriber was an array, set the callback and context.
                                if ((typeof (subscriber) === 'object') && (subscriber.length)) {
                                    callback = subscriber[0];
                                    //if user set the context, set it to the context otherwise, it is a globally scoped function
                                    context = subscriber[1] || global;
                                }
                                callback.apply(context, arguments);
                            }
                            return this;
                        },

                        /**
                         * Create the channel if it doesn't exist and set the current channel/event name
                         * @param {String} name the name of the channel
                         * @example
                         *    radio('channel1');
                         */
                        channel: function (name) {
                            var c = this.channels;
                            //create a new channel if it doesn't exists
                            if (!c[name]) c[name] = [];
                            this.channelName = name;
                            return this;
                        },

                        /**
                         * Add Subscriber to channel
                         * Take the arguments and add it to the this.channels array.
                         * @param {Function|Array} arguments list of callbacks or arrays[callback, context] separated by commas
                         * @example
                         *      //basic usage
                         *      var callback = function() {};
                         *      radio('channel1').subscribe(callback); 
                         *
                         *      //subscribe an endless amount of callbacks
                         *      radio('channel1').subscribe(callback, callback2, callback3 ...);
                         *
                         *      //adding callbacks with context
                         *      radio('channel1').subscribe([callback, context],[callback1, context], callback3);
                         *     
                         *      //subscribe by chaining
                         *      radio('channel1').subscribe(callback).radio('channel2').subscribe(callback).subscribe(callback2);
                         */
                        subscribe: function () {
                            var a = arguments,
                                c = this.channels[this.channelName],
                                i, l = a.length,
                                p, ai = [];

                            //run through each arguments and subscribe it to the channel
                            for (i = 0; i < l; i++) {
                                ai = a[i];
                                //if the user sent just a function, wrap the fucntion in an array [function]
                                p = (typeof (ai) === "function") ? [ai] : ai;
                                if ((typeof (p) === 'object') && (p.length)) c.push(p);
                            }
                            return this;
                        },

                        /**
                         * Remove subscriber from channel
                         * Take arguments with functions and unsubscribe it if there is a match against existing subscribers.
                         * @param {Function} arguments callbacks separated by commas
                         * @example
                         *      //basic usage
                         *      radio('channel1').unsubscribe(callback); 
                         *      //you can unsubscribe as many callbacks as you want
                         *      radio('channel1').unsubscribe(callback, callback2, callback3 ...);
                         *       //removing callbacks with context is the same
                         *      radio('channel1').subscribe([callback, context]).unsubscribe(callback);
                         */
                        unsubscribe: function () {
                            var a = arguments,
                                i, j, c = this.channels[this.channelName],
                                l = a.length,
                                cl = c.length,
                                offset = 0,
                                jo;
                            //loop through each argument
                            for (i = 0; i < l; i++) {
                                //need to reset vars that change as the channel array items are removed
                                offset = 0;
                                cl = c.length;
                                //loop through the channel
                                for (j = 0; j < cl; j++) {
                                    jo = j - offset;
                                    //if there is a match with the argument and the channel function, unsubscribe it from the channel array
                                    if (c[jo][0] === a[i]) {
                                        //unsubscribe matched item from the channel array
                                        c.splice(jo, 1);
                                        offset++;
                                    }
                                }
                            }
                            return this;
                        }
                    };

                    return radio;
                });

                var assert = function (condition, msgArray) {
                    if (!condition) {
                        throw new Error(msgArray.join('') || 'Assertion failed');
                    }
                }

                var eventHandler = function (event) {
                    radio(event.name).broadcast(event.payload);
                };

                var errorHandler = function (error) {
                    radio('error').broadcast(error);
                };

                var unsubscribeAll = function (channels) {
                    channels.forEach(function (channel) {
                        var topic = radio(channel);
                        var callbacks = [].concat.apply([], topic.channels[channel]); // flatten array
                        topic.unsubscribe.apply(topic, callbacks);
                    });
                }

                var execWithPromise = function (suceess, failure, method, data) {
                    if (!suceess && !failure) {
                        return new Promise(function (resolve, reject) {
                            exec(resolve, reject, 'BackgroundGeolocation', method, data);
                        });
                    }
                    exec(suceess || function () { }, failure || function () { }, 'BackgroundGeolocation', method, data || []);
                }

                var BackgroundGeolocation = {
                    events: [
                        'location',
                        'stationary',
                        'activity',
                        'start',
                        'stop',
                        'error',
                        'authorization',
                        'foreground',
                        'background',
                        'abort_requested',
                        'http_authorization'
                    ],

                    DISTANCE_FILTER_PROVIDER: 0,
                    ACTIVITY_PROVIDER: 1,
                    RAW_PROVIDER: 2,

                    BACKGROUND_MODE: 0,
                    FOREGROUND_MODE: 1,

                    NOT_AUTHORIZED: 0,
                    AUTHORIZED: 1,
                    AUTHORIZED_FOREGROUND: 2,

                    HIGH_ACCURACY: 0,
                    MEDIUM_ACCURACY: 100,
                    LOW_ACCURACY: 1000,
                    PASSIVE_ACCURACY: 10000,

                    LOG_ERROR: 'ERROR',
                    LOG_WARN: 'WARN',
                    LOG_INFO: 'INFO',
                    LOG_DEBUG: 'DEBUG',
                    LOG_TRACE: 'TRACE',

                    PERMISSION_DENIED: 1,
                    LOCATION_UNAVAILABLE: 2,
                    TIMEOUT: 3,

                    configure: function (config, success, failure) {
                        return execWithPromise(success,
                            failure,
                            'configure',
                            [config]
                        );
                    },

                    start: function () {
                        return execWithPromise(null, null, 'start');
                    },

                    stop: function () {
                        return execWithPromise(null, null, 'stop');
                    },

                    switchMode: function (mode, success, failure) {
                        return execWithPromise(success,
                            failure,
                            'switchMode', [mode]);
                    },

                    getConfig: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getConfig');
                    },

                    /**
                     * Returns current stationaryLocation if available.  null if not
                     */
                    getStationaryLocation: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getStationaryLocation');
                    },

                    showAppSettings: function () {
                        return execWithPromise(null,
                            null,
                            'showAppSettings');
                    },

                    showLocationSettings: function () {
                        return execWithPromise(null,
                            null,
                            'showLocationSettings');
                    },

                    getLocations: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getLocations');
                    },

                    getValidLocations: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getValidLocations');
                    },

                    getValidLocationsAndDelete: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getValidLocationsAndDelete');
                    },

                    deleteLocation: function (locationId, success, failure) {
                        return execWithPromise(success,
                            failure,
                            'deleteLocation', [locationId]);
                    },

                    deleteAllLocations: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'deleteAllLocations');
                    },

                    getCurrentLocation: function (success, failure, options) {
                        options = options || {};
                        return execWithPromise(success,
                            failure,
                            'getCurrentLocation', [options.timeout, options.maximumAge, options.enableHighAccuracy]);
                    },

                    getLogEntries: function (limit, offset = 0, minLevel = "DEBUG", success, failure) {
                        return execWithPromise(success,
                            failure,
                            'getLogEntries', [limit, offset, minLevel]);
                    },

                    checkStatus: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'checkStatus')
                    },

                    startTask: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'startTask');
                    },

                    endTask: function (taskKey, success, failure) {
                        return execWithPromise(success,
                            failure,
                            'endTask', [taskKey]);
                    },

                    headlessTask: function (func, success, failure) {
                        return execWithPromise(success,
                            failure,
                            'registerHeadlessTask', [func.toString()]);
                    },

                    forceSync: function (success, failure) {
                        return execWithPromise(success,
                            failure,
                            'forceSync');
                    },

                    on: function (event, callbackFn) {
                        assert(this.events.indexOf(event) > -1, [TAG, '#on unknown event "' + event + '"']);
                        if (!callbackFn) {
                            return radio(event);
                        }
                        radio(event).subscribe(callbackFn);
                        return {
                            remove: function () {
                                radio(event).unsubscribe(callbackFn);
                            }
                        };
                    },

                    removeAllListeners: function (event) {
                        if (!event) {
                            unsubscribeAll(this.events);
                            return void 0;
                        }
                        if (this.events.indexOf(event) < 0) {
                            console.log('[WARN] ' + TAG + '#removeAllListeners for unknown event "' + event + '"');
                            return void 0;
                        }
                        unsubscribeAll([event]);
                    }
                };

                channel.deviceready.subscribe(function () {
                    // register app global listeners
                    exec(eventHandler,
                        errorHandler,
                        'BackgroundGeolocation',
                        'addEventListener'
                    );
                });


                module.exports = BackgroundGeolocation;
            })
        }
    };

    var _fnCordovaCommon = function (CORDOVA_JS_BUILD_LABEL) {
        // file: src/cordova.js
        define("cordova", function (require, exports, module) {
            var channel = require('cordova/channel');
            var platform = require('cordova/platform');

            /**
             * Intercept calls to addEventListener + removeEventListener and handle deviceready,
             * resume, and pause events.
             */
            var m_document_addEventListener = document.addEventListener;
            var m_document_removeEventListener = document.removeEventListener;
            var m_window_addEventListener = window.addEventListener;
            var m_window_removeEventListener = window.removeEventListener;

            /**
             * Houses custom event handlers to intercept on document + window event listeners.
             */
            var documentEventHandlers = {},
                windowEventHandlers = {};

            document.addEventListener = function (evt, handler, capture) {
                var e = evt.toLowerCase();
                if (typeof documentEventHandlers[e] != 'undefined') {
                    documentEventHandlers[e].subscribe(handler);
                } else {
                    m_document_addEventListener.call(document, evt, handler, capture);
                }
            };

            window.addEventListener = function (evt, handler, capture) {
                var e = evt.toLowerCase();
                if (typeof windowEventHandlers[e] != 'undefined') {
                    windowEventHandlers[e].subscribe(handler);
                } else {
                    m_window_addEventListener.call(window, evt, handler, capture);
                }
            };

            document.removeEventListener = function (evt, handler, capture) {
                var e = evt.toLowerCase();
                // If unsubscribing from an event that is handled by a plugin
                if (typeof documentEventHandlers[e] != "undefined") {
                    documentEventHandlers[e].unsubscribe(handler);
                } else {
                    m_document_removeEventListener.call(document, evt, handler, capture);
                }
            };

            window.removeEventListener = function (evt, handler, capture) {
                var e = evt.toLowerCase();
                // If unsubscribing from an event that is handled by a plugin
                if (typeof windowEventHandlers[e] != "undefined") {
                    windowEventHandlers[e].unsubscribe(handler);
                } else {
                    m_window_removeEventListener.call(window, evt, handler, capture);
                }
            };

            function createEvent(type, data) {
                var event = document.createEvent('Events');
                event.initEvent(type, false, false);
                if (data) {
                    for (var i in data) {
                        if (data.hasOwnProperty(i)) {
                            event[i] = data[i];
                        }
                    }
                }
                return event;
            }

            var cordova = {
                define: define,
                require: require,
                version: CORDOVA_JS_BUILD_LABEL,
                platformId: platform.id,
                /**
                 * Methods to add/remove your own addEventListener hijacking on document + window.
                 */
                addWindowEventHandler: function (event) {
                    return (windowEventHandlers[event] = channel.create(event));
                },
                addStickyDocumentEventHandler: function (event) {
                    return (documentEventHandlers[event] = channel.createSticky(event));
                },
                addDocumentEventHandler: function (event) {
                    return (documentEventHandlers[event] = channel.create(event));
                },
                removeWindowEventHandler: function (event) {
                    delete windowEventHandlers[event];
                },
                removeDocumentEventHandler: function (event) {
                    delete documentEventHandlers[event];
                },
                /**
                 * Retrieve original event handlers that were replaced by Cordova
                 *
                 * @return object
                 */
                getOriginalHandlers: function () {
                    return {
                        'document': {
                            'addEventListener': m_document_addEventListener,
                            'removeEventListener': m_document_removeEventListener
                        },
                        'window': {
                            'addEventListener': m_window_addEventListener,
                            'removeEventListener': m_window_removeEventListener
                        }
                    };
                },
                /**
                 * Method to fire event from native code
                 * bNoDetach is required for events which cause an exception which needs to be caught in native code
                 */
                fireDocumentEvent: function (type, data, bNoDetach) {
                    var evt = createEvent(type, data);
                    if (typeof documentEventHandlers[type] != 'undefined') {
                        if (bNoDetach) {
                            documentEventHandlers[type].fire(evt);
                        } else {
                            setTimeout(function () {
                                // Fire deviceready on listeners that were registered before cordova.js was loaded.
                                if (type == 'deviceready') {
                                    document.dispatchEvent(evt);
                                }
                                documentEventHandlers[type].fire(evt);
                            }, 0);
                        }
                    } else {
                        document.dispatchEvent(evt);
                    }
                },
                fireWindowEvent: function (type, data) {
                    var evt = createEvent(type, data);
                    if (typeof windowEventHandlers[type] != 'undefined') {
                        setTimeout(function () {
                            windowEventHandlers[type].fire(evt);
                        }, 0);
                    } else {
                        window.dispatchEvent(evt);
                    }
                },

                /**
                 * Plugin callback mechanism.
                 */
                // Randomize the starting callbackId to avoid collisions after refreshing or navigating.
                // This way, it's very unlikely that any new callback would get the same callbackId as an old callback.
                callbackId: Math.floor(Math.random() * 2000000000),
                callbacks: {},
                callbackStatus: {
                    NO_RESULT: 0,
                    OK: 1,
                    CLASS_NOT_FOUND_EXCEPTION: 2,
                    ILLEGAL_ACCESS_EXCEPTION: 3,
                    INSTANTIATION_EXCEPTION: 4,
                    MALFORMED_URL_EXCEPTION: 5,
                    IO_EXCEPTION: 6,
                    INVALID_ACTION: 7,
                    JSON_EXCEPTION: 8,
                    ERROR: 9
                },

                /**
                 * Called by native code when returning successful result from an action.
                 */
                callbackSuccess: function (callbackId, args) {
                    try {
                        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback);
                    } catch (e) {
                        console.log("Error in success callback: " + callbackId + " = " + e);
                    }
                },

                /**
                 * Called by native code when returning error result from an action.
                 */
                callbackError: function (callbackId, args) {
                    // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.
                    // Derive success from status.
                    try {
                        cordova.callbackFromNative(callbackId, false, args.status, [args.message], args.keepCallback);
                    } catch (e) {
                        console.log("Error in error callback: " + callbackId + " = " + e);
                    }
                },

                /**
                 * Called by native code when returning the result from an action.
                 */
                callbackFromNative: function (callbackId, success, status, args, keepCallback) {
                    var callback = cordova.callbacks[callbackId];
                    if (callback) {
                        if (success && status == cordova.callbackStatus.OK) {
                            callback.success && callback.success.apply(null, args);
                        } else if (!success) {
                            callback.fail && callback.fail.apply(null, args);
                        }

                        // Clear callback if not expecting any more results
                        if (!keepCallback) {
                            delete cordova.callbacks[callbackId];
                        }
                    }
                },
                addConstructor: function (func) {
                    channel.onCordovaReady.subscribe(function () {
                        try {
                            func();
                        } catch (e) {
                            console.log("Failed to run constructor: " + e);
                        }
                    });
                }
            };

            module.exports = cordova;
        });

        // file: src/common/argscheck.js
        define("cordova/argscheck", function (require, exports, module) {
            var exec = require('cordova/exec');
            var utils = require('cordova/utils');

            var moduleExports = module.exports;

            var typeMap = {
                'A': 'Array',
                'D': 'Date',
                'N': 'Number',
                'S': 'String',
                'F': 'Function',
                'O': 'Object'
            };

            function extractParamName(callee, argIndex) {
                return (/.*?\((.*?)\)/).exec(callee)[1].split(', ')[argIndex];
            }

            function checkArgs(spec, functionName, args, opt_callee) {
                if (!moduleExports.enableChecks) {
                    return;
                }
                var errMsg = null;
                var typeName;
                for (var i = 0; i < spec.length; ++i) {
                    var c = spec.charAt(i),
                        cUpper = c.toUpperCase(),
                        arg = args[i];
                    // Asterix means allow anything.
                    if (c == '*') {
                        continue;
                    }
                    typeName = utils.typeName(arg);
                    if ((arg === null || arg === undefined) && c == cUpper) {
                        continue;
                    }
                    if (typeName != typeMap[cUpper]) {
                        errMsg = 'Expected ' + typeMap[cUpper];
                        break;
                    }
                }
                if (errMsg) {
                    errMsg += ', but got ' + typeName + '.';
                    errMsg = 'Wrong type for parameter "' + extractParamName(opt_callee || args.callee, i) + '" of ' + functionName + ': ' + errMsg;
                    // Don't log when running unit tests.
                    if (typeof jasmine == 'undefined') {
                        console.error(errMsg);
                    }
                    throw TypeError(errMsg);
                }
            }

            function getValue(value, defaultValue) {
                return value === undefined ? defaultValue : value;
            }

            moduleExports.checkArgs = checkArgs;
            moduleExports.getValue = getValue;
            moduleExports.enableChecks = true;
        });

        // file: src/common/base64.js
        define("cordova/base64", function (require, exports, module) {
            var base64 = exports;

            base64.fromArrayBuffer = function (arrayBuffer) {
                var array = new Uint8Array(arrayBuffer);
                return uint8ToBase64(array);
            };

            base64.toArrayBuffer = function (str) {
                var decodedStr = typeof atob != 'undefined' ? atob(str) : new Buffer(str, 'base64').toString('binary');
                var arrayBuffer = new ArrayBuffer(decodedStr.length);
                var array = new Uint8Array(arrayBuffer);
                for (var i = 0, len = decodedStr.length; i < len; i++) {
                    array[i] = decodedStr.charCodeAt(i);
                }
                return arrayBuffer;
            };

            //------------------------------------------------------------------------------

            /* This code is based on the performance tests at http://jsperf.com/b64tests
             * This 12-bit-at-a-time algorithm was the best performing version on all
             * platforms tested.
             */

            var b64_6bit = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var b64_12bit;

            var b64_12bitTable = function () {
                b64_12bit = [];
                for (var i = 0; i < 64; i++) {
                    for (var j = 0; j < 64; j++) {
                        b64_12bit[i * 64 + j] = b64_6bit[i] + b64_6bit[j];
                    }
                }
                b64_12bitTable = function () {
                    return b64_12bit;
                };
                return b64_12bit;
            };

            function uint8ToBase64(rawData) {
                var numBytes = rawData.byteLength;
                var output = "";
                var segment;
                var table = b64_12bitTable();
                for (var i = 0; i < numBytes - 2; i += 3) {
                    segment = (rawData[i] << 16) + (rawData[i + 1] << 8) + rawData[i + 2];
                    output += table[segment >> 12];
                    output += table[segment & 0xfff];
                }
                if (numBytes - i == 2) {
                    segment = (rawData[i] << 16) + (rawData[i + 1] << 8);
                    output += table[segment >> 12];
                    output += b64_6bit[(segment & 0xfff) >> 6];
                    output += '=';
                } else if (numBytes - i == 1) {
                    segment = (rawData[i] << 16);
                    output += table[segment >> 12];
                    output += '==';
                }
                return output;
            }
        });

        // file: src/common/builder.js
        define("cordova/builder", function (require, exports, module) {
            var utils = require('cordova/utils');

            function each(objects, func, context) {
                for (var prop in objects) {
                    if (objects.hasOwnProperty(prop)) {
                        func.apply(context, [objects[prop], prop]);
                    }
                }
            }

            function clobber(obj, key, value) {
                exports.replaceHookForTesting(obj, key);
                obj[key] = value;
                // Getters can only be overridden by getters.
                if (obj[key] !== value) {
                    utils.defineGetter(obj, key, function () {
                        return value;
                    });
                }
            }

            function assignOrWrapInDeprecateGetter(obj, key, value, message) {
                if (message) {
                    utils.defineGetter(obj, key, function () {
                        console.log(message);
                        delete obj[key];
                        clobber(obj, key, value);
                        return value;
                    });
                } else {
                    clobber(obj, key, value);
                }
            }

            function include(parent, objects, clobber, merge) {
                each(objects, function (obj, key) {
                    try {
                        var result = obj.path ? require(obj.path) : {};

                        if (clobber) {
                            // Clobber if it doesn't exist.
                            if (typeof parent[key] === 'undefined') {
                                assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
                            } else if (typeof obj.path !== 'undefined') {
                                // If merging, merge properties onto parent, otherwise, clobber.
                                if (merge) {
                                    recursiveMerge(parent[key], result);
                                } else {
                                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
                                }
                            }
                            result = parent[key];
                        } else {
                            // Overwrite if not currently defined.
                            if (typeof parent[key] == 'undefined') {
                                assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);
                            } else {
                                // Set result to what already exists, so we can build children into it if they exist.
                                result = parent[key];
                            }
                        }

                        if (obj.children) {
                            include(result, obj.children, clobber, merge);
                        }
                    } catch (e) {
                        utils.alert('Exception building Cordova JS globals: ' + e + ' for key "' + key + '"');
                    }
                });
            }

            /**
             * Merge properties from one object onto another recursively.  Properties from
             * the src object will overwrite existing target property.
             *
             * @param target Object to merge properties into.
             * @param src Object to merge properties from.
             */
            function recursiveMerge(target, src) {
                for (var prop in src) {
                    if (src.hasOwnProperty(prop)) {
                        if (target.prototype && target.prototype.constructor === target) {
                            // If the target object is a constructor override off prototype.
                            clobber(target.prototype, prop, src[prop]);
                        } else {
                            if (typeof src[prop] === 'object' && typeof target[prop] === 'object') {
                                recursiveMerge(target[prop], src[prop]);
                            } else {
                                clobber(target, prop, src[prop]);
                            }
                        }
                    }
                }
            }

            exports.buildIntoButDoNotClobber = function (objects, target) {
                include(target, objects, false, false);
            };
            exports.buildIntoAndClobber = function (objects, target) {
                include(target, objects, true, false);
            };
            exports.buildIntoAndMerge = function (objects, target) {
                include(target, objects, true, true);
            };
            exports.recursiveMerge = recursiveMerge;
            exports.assignOrWrapInDeprecateGetter = assignOrWrapInDeprecateGetter;
            exports.replaceHookForTesting = function () { };
        });

        // file: src/common/channel.js
        define("cordova/channel", function (require, exports, module) {
            var utils = require('cordova/utils'),
                nextGuid = 1;

            /**
             * Custom pub-sub "channel" that can have functions subscribed to it
             * This object is used to define and control firing of events for
             * cordova initialization, as well as for custom events thereafter.
             *
             * The order of events during page load and Cordova startup is as follows:
             *
             * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.
             * onNativeReady*              Internal event that indicates the Cordova native side is ready.
             * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.
             * onDeviceReady*              User event fired to indicate that Cordova is ready
             * onResume                    User event fired to indicate a start/resume lifecycle event
             * onPause                     User event fired to indicate a pause lifecycle event
             * onDestroy*                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).
             *
             * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.
             * All listeners that subscribe after the event is fired will be executed right away.
             *
             * The only Cordova events that user code should register for are:
             *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript
             *      pause                 App has moved to background
             *      resume                App has returned to foreground
             *
             * Listeners can be registered as:
             *      document.addEventListener("deviceready", myDeviceReadyListener, false);
             *      document.addEventListener("resume", myResumeListener, false);
             *      document.addEventListener("pause", myPauseListener, false);
             *
             * The DOM lifecycle events should be used for saving and restoring state
             *      window.onload
             *      window.onunload
             *
             */

            /**
             * Channel
             * @constructor
             * @param type  String the channel name
             */
            var Channel = function (type, sticky) {
                this.type = type;
                // Map of guid -> function.
                this.handlers = {};
                // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.
                this.state = sticky ? 1 : 0;
                // Used in sticky mode to remember args passed to fire().
                this.fireArgs = null;
                // Used by onHasSubscribersChange to know if there are any listeners.
                this.numHandlers = 0;
                // Function that is called when the first listener is subscribed, or when
                // the last listener is unsubscribed.
                this.onHasSubscribersChange = null;
            },
                channel = {
                    /**
                     * Calls the provided function only after all of the channels specified
                     * have been fired. All channels must be sticky channels.
                     */
                    join: function (h, c) {
                        var len = c.length,
                            i = len,
                            f = function () {
                                if (!(--i)) h();
                            };
                        for (var j = 0; j < len; j++) {
                            if (c[j].state === 0) {
                                throw Error('Can only use join with sticky channels.');
                            }
                            c[j].subscribe(f);
                        }
                        if (!len) h();
                    },
                    create: function (type) {
                        return channel[type] = new Channel(type, false);
                    },
                    createSticky: function (type) {
                        return channel[type] = new Channel(type, true);
                    },

                    /**
                     * cordova Channels that must fire before "deviceready" is fired.
                     */
                    deviceReadyChannelsArray: [],
                    deviceReadyChannelsMap: {},

                    /**
                     * Indicate that a feature needs to be initialized before it is ready to be used.
                     * This holds up Cordova's "deviceready" event until the feature has been initialized
                     * and Cordova.initComplete(feature) is called.
                     *
                     * @param feature {String}     The unique feature name
                     */
                    waitForInitialization: function (feature) {
                        if (feature) {
                            var c = channel[feature] || this.createSticky(feature);
                            this.deviceReadyChannelsMap[feature] = c;
                            this.deviceReadyChannelsArray.push(c);
                        }
                    },

                    /**
                     * Indicate that initialization code has completed and the feature is ready to be used.
                     *
                     * @param feature {String}     The unique feature name
                     */
                    initializationComplete: function (feature) {
                        var c = this.deviceReadyChannelsMap[feature];
                        if (c) {
                            c.fire();
                        }
                    }
                };

            function forceFunction(f) {
                if (typeof f != 'function')
                    throw "Function required as first argument!";
            }

            /**
             * Subscribes the given function to the channel. Any time that
             * Channel.fire is called so too will the function.
             * Optionally specify an execution context for the function
             * and a guid that can be used to stop subscribing to the channel.
             * Returns the guid.
             */
            Channel.prototype.subscribe = function (f, c) {
                // need a function to call
                forceFunction(f);
                if (this.state == 2) {
                    f.apply(c || this, this.fireArgs);
                    return;
                }

                var func = f,
                    guid = f.observer_guid;
                if (typeof c == "object") {
                    func = utils.close(c, f);
                }

                if (!guid) {
                    // first time any channel has seen this subscriber
                    guid = '' + nextGuid++;
                }
                func.observer_guid = guid;
                f.observer_guid = guid;

                // Don't add the same handler more than once.
                if (!this.handlers[guid]) {
                    this.handlers[guid] = func;
                    this.numHandlers++;
                    if (this.numHandlers == 1) {
                        this.onHasSubscribersChange && this.onHasSubscribersChange();
                    }
                }
            };

            /**
             * Unsubscribes the function with the given guid from the channel.
             */
            Channel.prototype.unsubscribe = function (f) {
                // need a function to unsubscribe
                forceFunction(f);

                var guid = f.observer_guid,
                    handler = this.handlers[guid];
                if (handler) {
                    delete this.handlers[guid];
                    this.numHandlers--;
                    if (this.numHandlers === 0) {
                        this.onHasSubscribersChange && this.onHasSubscribersChange();
                    }
                }
            };

            /**
             * Calls all functions subscribed to this channel.
             */
            Channel.prototype.fire = function (e) {
                var fail = false,
                    fireArgs = Array.prototype.slice.call(arguments);
                // Apply stickiness.
                if (this.state == 1) {
                    this.state = 2;
                    this.fireArgs = fireArgs;
                }
                if (this.numHandlers) {
                    // Copy the values first so that it is safe to modify it from within
                    // callbacks.
                    var toCall = [];
                    for (var item in this.handlers) {
                        toCall.push(this.handlers[item]);
                    }
                    for (var i = 0; i < toCall.length; ++i) {
                        toCall[i].apply(this, fireArgs);
                    }
                    if (this.state == 2 && this.numHandlers) {
                        this.numHandlers = 0;
                        this.handlers = {};
                        this.onHasSubscribersChange && this.onHasSubscribersChange();
                    }
                }
            };

            // defining them here so they are ready super fast!
            // DOM event that is received when the web page is loaded and parsed.
            channel.createSticky('onDOMContentLoaded');

            // Event to indicate the Cordova native side is ready.
            channel.createSticky('onNativeReady');

            // Event to indicate that all Cordova JavaScript objects have been created
            // and it's time to run plugin constructors.
            channel.createSticky('onCordovaReady');

            // Event to indicate that all automatically loaded JS plugins are loaded and ready.
            // FIXME remove this
            channel.createSticky('onPluginsReady');

            // Event to indicate that Cordova is ready
            channel.createSticky('onDeviceReady');

            // Event to indicate a resume lifecycle event
            channel.create('onResume');

            // Event to indicate a pause lifecycle event
            channel.create('onPause');

            // Event to indicate a destroy lifecycle event
            channel.createSticky('onDestroy');

            // Channels that must fire before "deviceready" is fired.
            channel.waitForInitialization('onCordovaReady');
            channel.waitForInitialization('onDOMContentLoaded');

            module.exports = channel;
        });

        // file: src/common/exec/proxy.js
        define("cordova/exec/proxy", function (require, exports, module) {
            // internal map of proxy function
            var CommandProxyMap = {};

            module.exports = {
                // example: cordova.commandProxy.add("Accelerometer",{getCurrentAcceleration: function(successCallback, errorCallback, options) {...},...);
                add: function (id, proxyObj) {
                    console.log("adding proxy for " + id);
                    CommandProxyMap[id] = proxyObj;
                    return proxyObj;
                },

                // cordova.commandProxy.remove("Accelerometer");
                remove: function (id) {
                    var proxy = CommandProxyMap[id];
                    delete CommandProxyMap[id];
                    CommandProxyMap[id] = null;
                    return proxy;
                },

                get: function (service, action) {
                    return (CommandProxyMap[service] ? CommandProxyMap[service][action] : null);
                }
            };
        });

        // file: src/common/init.js
        define("cordova/init", function (require, exports, module) {
            var channel = require('cordova/channel');
            var cordova = require('cordova');
            var modulemapper = require('cordova/modulemapper');
            var platform = require('cordova/platform');
            var pluginloader = require('cordova/pluginloader');

            var platformInitChannelsArray = [channel.onNativeReady, channel.onPluginsReady];

            function logUnfiredChannels(arr) {
                for (var i = 0; i < arr.length; ++i) {
                    if (arr[i].state != 2) {
                        console.log('Channel not fired: ' + arr[i].type);
                    }
                }
            }

            window.setTimeout(function () {
                if (channel.onDeviceReady.state != 2) {
                    console.log('deviceready has not fired after 5 seconds.');
                    logUnfiredChannels(platformInitChannelsArray);
                    logUnfiredChannels(channel.deviceReadyChannelsArray);
                }
            }, 5000);

            // Replace navigator before any modules are required(), to ensure it happens as soon as possible.
            // We replace it so that properties that can't be clobbered can instead be overridden.
            function replaceNavigator(origNavigator) {
                var CordovaNavigator = function () { };
                CordovaNavigator.prototype = origNavigator;
                var newNavigator = new CordovaNavigator();
                // This work-around really only applies to new APIs that are newer than Function.bind.
                // Without it, APIs such as getGamepads() break.
                if (CordovaNavigator.bind) {
                    for (var key in origNavigator) {
                        if (typeof origNavigator[key] == 'function') {
                            newNavigator[key] = origNavigator[key].bind(origNavigator);
                        }
                    }
                }
                return newNavigator;
            }
            if (window.navigator) {
                window.navigator = replaceNavigator(window.navigator);
            }

            if (!window.console) {
                window.console = {
                    log: function () { }
                };
            }
            if (!window.console.warn) {
                window.console.warn = function (msg) {
                    this.log("warn: " + msg);
                };
            }

            // Register pause, resume and deviceready channels as events on document.
            channel.onPause = cordova.addDocumentEventHandler('pause');
            channel.onResume = cordova.addDocumentEventHandler('resume');
            channel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');

            // Listen for DOMContentLoaded and notify our channel subscribers.
            if (document.readyState == 'complete' || document.readyState == 'interactive') {
                channel.onDOMContentLoaded.fire();
            } else {
                document.addEventListener('DOMContentLoaded', function () {
                    channel.onDOMContentLoaded.fire();
                }, false);
            }

            // _nativeReady is global variable that the native side can set
            // to signify that the native code is ready. It is a global since
            // it may be called before any cordova JS is ready.
            if (window._nativeReady) {
                channel.onNativeReady.fire();
            }

            modulemapper.clobbers('cordova', 'cordova');
            modulemapper.clobbers('cordova/exec', 'cordova.exec');
            modulemapper.clobbers('cordova/exec', 'Cordova.exec');

            // Call the platform-specific initialization.
            platform.bootstrap && platform.bootstrap();

            // Wrap in a setTimeout to support the use-case of having plugin JS appended to cordova.js.
            // The delay allows the attached modules to be defined before the plugin loader looks for them.
            setTimeout(function () {
                pluginloader.load(function () {
                    channel.onPluginsReady.fire();
                });
            }, 0);

            /**
             * Create all cordova objects once native side is ready.
             */
            channel.join(function () {
                modulemapper.mapModules(window);

                platform.initialize && platform.initialize();

                // Fire event to notify that all objects are created
                channel.onCordovaReady.fire();

                // Fire onDeviceReady event once page has fully loaded, all
                // constructors have run and cordova info has been received from native
                // side.
                channel.join(function () {
                    require('cordova').fireDocumentEvent('deviceready');

                    //Also set the flag DronaHQ.AreYouReady
                    DronaHQ.IsReady = true;
                }, channel.deviceReadyChannelsArray);
            }, platformInitChannelsArray);
        });

        // file: src/common/init_b.js
        define("cordova/init_b", function (require, exports, module) {
            var channel = require('cordova/channel');
            var cordova = require('cordova');
            var platform = require('cordova/platform');

            var platformInitChannelsArray = [channel.onDOMContentLoaded, channel.onNativeReady];

            // setting exec
            cordova.exec = require('cordova/exec');

            function logUnfiredChannels(arr) {
                for (var i = 0; i < arr.length; ++i) {
                    if (arr[i].state != 2) {
                        console.log('Channel not fired: ' + arr[i].type);
                    }
                }
            }

            window.setTimeout(function () {
                if (channel.onDeviceReady.state != 2) {
                    console.log('deviceready has not fired after 5 seconds.');
                    logUnfiredChannels(platformInitChannelsArray);
                    logUnfiredChannels(channel.deviceReadyChannelsArray);
                }
            }, 5000);

            // Replace navigator before any modules are required(), to ensure it happens as soon as possible.
            // We replace it so that properties that can't be clobbered can instead be overridden.
            function replaceNavigator(origNavigator) {
                var CordovaNavigator = function () { };
                CordovaNavigator.prototype = origNavigator;
                var newNavigator = new CordovaNavigator();
                // This work-around really only applies to new APIs that are newer than Function.bind.
                // Without it, APIs such as getGamepads() break.
                if (CordovaNavigator.bind) {
                    for (var key in origNavigator) {
                        if (typeof origNavigator[key] == 'function') {
                            newNavigator[key] = origNavigator[key].bind(origNavigator);
                        }
                    }
                }
                return newNavigator;
            }
            if (window.navigator) {
                window.navigator = replaceNavigator(window.navigator);
            }

            if (!window.console) {
                window.console = {
                    log: function () { }
                };
            }
            if (!window.console.warn) {
                window.console.warn = function (msg) {
                    this.log("warn: " + msg);
                };
            }

            // Register pause, resume and deviceready channels as events on document.
            channel.onPause = cordova.addDocumentEventHandler('pause');
            channel.onResume = cordova.addDocumentEventHandler('resume');
            channel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');

            // Listen for DOMContentLoaded and notify our channel subscribers.
            if (document.readyState == 'complete' || document.readyState == 'interactive') {
                channel.onDOMContentLoaded.fire();
            } else {
                document.addEventListener('DOMContentLoaded', function () {
                    channel.onDOMContentLoaded.fire();
                }, false);
            }

            // _nativeReady is global variable that the native side can set
            // to signify that the native code is ready. It is a global since
            // it may be called before any cordova JS is ready.
            if (window._nativeReady) {
                channel.onNativeReady.fire();
            }

            // Call the platform-specific initialization.
            platform.bootstrap && platform.bootstrap();

            /**
             * Create all cordova objects once native side is ready.
             */
            channel.join(function () {
                platform.initialize && platform.initialize();

                // Fire event to notify that all objects are created
                channel.onCordovaReady.fire();

                // Fire onDeviceReady event once page has fully loaded, all
                // constructors have run and cordova info has been received from native
                // side.
                channel.join(function () {
                    require('cordova').fireDocumentEvent('deviceready');
                }, channel.deviceReadyChannelsArray);
            }, platformInitChannelsArray);
        });

        // file: src/common/modulemapper.js
        define("cordova/modulemapper", function (require, exports, module) {
            var builder = require('cordova/builder'),
                moduleMap = define.moduleMap,
                symbolList,
                deprecationMap;

            exports.reset = function () {
                symbolList = [];
                deprecationMap = {};
            };

            function addEntry(strategy, moduleName, symbolPath, opt_deprecationMessage) {
                if (!(moduleName in moduleMap)) {
                    throw new Error('Module ' + moduleName + ' does not exist.');
                }
                symbolList.push(strategy, moduleName, symbolPath);
                if (opt_deprecationMessage) {
                    deprecationMap[symbolPath] = opt_deprecationMessage;
                }
            }

            // Note: Android 2.3 does have Function.bind().
            exports.clobbers = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('c', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.merges = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('m', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.defaults = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('d', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.runs = function (moduleName) {
                addEntry('r', moduleName, null);
            };

            function prepareNamespace(symbolPath, context) {
                if (!symbolPath) {
                    return context;
                }
                var parts = symbolPath.split('.');
                var cur = context;
                for (var i = 0, part; part = parts[i]; ++i) {
                    cur = cur[part] = cur[part] || {};
                }
                return cur;
            }

            exports.mapModules = function (context) {
                var origSymbols = {};
                context.CDV_origSymbols = origSymbols;
                for (var i = 0, len = symbolList.length; i < len; i += 3) {
                    var strategy = symbolList[i];
                    var moduleName = symbolList[i + 1];
                    var module = require(moduleName);
                    // <runs/>
                    if (strategy == 'r') {
                        continue;
                    }
                    var symbolPath = symbolList[i + 2];
                    var lastDot = symbolPath.lastIndexOf('.');
                    var namespace = symbolPath.substr(0, lastDot);
                    var lastName = symbolPath.substr(lastDot + 1);

                    var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;
                    var parentObj = prepareNamespace(namespace, context);
                    var target = parentObj[lastName];

                    if (strategy == 'm' && target) {
                        builder.recursiveMerge(target, module);
                    } else if ((strategy == 'd' && !target) || (strategy != 'd')) {
                        if (!(symbolPath in origSymbols)) {
                            origSymbols[symbolPath] = target;
                        }
                        builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);
                    }
                }
            };

            exports.getOriginalSymbol = function (context, symbolPath) {
                var origSymbols = context.CDV_origSymbols;
                if (origSymbols && (symbolPath in origSymbols)) {
                    return origSymbols[symbolPath];
                }
                var parts = symbolPath.split('.');
                var obj = context;
                for (var i = 0; i < parts.length; ++i) {
                    obj = obj && obj[parts[i]];
                }
                return obj;
            };

            exports.reset();
        });

        // file: src/common/modulemapper_b.js
        define("cordova/modulemapper_b", function (require, exports, module) {
            var builder = require('cordova/builder'),
                symbolList = [],
                deprecationMap;

            exports.reset = function () {
                symbolList = [];
                deprecationMap = {};
            };

            function addEntry(strategy, moduleName, symbolPath, opt_deprecationMessage) {
                symbolList.push(strategy, moduleName, symbolPath);
                if (opt_deprecationMessage) {
                    deprecationMap[symbolPath] = opt_deprecationMessage;
                }
            }

            // Note: Android 2.3 does have Function.bind().
            exports.clobbers = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('c', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.merges = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('m', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.defaults = function (moduleName, symbolPath, opt_deprecationMessage) {
                addEntry('d', moduleName, symbolPath, opt_deprecationMessage);
            };

            exports.runs = function (moduleName) {
                addEntry('r', moduleName, null);
            };

            function prepareNamespace(symbolPath, context) {
                if (!symbolPath) {
                    return context;
                }
                var parts = symbolPath.split('.');
                var cur = context;
                for (var i = 0, part; part = parts[i]; ++i) {
                    cur = cur[part] = cur[part] || {};
                }
                return cur;
            }

            exports.mapModules = function (context) {
                var origSymbols = {};
                context.CDV_origSymbols = origSymbols;
                for (var i = 0, len = symbolList.length; i < len; i += 3) {
                    var strategy = symbolList[i];
                    var moduleName = symbolList[i + 1];
                    var module = require(moduleName);
                    // <runs/>
                    if (strategy == 'r') {
                        continue;
                    }
                    var symbolPath = symbolList[i + 2];
                    var lastDot = symbolPath.lastIndexOf('.');
                    var namespace = symbolPath.substr(0, lastDot);
                    var lastName = symbolPath.substr(lastDot + 1);

                    var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;
                    var parentObj = prepareNamespace(namespace, context);
                    var target = parentObj[lastName];

                    if (strategy == 'm' && target) {
                        builder.recursiveMerge(target, module);
                    } else if ((strategy == 'd' && !target) || (strategy != 'd')) {
                        if (!(symbolPath in origSymbols)) {
                            origSymbols[symbolPath] = target;
                        }
                        builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);
                    }
                }
            };

            exports.getOriginalSymbol = function (context, symbolPath) {
                var origSymbols = context.CDV_origSymbols;
                if (origSymbols && (symbolPath in origSymbols)) {
                    return origSymbols[symbolPath];
                }
                var parts = symbolPath.split('.');
                var obj = context;
                for (var i = 0; i < parts.length; ++i) {
                    obj = obj && obj[parts[i]];
                }
                return obj;
            };

            exports.reset();
        });

        //file: cordova_plugins.js - DronaHQ.js customization
        /* Cordova generally injects this file on runtime, but we want only 1 js to exist
         * Hence, we are putting this as a part of this js only
         */
        define('cordova/plugin_list', function (require, exports, module) {
            var arrDevice = [{
                "file": "plugins/cordova-plugin-device/www/device.js",
                "id": "cordova-plugin-device.device",
                "clobbers": [
                    "device"
                ]
            }];

            var arrCamera = [{
                "file": "plugins/cordova-plugin-camera/www/CameraConstants.js",
                "id": "cordova-plugin-camera.Camera",
                "clobbers": [
                    "Camera"
                ]
            }, {
                "file": "plugins/cordova-plugin-camera/www/CameraPopoverOptions.js",
                "id": "cordova-plugin-camera.CameraPopoverOptions",
                "clobbers": [
                    "CameraPopoverOptions"
                ]
            }, {
                "file": "plugins/cordova-plugin-camera/www/Camera.js",
                "id": "cordova-plugin-camera.camera",
                "clobbers": [
                    "navigator.camera"
                ]
            }, {
                "file": "plugins/cordova-plugin-camera/www/CameraPopoverHandle.js",
                "id": "cordova-plugin-camera.CameraPopoverHandle",
                "clobbers": [
                    "CameraPopoverHandle"
                ]
            }];

            var arrInAppBrowser = [{
                "file": "plugins/cordova-plugin-inappbrowser/www/inappbrowser.js",
                "id": "cordova-plugin-inappbrowser.inappbrowser",
                "clobbers": [
                    "cordova.InAppBrowser.open",
                    "window.open"
                ]
            }];

            var arrDronaHQ = [{
                "id": "cordova-plugin-dronahq.user",
                "clobbers": [
                    "DronaHQ.user"
                ]
            }, {
                "id": "cordova-plugin-dronahq.notification",
                "clobbers": [
                    "DronaHQ.notification"
                ]
            }, {
                "id": "cordova-plugin-dronahq.app",
                "clobbers": [
                    "DronaHQ.app"
                ]
            }, {
                "id": "cordova-plugin-dronahq.sync",
                "clobbers": [
                    "DronaHQ.sync"
                ]
            },
            {
                "id": "cordova-plugin-dronahq.CustomChromeTab",
                "clobbers": [
                    "DronaHQ.CustomChromeTab"
                ]
            },
            {
                "id": "cordova-plugin-dronahq.GPSPermission",
                "clobbers": [
                    "DronaHQ.GPSPermission"
                ]
            }, {
                "id": "cordova-plugin-dronahq.kvstore",
                "clobbers": [
                    "DronaHQ.KVStore"
                ]
            }
            ];

            var arrTts = [{
                "id": "cordova-plugin-tts",
                "clobbers": [
                    "tts"
                ]
            }]

            var arrNativeStorage = [{
                "id": "cordova-plugin-nativestorage.mainHandle",
                "clobbers": [
                    "DronaHQ.app"
                ]
            }, {
                "id": "cordova-plugin-nativestorage.NativeStorageError",
                "clobbers": [
                    "NativeStorage.NativeStorageError"
                ]
            }, {
                "id": "cordova-plugin-nativestorage.LocalStorageHandle",
                "clobbers": [
                    "NativeStorage.LocalStorageHandle"
                ]
            }];

            var arrfileOpener2 = [{
                'id': 'cordova-plugin-file-opener2',
                "clobbers": [
                    "FileOpener2"
                ]
            }]
            var arrSTT = [{
                "id": "cordova-plugin-speechrecognition",
                "clobbers": [
                    "plugins.speechRecognition"
                ]
            }]

            var arrFileTransfer = [{
                "file": "plugins/cordova-plugin-file-transfer/www/FileTransferError.js",
                "id": "cordova-plugin-file-transfer.FileTransferError",
                "clobbers": [
                    "window.FileTransferError"
                ]
            },
            {
                "file": "plugins/cordova-plugin-file-transfer/www/FileTransfer.js",
                "id": "cordova-plugin-file-transfer.FileTransfer",
                "clobbers": [
                    "window.FileTransfer"
                ]
            }
            ];

            //Diagnostics Plugin
            if (DronaHQ.onAndroid) {
                var arrDiagnostics = [{
                    "file": "",
                    "id": "cordova.plugins.diagnostic.Diagnostic",
                    "clobbers": [
                        "cordova.plugins.diagnostic"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.bluetooth",
                    "clobbers": [
                        "cordova.plugins.diagnostic.bluetooth"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.calendar",
                    "clobbers": [
                        "cordova.plugins.diagnostic.calendar"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.camera",
                    "clobbers": [
                        "plugins.diagnostic.camera"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.contacts",
                    "clobbers": [
                        "plugins.diagnostic.contacts"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.external_storage",
                    "clobbers": [
                        "plugins.diagnostic.external_storage"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.location",
                    "clobbers": [
                        "plugins.diagnostic.location"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.microphone",
                    "clobbers": [
                        "plugins.diagnostic.microphone"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.nfc",
                    "clobbers": [
                        "plugins.diagnostic.nfc"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.notifications",
                    "clobbers": [
                        "plugins.diagnostic.notifications"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.wifi",
                    "clobbers": [
                        "plugins.diagnostic.wifi"
                    ]
                }
                ]
            }
            if (DronaHQ.onIos) {
                var arrDiagnostics = [{
                    "file": "",
                    "id": "cordova.plugins.diagnostic.Diagnostic",
                    "clobbers": [
                        "cordova.plugins.diagnostic"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.bluetooth",
                    "clobbers": [
                        "cordova.plugins.diagnostic.bluetooth"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.calendar",
                    "clobbers": [
                        "cordova.plugins.diagnostic.calendar"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.camera",
                    "clobbers": [
                        "plugins.diagnostic.camera"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.contacts",
                    "clobbers": [
                        "plugins.diagnostic.contacts"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.location",
                    "clobbers": [
                        "plugins.diagnostic.location"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.microphone",
                    "clobbers": [
                        "plugins.diagnostic.microphone"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.motion",
                    "clobbers": [
                        "plugins.diagnostic.motion"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.notifications",
                    "clobbers": [
                        "plugins.diagnostic.notifications"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.reminders",
                    "clobbers": [
                        "plugins.diagnostic.reminders"
                    ]
                },
                {
                    "file": "",
                    "id": "cordova-diagnostic-plugin.wifi",
                    "clobbers": [
                        "plugins.diagnostic.wifi"
                    ]
                }
                ]
            }


            var arrFile = [{
                "file": "plugins/cordova-plugin-file/www/DirectoryEntry.js",
                "id": "cordova-plugin-file.DirectoryEntry",
                "clobbers": [
                    "window.DirectoryEntry"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/DirectoryReader.js",
                "id": "cordova-plugin-file.DirectoryReader",
                "clobbers": [
                    "window.DirectoryReader"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/Entry.js",
                "id": "cordova-plugin-file.Entry",
                "clobbers": [
                    "window.Entry"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/File.js",
                "id": "cordova-plugin-file.File",
                "clobbers": [
                    "window.File"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileEntry.js",
                "id": "cordova-plugin-file.FileEntry",
                "clobbers": [
                    "window.FileEntry"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileError.js",
                "id": "cordova-plugin-file.FileError",
                "clobbers": [
                    "window.FileError"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileReader.js",
                "id": "cordova-plugin-file.FileReader",
                "clobbers": [
                    "window.FileReader"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileSystem.js",
                "id": "cordova-plugin-file.FileSystem",
                "clobbers": [
                    "window.FileSystem"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileUploadOptions.js",
                "id": "cordova-plugin-file.FileUploadOptions",
                "clobbers": [
                    "window.FileUploadOptions"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileUploadResult.js",
                "id": "cordova-plugin-file.FileUploadResult",
                "clobbers": [
                    "window.FileUploadResult"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/FileWriter.js",
                "id": "cordova-plugin-file.FileWriter",
                "clobbers": [
                    "window.FileWriter"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/Flags.js",
                "id": "cordova-plugin-file.Flags",
                "clobbers": [
                    "window.Flags"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/LocalFileSystem.js",
                "id": "cordova-plugin-file.LocalFileSystem",
                "clobbers": [
                    "window.LocalFileSystem"
                ],
                "merges": [
                    "window"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/Metadata.js",
                "id": "cordova-plugin-file.Metadata",
                "clobbers": [
                    "window.Metadata"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/ProgressEvent.js",
                "id": "cordova-plugin-file.ProgressEvent",
                "clobbers": [
                    "window.ProgressEvent"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/fileSystems.js",
                "id": "cordova-plugin-file.fileSystems"
            }, {
                "file": "plugins/cordova-plugin-file/www/requestFileSystem.js",
                "id": "cordova-plugin-file.requestFileSystem",
                "clobbers": [
                    "window.requestFileSystem"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/resolveLocalFileSystemURI.js",
                "id": "cordova-plugin-file.resolveLocalFileSystemURI",
                "merges": [
                    "window"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/ios/FileSystem.js",
                "id": "cordova-plugin-file.iosFileSystem",
                "merges": [
                    "FileSystem"
                ]
            }, {
                "file": "plugins/cordova-plugin-file/www/fileSystems-roots.js",
                "id": "cordova-plugin-file.fileSystems-roots",
                "runs": true
            }, {
                "file": "plugins/cordova-plugin-file/www/fileSystemPaths.js",
                "id": "cordova-plugin-file.fileSystemPaths",
                "merges": [
                    "cordova"
                ],
                "runs": true
            }];

            var arrGeo = [{
                "file": "plugins/cordova-plugin-geolocation/www/Coordinates.js",
                "id": "cordova-plugin-geolocation.Coordinates",
                "clobbers": [
                    "Coordinates"
                ]
            }, {
                "file": "plugins/cordova-plugin-geolocation/www/PositionError.js",
                "id": "cordova-plugin-geolocation.PositionError",
                "clobbers": [
                    "PositionError"
                ]
            }, {
                "file": "plugins/cordova-plugin-geolocation/www/Position.js",
                "id": "cordova-plugin-geolocation.Position",
                "clobbers": [
                    "Position"
                ]
            }, {
                "file": "plugins/cordova-plugin-geolocation/www/geolocation.js",
                "id": "cordova-plugin-geolocation.geolocation",
                "clobbers": [
                    "navigator.geolocation"
                ]
            }];

            var arrSqlliteStorage = [{
                "file": "plugins/cordova-sqlite-storage/www/SQLitePlugin.js",
                "id": "cordova-sqlite-storage.SQLitePlugin",
                "clobbers": [
                    "SQLitePlugin"
                ]
            }];

            var arrDecimalKeyboard = [{
                "file": "",
                "id": "cordova-plugin-decimal-keyboard-wkwebview",
                "clobbers": [
                    "DecimalKeyboard"
                ]
            }];
            var arrKeyboardIOS = [{
                "file": "",
                "id": "ionic-plugin-keyboard.iOS",
                "clobbers": [
                    "cordova.plugins.Keyboard"
                ]
            }];

            var arrKeyboardAndroid = [{
                "file": "",
                "id": "ionic-plugin-keyboard.Android",
                "clobbers": [
                    "cordova.plugins.Keyboard"
                ]
            }];

            var arrLocalNotification = [{
                "file": "plugins/de.appplant.cordova.plugin.local-notification/www/local-notification.js",
                "id": "de.appplant.cordova.plugin.local-notification.LocalNotification",
                "clobbers": [
                    "cordova.plugins.notification.local",
                    "plugin.notification.local"
                ]
            }, {
                "file": "plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-core.js",
                "id": "de.appplant.cordova.plugin.local-notification.LocalNotification.Core",
                "clobbers": [
                    "cordova.plugins.notification.local.core",
                    "plugin.notification.local.core"
                ]
            }, {
                "file": "plugins/de.appplant.cordova.plugin.local-notification/www/local-notification-util.js",
                "id": "de.appplant.cordova.plugin.local-notification.LocalNotification.Util",
                "merges": [
                    "cordova.plugins.notification.local.core",
                    "plugin.notification.local.core"
                ]
            }];

            var arrCalendar = [{
                "file": "plugins/cordova-plugin-calendar/www/Calendar.js",
                "id": "cordova-plugin-calendar.Calendar",
                "clobbers": [
                    "Calendar"
                ]
            }];

            var arrDialog = [{
                "file": "plugins/cordova-plugin-dialogs/www/notification.js",
                "id": "cordova-plugin-dialogs.notification",
                "merges": [
                    "navigator.notification"
                ]
            }];

            var arrBarcodeScanner = [{
                "file": "plugins/phonegap-plugin-barcodescanner/www/barcodescanner.js",
                "id": "phonegap-plugin-barcodescanner.BarcodeScanner",
                "clobbers": [
                    "cordova.plugins.barcodeScanner"
                ]
            }];

            var arrNetworkInfo = [{
                "file": "plugins/cordova-plugin-network-information/www/network.js",
                "id": "cordova-plugin-network-information.network",
                "clobbers": [
                    "navigator.connection",
                    "navigator.network.connection"
                ]
            }, {
                "file": "plugins/cordova-plugin-network-information/www/Connection.js",
                "id": "cordova-plugin-network-information.Connection",
                "clobbers": [
                    "Connection"
                ]
            }];

            var arrSocialSharing = [{
                "file": "plugins/cordova-plugin-x-socialsharing/www/SocialSharing.js",
                "id": "cordova-plugin-x-socialsharing.SocialSharing",
                "clobbers": [
                    "window.plugins.socialsharing"
                ]
            }];

            var arrTableauOAuth = [{
                "file": "plugins/tableau-plugin-oauth/www/TableauOAuth.js",
                "id": "tableau-plugin-oauth.TableauOAuth",
                "clobbers": [
                    "TableauOAuth"
                ]
            }];

            var arrCallNumber = [{
                "file": "plugins/call-number/www/CallNumber.js",
                "id": "call-number.CallNumber",
                "clobbers": [
                    "call"
                ]
            }];

            var arrLocationAccuracy = [{
                "file": "plugins/cordova-plugin-request-location-accuracy/www/android/RequestLocationAccuracy.js",
                "id": "cordova-plugin-request-location-accuracy.RequestLocationAccuracy",
                "clobbers": [
                    "cordova.plugins.locationAccuracy"
                ]
            }];

            var arrDeviceOrientation = [{
                "file": "plugins/cordova-plugin-device-orientation/www/CompassError.js",
                "id": "cordova-plugin-device-orientation.CompassError",
                "clobbers": [
                    "CompassError"
                ]
            },
            {
                "file": "plugins/cordova-plugin-device-orientation/www/CompassHeading.js",
                "id": "cordova-plugin-device-orientation.CompassHeading",
                "clobbers": [
                    "CompassHeading"
                ]
            },
            {
                "file": "plugins/cordova-plugin-device-orientation/www/compass.js",
                "id": "cordova-plugin-device-orientation.compass",
                "clobbers": [
                    "navigator.compass"
                ]
            }
            ];

            var arrEmailPlugin = [{
                "file": "plugins/cordova-plugin-email-composer/www/email_composer.js",
                "id": "cordova-plugin-email-composer.EmailComposer",
                "clobbers": [
                    "cordova.plugins.email",
                    "plugin.email"
                ]
            }];

            var arrSSLCertChecker = [{
                "file": "plugins/cordova-plugin-sslcertificatechecker/www/SSLCertificateChecker.js",
                "id": "cordova-plugin-sslcertificatechecker.SSLCertificateChecker",
                "clobbers": [
                    "window.plugins.sslCertificateChecker"
                ]
            }];

            var arrContacts = [{
                "id": "cordova-plugin-contacts.contacts",
                "file": "plugins/cordova-plugin-contacts/www/contacts.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "navigator.contacts"
                ]
            }, {
                "id": "cordova-plugin-contacts.Contact",
                "file": "plugins/cordova-plugin-contacts/www/Contact.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "Contact"
                ]
            }, {
                "id": "cordova-plugin-contacts.convertUtils",
                "file": "plugins/cordova-plugin-contacts/www/convertUtils.js",
                "pluginId": "cordova-plugin-contacts"
            }, {
                "id": "cordova-plugin-contacts.ContactAddress",
                "file": "plugins/cordova-plugin-contacts/www/ContactAddress.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactAddress"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactError",
                "file": "plugins/cordova-plugin-contacts/www/ContactError.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactError"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactField",
                "file": "plugins/cordova-plugin-contacts/www/ContactField.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactField"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactFindOptions",
                "file": "plugins/cordova-plugin-contacts/www/ContactFindOptions.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactFindOptions"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactName",
                "file": "plugins/cordova-plugin-contacts/www/ContactName.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactName"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactOrganization",
                "file": "plugins/cordova-plugin-contacts/www/ContactOrganization.js",
                "pluginId": "cordova-plugin-contacts",
                "clobbers": [
                    "ContactOrganization"
                ]
            }, {
                "id": "cordova-plugin-contacts.ContactFieldType",
                "file": "plugins/cordova-plugin-contacts/www/ContactFieldType.js",
                "pluginId": "cordova-plugin-contacts",
                "merges": [
                    ""
                ]
            }];

            if (DronaHQ.onIos) {
                var arrContactsiOS = [{
                    "id": "cordova-plugin-contacts.contacts-ios",
                    "file": "plugins/cordova-plugin-contacts/www/ios/contacts.js",
                    "pluginId": "cordova-plugin-contacts",
                    "merges": [
                        "navigator.contacts"
                    ]
                }, {
                    "id": "cordova-plugin-contacts.Contact-iOS",
                    "file": "plugins/cordova-plugin-contacts/www/ios/Contact.js",
                    "pluginId": "cordova-plugin-contacts",
                    "merges": [
                        "Contact"
                    ]
                }];
            }

            var arrSMS = [{
                "id": "cordova-sms-plugin.Sms",
                "file": "plugins/cordova-sms-plugin/www/sms.js",
                "pluginId": "cordova-sms-plugin",
                "clobbers": [
                    "window.sms"
                ]
            }];

            var arrAdal = [{
                "file": "plugins/cordova-plugin-ms-adal/www/utility.js",
                "id": "cordova-plugin-ms-adal.utility",
                "runs": true
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/AuthenticationContext.js",
                "id": "cordova-plugin-ms-adal.AuthenticationContext",
                "clobbers": [
                    "Microsoft.ADAL.AuthenticationContext"
                ]
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/CordovaBridge.js",
                "id": "cordova-plugin-ms-adal.CordovaBridge"
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/AuthenticationResult.js",
                "id": "cordova-plugin-ms-adal.AuthenticationResult"
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/TokenCache.js",
                "id": "cordova-plugin-ms-adal.TokenCache"
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/TokenCacheItem.js",
                "id": "cordova-plugin-ms-adal.TokenCacheItem"
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/UserInfo.js",
                "id": "cordova-plugin-ms-adal.UserInfo"
            }, {
                "file": "plugins/cordova-plugin-ms-adal/www/AuthenticationSettings.js",
                "id": "cordova-plugin-ms-adal.AuthenticationSettings",
                "clobbers": [
                    "Microsoft.ADAL.AuthenticationSettings"
                ]
            }];

            var arrMedia = [{
                "id": "cordova-plugin-media.MediaError",
                "file": "plugins/cordova-plugin-media/www/MediaError.js",
                "pluginId": "cordova-plugin-media",
                "clobbers": [
                    "window.MediaError"
                ]
            },
            {
                "id": "cordova-plugin-media.Media",
                "file": "plugins/cordova-plugin-media/www/Media.js",
                "pluginId": "cordova-plugin-media",
                "clobbers": [
                    "window.Media"
                ]
            }
            ];

            var arrGlobalization = [{
                "id": "cordova-plugin-globalization.GlobalizationError",
                "file": "plugins/cordova-plugin-globalization/www/GlobalizationError.js",
                "pluginId": "cordova-plugin-globalization",
                "clobbers": [
                    "window.GlobalizationError"
                ]
            },
            {
                "id": "cordova-plugin-globalization.globalization",
                "file": "plugins/cordova-plugin-globalization/www/globalization.js",
                "pluginId": "cordova-plugin-globalization",
                "clobbers": [
                    "navigator.globalization"
                ]
            }
            ];
            var arrPedometer = [{
                "id": "cordova-plugin-pedometer",
                "clobbers": [
                    "pedometer"
                ]
            }];
            var arrAccelerometer = [{
                "id": "cordova-plugin-device-motion",
                "clobbers": [
                    "navigator.accelerometer"
                ]
            }];
            var arrGyroscope = [{
                "id": "cordova-plugin-gyroscope",
                "clobbers": [
                    "navigator.gyroscope"
                ]
            }];
            var arrGeofence = [{
                "id": "cordova-plugin-geofence",
                "clobbers": [
                    "window.geofence"
                ]
            }];
            var arrBgGeolocation = [{
                "id": "cordova-background-geolocation-plugin",
                "clobbers": [
                    "window.BackgroundGeolocation"
                ]
            }];

            var arrNfc = [{
                "id": "phonegap-nfc",
                "clobbers": [
                    "DronaHQ.nfcPlugin"
                ]
            }]

            var arrPluginList = [];
            var objPluginMeta = {
                "cordova-plugin-file-transfer": "1.3.0",
                "": ""
            };

            // Camera
            if (DronaHQ.plugins.camera) {
                arrPluginList = arrPluginList.concat(arrCamera);
                objPluginMeta["cordova-plugin-camera"] = "1.2.0";
            }
            // Device
            if (DronaHQ.plugins.device) {
                arrPluginList = arrPluginList.concat(arrDevice);
                objPluginMeta["cordova-plugin-device"] = "1.0.1";
            }
            // InAppBrowser
            if (DronaHQ.plugins.inappbrowser) {
                arrPluginList = arrPluginList.concat(arrInAppBrowser);
                objPluginMeta["cordova-plugin-inappbrowser"] = "1.0.1";
            }
            // DronaHQ
            if (DronaHQ.plugins.dronahq) {
                arrPluginList = arrPluginList.concat(arrDronaHQ);
                objPluginMeta["cordova-plugin-dronahq"] = "0.5";
            }
            // File
            if (DronaHQ.plugins.file) {
                arrPluginList = arrPluginList.concat(arrFile);
                objPluginMeta["cordova-plugin-file"] = "3.0.0";
            }
            // FileTransfer
            if (DronaHQ.plugins.filetransfer) {
                arrPluginList = arrPluginList.concat(arrFileTransfer);
                objPluginMeta["cordova-plugin-file-transfer"] = "1.3.0";
            }
            // Geo
            if (DronaHQ.plugins.geo) {
                arrPluginList = arrPluginList.concat(arrGeo);
                objPluginMeta["cordova-plugin-geolocation"] = "1.0.2-dev";
            }
            // Sqlite
            if (DronaHQ.plugins.sqlite) {
                arrPluginList = arrPluginList.concat(arrSqlliteStorage);
                objPluginMeta["cordova-sqlite-storage"] = "0.8.0";
            }
            //Decimal Keyboard
            if (DronaHQ.plugins.DecimalKeyboard) {
                arrPluginList = arrPluginList.concat(arrDecimalKeyboard);
                objPluginMeta["cordova-plugin-decimal-keyboard-wkwebview"] = "1.0.4";
            }

            // Keyboard
            if (DronaHQ.plugins.keyboard) {
                if (DronaHQ.onIos) {
                    arrPluginList = arrPluginList.concat(arrKeyboardIOS);
                    objPluginMeta["ionic-plugin-keyboard"] = "2.0.1";
                }
                if (DronaHQ.onAndroid) {
                    arrPluginList = arrPluginList.concat(arrKeyboardAndroid);
                    objPluginMeta["ionic-plugin-keyboard"] = "2.0.1";
                }
            }
            // Local Notification
            if (DronaHQ.plugins.localnotification) {
                arrPluginList = arrPluginList.concat(arrLocalNotification);
                objPluginMeta["cordova-plugin-local-notifications"] = "0.8.4";
            }

            // Calendar
            if (DronaHQ.plugins.calendar) {
                arrPluginList = arrPluginList.concat(arrCalendar);
            }

            // Dialog
            arrPluginList = arrPluginList.concat(arrDialog);

            // Barcode Scanner
            arrPluginList = arrPluginList.concat(arrBarcodeScanner);

            // Connection network
            arrPluginList = arrPluginList.concat(arrNetworkInfo);

            // Social Sharing
            arrPluginList = arrPluginList.concat(arrSocialSharing);

            // Tableau OAuth Plugin
            if (DronaHQ.onIos) {
                arrPluginList = arrPluginList.concat(arrTableauOAuth);
            }

            arrPluginList = arrPluginList.concat(arrCallNumber);

            if (DronaHQ.onAndroid || DronaHQ.onIos) {
                arrPluginList = arrPluginList.concat(arrLocationAccuracy);
            }

            arrPluginList = arrPluginList.concat(arrEmailPlugin);

            // SSL Certificate Checker
            arrPluginList = arrPluginList.concat(arrSSLCertChecker);

            // Contacts
            arrPluginList = arrPluginList.concat(arrContacts);
            if (DronaHQ.onIos) {
                arrPluginList = arrPluginList.concat(arrContactsiOS);
            }

            // SMS
            arrPluginList = arrPluginList.concat(arrSMS);

            // ADAL
            arrPluginList = arrPluginList.concat(arrAdal);


            if (DronaHQ.onIos || DronaHQ.onAndroid) {
                arrPluginList = arrPluginList.concat(arrMedia) // Cordova Media
                arrPluginList = arrPluginList.concat(arrDiagnostics); // Diagnostics
                arrPluginList = arrPluginList.concat(arrNfc) // nfc plugin                
                arrPluginList = arrPluginList.concat(arrGyroscope) // arrGyroscope plugin                
                arrPluginList = arrPluginList.concat(arrGeofence) // arrGeofence plugin                
                arrPluginList = arrPluginList.concat(arrBgGeolocation) // background geolocation plugin plugin                
            }


            if (DronaHQ.onIos || DronaHQ.onAndroid) {

            }


            // Globalization
            arrPluginList = arrPluginList.concat(arrGlobalization);

            arrPluginList = arrPluginList.concat(arrTts);

            // arrPluginList = arrPluginList.concat(arrNativeStorage);

            arrPluginList = arrPluginList.concat(arrfileOpener2);

            //Speech to Text
            arrPluginList = arrPluginList.concat(arrSTT);


            //pedometer Plugin
            arrPluginList = arrPluginList.concat(arrPedometer)
            arrPluginList = arrPluginList.concat(arrAccelerometer)



            module.exports = arrPluginList;
            module.exports.metadata = objPluginMeta;
        });

        // file: src/common/pluginloader.js
        define("cordova/pluginloader", function (require, exports, module) {
            var modulemapper = require('cordova/modulemapper');
            var urlutil = require('cordova/urlutil');

            // Helper function to inject a <script> tag.
            // Exported for testing.
            exports.injectScript = function (url, onload, onerror) {
                var script = document.createElement("script");
                // onload fires even when script fails loads with an error.
                script.onload = onload;
                // onerror fires for malformed URLs.
                script.onerror = onerror;
                script.src = url;
                document.head.appendChild(script);
            };

            function injectIfNecessary(id, url, onload, onerror) {
                onerror = onerror || onload;
                if (id in define.moduleMap) {
                    onload();
                } else {
                    exports.injectScript(url, function () {
                        if (id in define.moduleMap) {
                            onload();
                        } else {
                            onerror();
                        }
                    }, onerror);
                }
            }

            function onScriptLoadingComplete(moduleList, finishPluginLoading) {
                // Loop through all the plugins and then through their clobbers and merges.
                for (var i = 0, module; module = moduleList[i]; i++) {
                    if (module.clobbers && module.clobbers.length) {
                        for (var j = 0; j < module.clobbers.length; j++) {
                            modulemapper.clobbers(module.id, module.clobbers[j]);
                        }
                    }

                    if (module.merges && module.merges.length) {
                        for (var k = 0; k < module.merges.length; k++) {
                            modulemapper.merges(module.id, module.merges[k]);
                        }
                    }

                    // Finally, if runs is truthy we want to simply require() the module.
                    if (module.runs) {
                        modulemapper.runs(module.id);
                    }
                }

                finishPluginLoading();
            }

            // Handler for the cordova_plugins.js content.
            // See plugman's plugin_loader.js for the details of this object.
            // This function is only called if the really is a plugins array that isn't empty.
            // Otherwise the onerror response handler will just call finishPluginLoading().
            function handlePluginsObject(path, moduleList, finishPluginLoading) {
                // Now inject the scripts.
                var scriptCounter = moduleList.length;

                if (!scriptCounter) {
                    finishPluginLoading();
                    return;
                }

                function scriptLoadedCallback() {
                    if (!--scriptCounter) {
                        onScriptLoadingComplete(moduleList, finishPluginLoading);
                    }
                }

                for (var i = 0; i < moduleList.length; i++) {
                    injectIfNecessary(moduleList[i].id, path + moduleList[i].file, scriptLoadedCallback);
                }
            }

            function findCordovaPath() {
                var path = null;
                var scripts = document.getElementsByTagName('script');
                var term = '/cordova.js';
                for (var n = scripts.length - 1; n > -1; n--) {
                    var src = scripts[n].src.replace(/\?.*$/, ''); // Strip any query param (CB-6007).
                    if (src.indexOf(term) == (src.length - term.length)) {
                        path = src.substring(0, src.length - term.length) + '/';
                        break;
                    }
                }
                return path;
            }

            // Tries to load all plugins' js-modules.
            // This is an async process, but onDeviceReady is blocked on onPluginsReady.
            // onPluginsReady is fired when there are no plugins to load, or they are all done.
            exports.load = function (callback) {
                var pathPrefix = findCordovaPath();
                if (pathPrefix === null) {
                    //console.log('Could not find cordova.js script tag. Plugin loading may fail.');
                    pathPrefix = '';
                }
                injectIfNecessary('cordova/plugin_list', pathPrefix + 'cordova_plugins.js', function () {
                    var moduleList = require("cordova/plugin_list");

                    //Normally cordova likes to inject plugin scripts in the page
                    //Our case, we want 1 js that will be used by developers.
                    //So, we will have all those plugin code in this file only
                    _fnCordovaPlugins();

                    handlePluginsObject(pathPrefix, moduleList, callback);
                }, callback);
            };
        });

        // file: src/common/urlutil.js
        define("cordova/urlutil", function (require, exports, module) {
            /**
             * For already absolute URLs, returns what is passed in.
             * For relative URLs, converts them to absolute ones.
             */
            exports.makeAbsolute = function makeAbsolute(url) {
                var anchorEl = document.createElement('a');
                anchorEl.href = url;
                return anchorEl.href;
            };
        });

        // file: src/common/utils.js
        define("cordova/utils", function (require, exports, module) {
            var utils = exports;

            /**
             * Defines a property getter / setter for obj[key].
             */
            utils.defineGetterSetter = function (obj, key, getFunc, opt_setFunc) {
                if (Object.defineProperty) {
                    var desc = {
                        get: getFunc,
                        configurable: true
                    };
                    if (opt_setFunc) {
                        desc.set = opt_setFunc;
                    }
                    Object.defineProperty(obj, key, desc);
                } else {
                    obj.__defineGetter__(key, getFunc);
                    if (opt_setFunc) {
                        obj.__defineSetter__(key, opt_setFunc);
                    }
                }
            };

            /**
             * Defines a property getter for obj[key].
             */
            utils.defineGetter = utils.defineGetterSetter;

            utils.arrayIndexOf = function (a, item) {
                if (a.indexOf) {
                    return a.indexOf(item);
                }
                var len = a.length;
                for (var i = 0; i < len; ++i) {
                    if (a[i] == item) {
                        return i;
                    }
                }
                return -1;
            };

            /**
             * Returns whether the item was found in the array.
             */
            utils.arrayRemove = function (a, item) {
                var index = utils.arrayIndexOf(a, item);
                if (index != -1) {
                    a.splice(index, 1);
                }
                return index != -1;
            };

            utils.typeName = function (val) {
                return Object.prototype.toString.call(val).slice(8, -1);
            };

            /**
             * Returns an indication of whether the argument is an array or not
             */
            utils.isArray = function (a) {
                return utils.typeName(a) == 'Array';
            };

            /**
             * Returns an indication of whether the argument is a Date or not
             */
            utils.isDate = function (d) {
                return utils.typeName(d) == 'Date';
            };

            /**
             * Does a deep clone of the object.
             */
            utils.clone = function (obj) {
                if (!obj || typeof obj == 'function' || utils.isDate(obj) || typeof obj != 'object') {
                    return obj;
                }

                var retVal, i;

                if (utils.isArray(obj)) {
                    retVal = [];
                    for (i = 0; i < obj.length; ++i) {
                        retVal.push(utils.clone(obj[i]));
                    }
                    return retVal;
                }

                retVal = {};
                for (i in obj) {
                    if (!(i in retVal) || retVal[i] != obj[i]) {
                        retVal[i] = utils.clone(obj[i]);
                    }
                }
                return retVal;
            };

            /**
             * Returns a wrapped version of the function
             */
            utils.close = function (context, func, params) {
                if (typeof params == 'undefined') {
                    return function () {
                        return func.apply(context, arguments);
                    };
                } else {
                    return function () {
                        return func.apply(context, params);
                    };
                }
            };

            /**
             * Create a UUID
             */
            utils.createUUID = function () {
                return UUIDcreatePart(4) + '-' +
                    UUIDcreatePart(2) + '-' +
                    UUIDcreatePart(2) + '-' +
                    UUIDcreatePart(2) + '-' +
                    UUIDcreatePart(6);
            };

            /**
             * Extends a child object from a parent object using classical inheritance
             * pattern.
             */
            utils.extend = (function () {
                // proxy used to establish prototype chain
                var F = function () { };
                // extend Child from Parent
                return function (Child, Parent) {
                    F.prototype = Parent.prototype;
                    Child.prototype = new F();
                    Child.__super__ = Parent.prototype;
                    Child.prototype.constructor = Child;
                };
            }());

            /**
             * Alerts a message in any available way: alert or console.log.
             */
            utils.alert = function (msg) {
                if (window.alert) {
                    //window.alert(msg);
                    console.log(msg);
                } else if (console && console.log) {
                    console.log(msg);
                }
            };

            //------------------------------------------------------------------------------
            function UUIDcreatePart(length) {
                var uuidpart = "";
                for (var i = 0; i < length; i++) {
                    var uuidchar = parseInt((Math.random() * 256), 10).toString(16);
                    if (uuidchar.length == 1) {
                        uuidchar = "0" + uuidchar;
                    }
                    uuidpart += uuidchar;
                }
                return uuidpart;
            }
        });

        window.cordova = require('cordova');
        // file: src/scripts/bootstrap.js

        require('cordova/init');
    };

    var _fnCordovaiOS = function () {
        // Platform: ios
        // 3.6.3
        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */

        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        // file: D:/Github/cordova-ios/cordova-js-src/exec.js
        define("cordova/exec", function (require, exports, module) {
            /**
             * Creates a gap bridge iframe used to notify the native code about queued
             * commands.
             */
            var cordova = require('cordova'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                base64 = require('cordova/base64'),
                // XHR mode does not work on iOS 4.2.
                // XHR mode's main advantage is working around a bug in -webkit-scroll, which
                // doesn't exist only on iOS 5.x devices.
                // IFRAME_NAV is the fastest.
                // IFRAME_HASH could be made to enable synchronous bridge calls if we wanted this feature.
                jsToNativeModes = {
                    IFRAME_NAV: 0,
                    XHR_NO_PAYLOAD: 1,
                    XHR_WITH_PAYLOAD: 2,
                    XHR_OPTIONAL_PAYLOAD: 3,
                    IFRAME_HASH_NO_PAYLOAD: 4,
                    // Bundling the payload turns out to be slower. Probably since it has to be URI encoded / decoded.
                    IFRAME_HASH_WITH_PAYLOAD: 5,
                    WK_WEBVIEW_BINDING: 6
                },
                bridgeMode,
                execIframe,
                execHashIframe,
                hashToggle = 1,
                execXhr,
                requestCount = 0,
                vcHeaderValue = null,
                commandQueue = [], // Contains pending JS->Native messages.
                isInContextOfEvalJs = 0;

            function createExecIframe() {
                var iframe = document.createElement("iframe");
                iframe.style.display = 'none';
                document.body.appendChild(iframe);
                return iframe;
            }

            function createHashIframe() {
                var ret = createExecIframe();
                // Hash changes don't work on about:blank, so switch it to file:///.
                ret.contentWindow.history.replaceState(null, null, 'file:///#');
                return ret;
            }

            function shouldBundleCommandJson() {
                if (bridgeMode === jsToNativeModes.XHR_WITH_PAYLOAD) {
                    return true;
                }
                if (bridgeMode === jsToNativeModes.XHR_OPTIONAL_PAYLOAD) {
                    var payloadLength = 0;
                    for (var i = 0; i < commandQueue.length; ++i) {
                        payloadLength += commandQueue[i].length;
                    }
                    // The value here was determined using the benchmark within CordovaLibApp on an iPad 3.
                    return payloadLength < 4500;
                }
                return false;
            }

            function massageArgsJsToNative(args) {
                if (!args || utils.typeName(args) != 'Array') {
                    return args;
                }
                var ret = [];
                args.forEach(function (arg, i) {
                    if (utils.typeName(arg) == 'ArrayBuffer') {
                        ret.push({
                            'CDVType': 'ArrayBuffer',
                            'data': base64.fromArrayBuffer(arg)
                        });
                    } else {
                        ret.push(arg);
                    }
                });
                return ret;
            }

            function massageMessageNativeToJs(message) {
                if (message.CDVType == 'ArrayBuffer') {
                    var stringToArrayBuffer = function (str) {
                        var ret = new Uint8Array(str.length);
                        for (var i = 0; i < str.length; i++) {
                            ret[i] = str.charCodeAt(i);
                        }
                        return ret.buffer;
                    };
                    var base64ToArrayBuffer = function (b64) {
                        return stringToArrayBuffer(atob(b64));
                    };
                    message = base64ToArrayBuffer(message.data);
                }
                return message;
            }

            function convertMessageToArgsNativeToJs(message) {
                var args = [];
                if (!message || !message.hasOwnProperty('CDVType')) {
                    args.push(message);
                } else if (message.CDVType == 'MultiPart') {
                    message.messages.forEach(function (e) {
                        args.push(massageMessageNativeToJs(e));
                    });
                } else {
                    args.push(massageMessageNativeToJs(message));
                }
                return args;
            }

            function iOSExec() {
                // Use XHR for iOS 5 to work around a bug in -webkit-scroll.
                // Use IFRAME_NAV elsewhere since it's faster and XHR bridge
                // seems to have bugs in newer OS's (CB-3900, CB-3359, CB-5457, CB-4970, CB-4998, CB-5134)
                if (bridgeMode === undefined) {
                    if (navigator.userAgent) {
                        bridgeMode = navigator.userAgent.indexOf(' 5_') == -1 ? jsToNativeModes.IFRAME_NAV : jsToNativeModes.XHR_NO_PAYLOAD;
                    } else {
                        bridgeMode = jsToNativeModes.IFRAME_NAV;
                    }
                }

                if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.cordova && window.webkit.messageHandlers.cordova.postMessage) {
                    bridgeMode = jsToNativeModes.WK_WEBVIEW_BINDING;
                }

                var successCallback, failCallback, service, action, actionArgs, splitCommand;
                var callbackId = null;
                if (typeof arguments[0] !== "string") {
                    // FORMAT ONE
                    successCallback = arguments[0];
                    failCallback = arguments[1];
                    service = arguments[2];
                    action = arguments[3];
                    actionArgs = arguments[4];

                    // Since we need to maintain backwards compatibility, we have to pass
                    // an invalid callbackId even if no callback was provided since plugins
                    // will be expecting it. The Cordova.exec() implementation allocates
                    // an invalid callbackId and passes it even if no callbacks were given.
                    callbackId = 'INVALID';
                } else {
                    // FORMAT TWO, REMOVED
                    try {
                        splitCommand = arguments[0].split(".");
                        action = splitCommand.pop();
                        service = splitCommand.join(".");
                        actionArgs = Array.prototype.splice.call(arguments, 1);

                        console.log('The old format of this exec call has been removed (deprecated since 2.1). Change to: ' +
                            "cordova.exec(null, null, \"" + service + "\", \"" + action + "\"," + JSON.stringify(actionArgs) + ");"
                        );
                        return;
                    } catch (e) { }
                }

                // If actionArgs is not provided, default to an empty array
                actionArgs = actionArgs || [];

                // Register the callbacks and add the callbackId to the positional
                // arguments if given.
                callbackId = service + cordova.callbackId++;
                if (successCallback || failCallback) {
                    cordova.callbacks[callbackId] = {
                        success: successCallback,
                        fail: failCallback
                    };
                }

                actionArgs = massageArgsJsToNative(actionArgs);

                var command = [callbackId, service, action, actionArgs];

                // Stringify and queue the command. We stringify to command now to
                // effectively clone the command arguments in case they are mutated before
                // the command is executed.
                commandQueue.push(JSON.stringify(command));

                if (bridgeMode === jsToNativeModes.WK_WEBVIEW_BINDING) {
                    window.webkit.messageHandlers.cordova.postMessage(command);
                } else {
                    // If we're in the context of a stringByEvaluatingJavaScriptFromString call,
                    // then the queue will be flushed when it returns; no need for a poke.
                    // Also, if there is already a command in the queue, then we've already
                    // poked the native side, so there is no reason to do so again.
                    if (!isInContextOfEvalJs && commandQueue.length == 1) {
                        switch (bridgeMode) {
                            case jsToNativeModes.XHR_NO_PAYLOAD:
                            case jsToNativeModes.XHR_WITH_PAYLOAD:
                            case jsToNativeModes.XHR_OPTIONAL_PAYLOAD:
                                pokeNativeViaXhr();
                                break;
                            default: // iframe-based.
                                pokeNativeViaIframe();
                        }
                    }
                }
            }

            function pokeNativeViaXhr() {
                // This prevents sending an XHR when there is already one being sent.
                // This should happen only in rare circumstances (refer to unit tests).
                if (execXhr && execXhr.readyState != 4) {
                    execXhr = null;
                }
                // Re-using the XHR improves exec() performance by about 10%.
                execXhr = execXhr || new XMLHttpRequest();
                // Changing this to a GET will make the XHR reach the URIProtocol on 4.2.
                // For some reason it still doesn't work though...
                // Add a timestamp to the query param to prevent caching.
                execXhr.open('HEAD', "/!gap_exec?" + (+new Date()), true);
                if (!vcHeaderValue) {
                    vcHeaderValue = /.*\((.*)\)/.exec(navigator.userAgent)[1];
                }
                execXhr.setRequestHeader('vc', vcHeaderValue);
                execXhr.setRequestHeader('rc', ++requestCount);
                if (shouldBundleCommandJson()) {
                    execXhr.setRequestHeader('cmds', iOSExec.nativeFetchMessages());
                }
                execXhr.send(null);
            }

            function pokeNativeViaIframe() {
                // CB-5488 - Don't attempt to create iframe before document.body is available.
                if (!document.body) {
                    setTimeout(pokeNativeViaIframe);
                    return;
                }
                if (bridgeMode === jsToNativeModes.IFRAME_HASH_NO_PAYLOAD || bridgeMode === jsToNativeModes.IFRAME_HASH_WITH_PAYLOAD) {
                    execHashIframe = execHashIframe || createHashIframe();
                    // Check if they've removed it from the DOM, and put it back if so.
                    if (!execHashIframe.contentWindow) {
                        execHashIframe = createHashIframe();
                    }
                    // The delegate method is called only when the hash changes, so toggle it back and forth.
                    hashToggle = hashToggle ^ 3;
                    var hashValue = '%0' + hashToggle;
                    if (bridgeMode === jsToNativeModes.IFRAME_HASH_WITH_PAYLOAD) {
                        hashValue += iOSExec.nativeFetchMessages();
                    }
                    execHashIframe.contentWindow.location.hash = hashValue;
                } else {
                    execIframe = execIframe || createExecIframe();
                    // Check if they've removed it from the DOM, and put it back if so.
                    if (!execIframe.contentWindow) {
                        execIframe = createExecIframe();
                    }
                    execIframe.src = "gap://ready";
                }
            }

            iOSExec.jsToNativeModes = jsToNativeModes;

            iOSExec.setJsToNativeBridgeMode = function (mode) {
                // Remove the iFrame since it may be no longer required, and its existence
                // can trigger browser bugs.
                // https://issues.apache.org/jira/browse/CB-593
                if (execIframe) {
                    execIframe.parentNode.removeChild(execIframe);
                    execIframe = null;
                }
                bridgeMode = mode;
            };

            iOSExec.nativeFetchMessages = function () {
                // Each entry in commandQueue is a JSON string already.
                if (!commandQueue.length) {
                    return '';
                }
                var json = '[' + commandQueue.join(',') + ']';
                commandQueue.length = 0;
                return json;
            };

            iOSExec.nativeCallback = function (callbackId, status, message, keepCallback) {
                return iOSExec.nativeEvalAndFetch(function () {
                    var success = status === 0 || status === 1;
                    var args = convertMessageToArgsNativeToJs(message);
                    cordova.callbackFromNative(callbackId, success, status, args, keepCallback);
                });
            };

            iOSExec.nativeEvalAndFetch = function (func) {
                // This shouldn't be nested, but better to be safe.
                isInContextOfEvalJs++;
                try {
                    func();
                    return iOSExec.nativeFetchMessages();
                } finally {
                    isInContextOfEvalJs--;
                }
            };

            module.exports = iOSExec;
        });

        // file: D:/Github/cordova-ios/cordova-js-src/platform.js
        define("cordova/platform", function (require, exports, module) {
            module.exports = {
                id: 'ios',
                bootstrap: function () {
                    require('cordova/channel').onNativeReady.fire();
                }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);
    };

    var _fnCordovAndroid = function () {
        // Platform: android
        // 3.6.3
        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */
        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        // file: src/android/android/nativeapiprovider.js
        define("cordova/android/nativeapiprovider", function (require, exports, module) {
            /**
             * Exports the ExposedJsApi.java object if available, otherwise exports the PromptBasedNativeApi.
             */

            var nativeApi = this._cordovaNative || require('cordova/android/promptbasednativeapi');
            var currentApi = nativeApi;

            module.exports = {
                get: function () {
                    return currentApi;
                },
                setPreferPrompt: function (value) {
                    currentApi = value ? require('cordova/android/promptbasednativeapi') : nativeApi;
                },
                // Used only by tests.
                set: function (value) {
                    currentApi = value;
                }
            };
        });

        // file: src/android/android/promptbasednativeapi.js
        define("cordova/android/promptbasednativeapi", function (require, exports, module) {
            /**
             * Implements the API of ExposedJsApi.java, but uses prompt() to communicate.
             * This is used pre-JellyBean, where addJavascriptInterface() is disabled.
             */

            module.exports = {
                exec: function (bridgeSecret, service, action, callbackId, argsJson) {
                    return prompt(argsJson, 'gap:' + JSON.stringify([bridgeSecret, service, action, callbackId]));
                },
                setNativeToJsBridgeMode: function (bridgeSecret, value) {
                    prompt(value, 'gap_bridge_mode:' + bridgeSecret);
                },
                retrieveJsMessages: function (bridgeSecret, fromOnlineEvent) {
                    return prompt(+fromOnlineEvent, 'gap_poll:' + bridgeSecret);
                }
            };
        });

        // file: src/android/exec.js
        define("cordova/exec", function (require, exports, module) {
            /**
             * Execute a cordova command.  It is up to the native side whether this action
             * is synchronous or asynchronous.  The native side can return:
             *      Synchronous: PluginResult object as a JSON string
             *      Asynchronous: Empty string ""
             * If async, the native side will cordova.callbackSuccess or cordova.callbackError,
             * depending upon the result of the action.
             *
             * @param {Function} success    The success callback
             * @param {Function} fail       The fail callback
             * @param {String} service      The name of the service to use
             * @param {String} action       Action to be run in cordova
             * @param {String[]} [args]     Zero or more arguments to pass to the method
             */
            var cordova = require('cordova'),
                nativeApiProvider = require('cordova/android/nativeapiprovider'),
                utils = require('cordova/utils'),
                base64 = require('cordova/base64'),
                channel = require('cordova/channel'),
                jsToNativeModes = {
                    PROMPT: 0,
                    JS_OBJECT: 1
                },
                nativeToJsModes = {
                    // Polls for messages using the JS->Native bridge.
                    POLLING: 0,
                    // For LOAD_URL to be viable, it would need to have a work-around for
                    // the bug where the soft-keyboard gets dismissed when a message is sent.
                    LOAD_URL: 1,
                    // For the ONLINE_EVENT to be viable, it would need to intercept all event
                    // listeners (both through addEventListener and window.ononline) as well
                    // as set the navigator property itself.
                    ONLINE_EVENT: 2,
                    // Uses reflection to access private APIs of the WebView that can send JS
                    // to be executed.
                    // Requires Android 3.2.4 or above.
                    PRIVATE_API: 3
                },
                jsToNativeBridgeMode, // Set lazily.
                nativeToJsBridgeMode = nativeToJsModes.ONLINE_EVENT,
                pollEnabled = false,
                messagesFromNative = [],
                bridgeSecret = -1;

            function androidExec(success, fail, service, action, args) {
                if (bridgeSecret < 0) {
                    // If we ever catch this firing, we'll need to queue up exec()s
                    // and fire them once we get a secret. For now, I don't think
                    // it's possible for exec() to be called since plugins are parsed but
                    // not run until until after onNativeReady.
                    throw new Error('exec() called without bridgeSecret');
                }
                // Set default bridge modes if they have not already been set.
                // By default, we use the failsafe, since addJavascriptInterface breaks too often
                if (jsToNativeBridgeMode === undefined) {
                    androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);
                }

                // Process any ArrayBuffers in the args into a string.
                args = args ? args : [];
                for (var i = 0; i < args.length; i++) {
                    if (utils.typeName(args[i]) == 'ArrayBuffer') {
                        args[i] = base64.fromArrayBuffer(args[i]);
                    }
                }

                var callbackId = service + cordova.callbackId++,
                    argsJson = JSON.stringify(args);

                if (success || fail) {
                    cordova.callbacks[callbackId] = {
                        success: success,
                        fail: fail
                    };
                }

                var messages = nativeApiProvider.get().exec(bridgeSecret, service, action, callbackId, argsJson);
                // If argsJson was received by Java as null, try again with the PROMPT bridge mode.
                // This happens in rare circumstances, such as when certain Unicode characters are passed over the bridge on a Galaxy S2.  See CB-2666.
                if (jsToNativeBridgeMode == jsToNativeModes.JS_OBJECT && messages === "@Null arguments.") {
                    androidExec.setJsToNativeBridgeMode(jsToNativeModes.PROMPT);
                    androidExec(success, fail, service, action, args);
                    androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);
                    return;
                } else {
                    androidExec.processMessages(messages, true);
                }
            }

            androidExec.init = function () {
                bridgeSecret = +prompt('', 'gap_init:' + nativeToJsBridgeMode);
                channel.onNativeReady.fire();
            };

            function pollOnceFromOnlineEvent() {
                pollOnce(true);
            }

            function pollOnce(opt_fromOnlineEvent) {
                if (bridgeSecret < 0) {
                    // This can happen when the NativeToJsMessageQueue resets the online state on page transitions.
                    // We know there's nothing to retrieve, so no need to poll.
                    return;
                }
                var msg = nativeApiProvider.get().retrieveJsMessages(bridgeSecret, !!opt_fromOnlineEvent);
                androidExec.processMessages(msg);
            }

            function pollingTimerFunc() {
                if (pollEnabled) {
                    pollOnce();
                    setTimeout(pollingTimerFunc, 50);
                }
            }

            function hookOnlineApis() {
                function proxyEvent(e) {
                    cordova.fireWindowEvent(e.type);
                }
                // The network module takes care of firing online and offline events.
                // It currently fires them only on document though, so we bridge them
                // to window here (while first listening for exec()-releated online/offline
                // events).
                window.addEventListener('online', pollOnceFromOnlineEvent, false);
                window.addEventListener('offline', pollOnceFromOnlineEvent, false);
                cordova.addWindowEventHandler('online');
                cordova.addWindowEventHandler('offline');
                document.addEventListener('online', proxyEvent, false);
                document.addEventListener('offline', proxyEvent, false);
            }

            hookOnlineApis();

            androidExec.jsToNativeModes = jsToNativeModes;
            androidExec.nativeToJsModes = nativeToJsModes;

            androidExec.setJsToNativeBridgeMode = function (mode) {
                if (mode == jsToNativeModes.JS_OBJECT && !window._cordovaNative) {
                    mode = jsToNativeModes.PROMPT;
                }
                nativeApiProvider.setPreferPrompt(mode == jsToNativeModes.PROMPT);
                jsToNativeBridgeMode = mode;
            };

            androidExec.setNativeToJsBridgeMode = function (mode) {
                if (mode == nativeToJsBridgeMode) {
                    return;
                }
                if (nativeToJsBridgeMode == nativeToJsModes.POLLING) {
                    pollEnabled = false;
                }

                nativeToJsBridgeMode = mode;
                // Tell the native side to switch modes.
                // Otherwise, it will be set by androidExec.init()
                if (bridgeSecret >= 0) {
                    nativeApiProvider.get().setNativeToJsBridgeMode(bridgeSecret, mode);
                }

                if (mode == nativeToJsModes.POLLING) {
                    pollEnabled = true;
                    setTimeout(pollingTimerFunc, 1);
                }
            };

            // Processes a single message, as encoded by NativeToJsMessageQueue.java.
            function processMessage(message) {
                try {
                    var firstChar = message.charAt(0);
                    if (firstChar == 'J') {
                        eval(message.slice(1));
                    } else if (firstChar == 'S' || firstChar == 'F') {
                        var success = firstChar == 'S';
                        var keepCallback = message.charAt(1) == '1';
                        var spaceIdx = message.indexOf(' ', 2);
                        var status = +message.slice(2, spaceIdx);
                        var nextSpaceIdx = message.indexOf(' ', spaceIdx + 1);
                        var callbackId = message.slice(spaceIdx + 1, nextSpaceIdx);
                        var payloadKind = message.charAt(nextSpaceIdx + 1);
                        var payload;
                        if (payloadKind == 's') {
                            payload = message.slice(nextSpaceIdx + 2);
                        } else if (payloadKind == 't') {
                            payload = true;
                        } else if (payloadKind == 'f') {
                            payload = false;
                        } else if (payloadKind == 'N') {
                            payload = null;
                        } else if (payloadKind == 'n') {
                            payload = +message.slice(nextSpaceIdx + 2);
                        } else if (payloadKind == 'A') {
                            var data = message.slice(nextSpaceIdx + 2);
                            var bytes = window.atob(data);
                            var arraybuffer = new Uint8Array(bytes.length);
                            for (var i = 0; i < bytes.length; i++) {
                                arraybuffer[i] = bytes.charCodeAt(i);
                            }
                            payload = arraybuffer.buffer;
                        } else if (payloadKind == 'S') {
                            payload = window.atob(message.slice(nextSpaceIdx + 2));
                        } else {
                            payload = JSON.parse(message.slice(nextSpaceIdx + 1));
                        }
                        cordova.callbackFromNative(callbackId, success, status, [payload], keepCallback);
                    } else {
                        console.log("processMessage failed: invalid message: " + JSON.stringify(message));
                    }
                } catch (e) {
                    console.log("processMessage failed: Error: " + e);
                    console.log("processMessage failed: Stack: " + e.stack);
                    console.log("processMessage failed: Message: " + message);
                }
            }

            var isProcessing = false;

            // This is called from the NativeToJsMessageQueue.java.
            androidExec.processMessages = function (messages, opt_useTimeout) {
                if (messages) {
                    messagesFromNative.push(messages);
                }
                // Check for the reentrant case.
                if (isProcessing) {
                    return;
                }
                if (opt_useTimeout) {
                    window.setTimeout(androidExec.processMessages, 0);
                    return;
                }
                isProcessing = true;
                try {
                    // TODO: add setImmediate polyfill and process only one message at a time.
                    while (messagesFromNative.length) {
                        var msg = popMessageFromQueue();
                        // The Java side can send a * message to indicate that it
                        // still has messages waiting to be retrieved.
                        if (msg == '*' && messagesFromNative.length === 0) {
                            setTimeout(pollOnce, 0);
                            return;
                        }
                        processMessage(msg);
                    }
                } finally {
                    isProcessing = false;
                }
            };

            function popMessageFromQueue() {
                var messageBatch = messagesFromNative.shift();
                if (messageBatch == '*') {
                    return '*';
                }

                var spaceIdx = messageBatch.indexOf(' ');
                var msgLen = +messageBatch.slice(0, spaceIdx);
                var message = messageBatch.substr(spaceIdx + 1, msgLen);
                messageBatch = messageBatch.slice(spaceIdx + msgLen + 1);
                if (messageBatch) {
                    messagesFromNative.unshift(messageBatch);
                }
                return message;
            }

            module.exports = androidExec;
        });

        // file: src/android/platform.js
        define("cordova/platform", function (require, exports, module) {
            module.exports = {
                id: 'android',
                bootstrap: function () {
                    var channel = require('cordova/channel'),
                        cordova = require('cordova'),
                        exec = require('cordova/exec'),
                        modulemapper = require('cordova/modulemapper');

                    // Get the shared secret needed to use the bridge.
                    exec.init();

                    // TODO: Extract this as a proper plugin.
                    modulemapper.clobbers('cordova/plugin/android/app', 'navigator.app');

                    // Inject a listener for the backbutton on the document.
                    var backButtonChannel = cordova.addDocumentEventHandler('backbutton');
                    backButtonChannel.onHasSubscribersChange = function () {
                        // If we just attached the first handler or detached the last handler,
                        // let native know we need to override the back button.
                        exec(null, null, "App", "overrideBackbutton", [this.numHandlers == 1]);
                    };

                    // Add hardware MENU and SEARCH button handlers
                    cordova.addDocumentEventHandler('menubutton');
                    cordova.addDocumentEventHandler('searchbutton');

                    function bindButtonChannel(buttonName) {
                        // generic button bind used for volumeup/volumedown buttons
                        var volumeButtonChannel = cordova.addDocumentEventHandler(buttonName + 'button');
                        volumeButtonChannel.onHasSubscribersChange = function () {
                            exec(null, null, "App", "overrideButton", [buttonName, this.numHandlers == 1]);
                        };
                    }
                    // Inject a listener for the volume buttons on the document.
                    bindButtonChannel('volumeup');
                    bindButtonChannel('volumedown');

                    // Let native code know we are all done on the JS side.
                    // Native code will then un-hide the WebView.
                    channel.onCordovaReady.subscribe(function () {
                        exec(null, null, "App", "show", []);
                    });
                }
            };
        });

        // file: src/android/plugin/android/app.js
        define("cordova/plugin/android/app", function (require, exports, module) {
            var exec = require('cordova/exec');

            module.exports = {
                /**
                 * Clear the resource cache.
                 */
                clearCache: function () {
                    exec(null, null, "App", "clearCache", []);
                },

                /**
                 * Load the url into the webview or into new browser instance.
                 *
                 * @param url           The URL to load
                 * @param props         Properties that can be passed in to the activity:
                 *      wait: int                           => wait msec before loading URL
                 *      loadingDialog: "Title,Message"      => display a native loading dialog
                 *      loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error
                 *      clearHistory: boolean              => clear webview history (default=false)
                 *      openExternal: boolean              => open in a new browser (default=false)
                 *
                 * Example:
                 *      navigator.app.loadUrl("http://server/myapp/index.html", {wait:2000, loadingDialog:"Wait,Loading App", loadUrlTimeoutValue: 60000});
                 */
                loadUrl: function (url, props) {
                    exec(null, null, "App", "loadUrl", [url, props]);
                },

                /**
                 * Cancel loadUrl that is waiting to be loaded.
                 */
                cancelLoadUrl: function () {
                    exec(null, null, "App", "cancelLoadUrl", []);
                },

                /**
                 * Clear web history in this web view.
                 * Instead of BACK button loading the previous web page, it will exit the app.
                 */
                clearHistory: function () {
                    exec(null, null, "App", "clearHistory", []);
                },

                /**
                 * Go to previous page displayed.
                 * This is the same as pressing the backbutton on Android device.
                 */
                backHistory: function () {
                    exec(null, null, "App", "backHistory", []);
                },

                /**
                 * Override the default behavior of the Android back button.
                 * If overridden, when the back button is pressed, the "backKeyDown" JavaScript event will be fired.
                 *
                 * Note: The user should not have to call this method.  Instead, when the user
                 *       registers for the "backbutton" event, this is automatically done.
                 *
                 * @param override        T=override, F=cancel override
                 */
                overrideBackbutton: function (override) {
                    exec(null, null, "App", "overrideBackbutton", [override]);
                },

                /**
                 * Override the default behavior of the Android volume button.
                 * If overridden, when the volume button is pressed, the "volume[up|down]button"
                 * JavaScript event will be fired.
                 *
                 * Note: The user should not have to call this method.  Instead, when the user
                 *       registers for the "volume[up|down]button" event, this is automatically done.
                 *
                 * @param button          volumeup, volumedown
                 * @param override        T=override, F=cancel override
                 */
                overrideButton: function (button, override) {
                    exec(null, null, "App", "overrideButton", [button, override]);
                },

                /**
                 * Exit and terminate the application.
                 */
                exitApp: function () {
                    return exec(null, null, "App", "exitApp", []);
                }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);
    };

    var _fnCordovaWP8 = function () {
        // Platform: windowsphone
        // 3.6.3
        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */

        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        // file: src/windowsphone/exec.js
        define("cordova/exec", function (require, exports, module) {
            var cordova = require('cordova'),
                base64 = require('cordova/base64');

            /**
             * Execute a cordova command.  It is up to the native side whether this action
             * is synchronous or asynchronous.  The native side can return:
             *      Synchronous: PluginResult object as a JSON string
             *      Asynchronous: Empty string ""
             * If async, the native side will cordova.callbackSuccess or cordova.callbackError,
             * depending upon the result of the action.
             *
             * @param {Function} success    The success callback
             * @param {Function} fail       The fail callback
             * @param {String} service      The name of the service to use
             * @param {String} action       Action to be run in cordova
             * @param {String[]} [args]     Zero or more arguments to pass to the method

             */

            module.exports = function (success, fail, service, action, args) {
                var callbackId = service + cordova.callbackId++;
                if (typeof success == "function" || typeof fail == "function") {
                    cordova.callbacks[callbackId] = {
                        success: success,
                        fail: fail
                    };
                }
                args = args || [];
                // generate a new command string, ex. DebugConsole/log/DebugConsole23/["wtf dude?"]
                for (var n = 0; n < args.length; n++) {
                    // special case for ArrayBuffer which could not be stringified out of the box
                    if (typeof ArrayBuffer !== "undefined" && args[n] instanceof ArrayBuffer) {
                        args[n] = base64.fromArrayBuffer(args[n]);
                    }

                    if (typeof args[n] !== "string") {
                        args[n] = JSON.stringify(args[n]);
                    }
                }
                var command = service + "/" + action + "/" + callbackId + "/" + JSON.stringify(args);
                // pass it on to Notify
                try {
                    if (window.external) {
                        window.external.Notify(command);
                    } else {
                        console.log("window.external not available :: command=" + command);
                    }
                } catch (e) {
                    console.log("Exception calling native with command :: " + command + " :: exception=" + e);
                }
            };
        });

        // file: src/windowsphone/platform.js
        define("cordova/platform", function (require, exports, module) {
            module.exports = {
                id: 'windowsphone',
                bootstrap: function () {
                    var cordova = require('cordova'),
                        exec = require('cordova/exec');

                    // Inject a listener for the backbutton, and tell native to override the flag (true/false) when we have 1 or more, or 0, listeners
                    var backButtonChannel = cordova.addDocumentEventHandler('backbutton');
                    backButtonChannel.onHasSubscribersChange = function () {
                        exec(null, null, "CoreEvents", "overridebackbutton", [this.numHandlers == 1]);
                    };
                }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);
    };

    var _fnCordovaWin10 = function () {
        // Platform: Windows 10

        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */

        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        define("cordova/exec", function (require, exports, module) {
            var cordova = require('cordova'),
                channel = require('cordova/channel'),
                utils = require('cordova/utils'),
                base64 = require('cordova/base64'),
                commandQueue = [], // Contains pending JS->Native messages.
                isInContextOfEvalJs = 0;

            function massageArgsJsToNative(args) {
                if (!args || utils.typeName(args) != 'Array') {
                    return args;
                }
                var ret = [];
                args.forEach(function (arg, i) {
                    if (utils.typeName(arg) == 'ArrayBuffer') {
                        ret.push({
                            'CDVType': 'ArrayBuffer',
                            'data': base64.fromArrayBuffer(arg)
                        });
                    } else {
                        ret.push(arg);
                    }
                });
                return ret;
            };

            function pokeNativeViaURI() {
                // Navigate webview to gap://ready URI.
                // This will get captured on the native side,
                // and will get handled from there.

                window.location.href = "dhq-cordova://ready?agent=" + userAgent;
            };

            function win10Exec(success, fail, service, action, args) {
                args = args || [];

                // Register the callbacks and add the callbackId to the positional
                // arguments if given.
                callbackId = service + cordova.callbackId++;
                if (success || fail) {
                    cordova.callbacks[callbackId] = {
                        success: success,
                        fail: fail
                    };
                }

                args = massageArgsJsToNative(args);

                var command = [callbackId, service, action, args];

                // Stringify and queue the command. We stringify to command now to
                // effectively clone the command arguments in case they are mutated before
                // the command is executed.
                commandQueue.push(JSON.stringify(command));

                // If we're in the context of a stringByEvaluatingJavaScriptFromString call,
                // then the queue will be flushed when it returns; no need for a poke.
                // Also, if there is already a command in the queue, then we've already
                // poked the native side, so there is no reason to do so again.
                if (!isInContextOfEvalJs && commandQueue.length == 1) {
                    pokeNativeViaURI();
                }
            };

            win10Exec.nativeFetchMessages = function () {
                // Each entry in commandQueue is a JSON string already.
                if (!commandQueue.length) {
                    return '';
                }
                var json = '[' + commandQueue.join(',') + ']';
                commandQueue.length = 0;
                commandQueue = [];
                return json;
            };

            module.exports = win10Exec;
        });

        define("cordova/platform", function (require, exports, module) {
            module.exports = {
                id: 'win10',
                bootstrap: function () { }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);
    };

    var _fnCordovaElectron = function () {
        // Platform: browser
        // 3.6.3
        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at
    
             http://www.apache.org/licenses/LICENSE-2.0
    
         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */

        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        // file: D:/Github/cordova-browser/cordova-js-src/confighelper.js

        define("cordova/confighelper", function (require, exports, module) {

            var config;

            function Config(xhr) {
                function loadPreferences(xhr) {
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(xhr.responseText, "application/xml");

                    var preferences = doc.getElementsByTagName("preference");
                    return Array.prototype.slice.call(preferences);
                }

                this.xhr = xhr;
                this.preferences = loadPreferences(this.xhr);
            }

            function readConfig(success, error) {
                var xhr;

                if (typeof config != 'undefined') {
                    success(config);
                }

                function fail(msg) {
                    console.error(msg);

                    if (error) {
                        error(msg);
                    }
                }

                var xhrStatusChangeHandler = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200 || xhr.status == 304 || xhr.status === 0 /* file:// */) {
                            config = new Config(xhr);
                            success(config);
                        } else {
                            fail('[Browser][cordova.js][xhrStatusChangeHandler] Could not XHR config.xml: ' + xhr.statusText);
                        }
                    }
                };

                if ("ActiveXObject" in window) {
                    // Needed for XHR-ing via file:// protocol in IE
                    xhr = new window.ActiveXObject("MSXML2.XMLHTTP");
                    xhr.onreadystatechange = xhrStatusChangeHandler;
                } else {
                    xhr = new XMLHttpRequest();
                    xhr.addEventListener("load", xhrStatusChangeHandler);
                }

                try {
                    xhr.open("get", "config.xml", true);
                    xhr.send();
                } catch (e) {
                    fail('[Browser][cordova.js][readConfig] Could not XHR config.xml: ' + JSON.stringify(e));
                }
            }

            /**
             * Reads a preference value from config.xml.
             * Returns preference value or undefined if it does not exist.
             * @param {String} preferenceName Preference name to read */
            Config.prototype.getPreferenceValue = function getPreferenceValue(preferenceName) {
                var preferenceItem = this.preferences && this.preferences.filter(function (item) {
                    return item.attributes.name && item.attributes.name.value === preferenceName;
                });

                if (preferenceItem && preferenceItem[0] && preferenceItem[0].attributes && preferenceItem[0].attributes.value) {
                    return preferenceItem[0].attributes.value.value;
                }
            };

            exports.readConfig = readConfig;

        });

        // file: src/browser/exec.js
        define("cordova/exec", function (require, exports, module) {

            var cordova = require('cordova');
            var channel = require('cordova/channel');

            //Our way of doing things is using window.postMessage
            //There are 2 parts in any communication
            //1. Listen
            //2. Send


            //Part 2: Send
            function electronExec(success, fail, service, action, args) {
                //Send to the parent side

                // Register the callbacks and add the callbackId to the positional
                // arguments if given.
                var callbackId = service + cordova.callbackId++;
                if (typeof success == "function" || typeof fail == "function") {
                    cordova.callbacks[callbackId] = {
                        success: success,
                        fail: fail
                    };
                }

                var destinationWindow = window.parent;
                if (destinationWindow) {
                    var objMessage = {
                        service: service,
                        action: action,
                        callbackId: callbackId,
                        args: args
                    };
                    if (DronaHQ.onElectron)
                        destinationWindow.postMessage(objMessage, '*');
                    else
                        CordovaWebview.receiveMessage({
                            data: objMessage
                        });
                } else {
                    console.log('DronaHQ Webapp missing?');
                }
            }

            //1. Listen
            var fnReceiveMessage = function (e) {
                //TODO: make sure origin is in our whitelist
                var msgData = e.data;
                cordova.callbackFromNative(msgData.callbackId, msgData.success, msgData.status, msgData.payload, msgData.keepCallback);
            };

            electronExec.init = function () {
                window.addEventListener("message", fnReceiveMessage, false);
                channel.onNativeReady.fire();
            };

            module.exports = electronExec;
        });

        // file: src/browser/platform.js
        define("cordova/platform", function (require, exports, module) {

            module.exports = {
                id: 'Electron',
                cordovaVersion: '3.4.0',

                bootstrap: function () {

                    var modulemapper = require('cordova/modulemapper');
                    var channel = require('cordova/channel');
                    var exec = require('cordova/exec');

                    exec.init();

                    // FIXME is this the right place to clobber pause/resume? I am guessing not
                    // FIXME pause/resume should be deprecated IN CORDOVA for pagevisiblity api
                    document.addEventListener('webkitvisibilitychange', function () {
                        if (document.webkitHidden) {
                            channel.onPause.fire();
                        } else {
                            channel.onResume.fire();
                        }
                    }, false);
                    // End of bootstrap
                }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);
    };

    var _fnCordovaBrowser = function () {
        // Platform: browser
        // 3.6.3
        /*
         Licensed to the Apache Software Foundation (ASF) under one
         or more contributor license agreements.  See the NOTICE file
         distributed with this work for additional information
         regarding copyright ownership.  The ASF licenses this file
         to you under the Apache License, Version 2.0 (the
         "License"); you may not use this file except in compliance
         with the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

         Unless required by applicable law or agreed to in writing,
         software distributed under the License is distributed on an
         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
         KIND, either express or implied.  See the License for the
         specific language governing permissions and limitations
         under the License.
        */

        var CORDOVA_JS_BUILD_LABEL = '3.6.3';

        // file: D:/Github/cordova-browser/cordova-js-src/confighelper.js
        define("cordova/confighelper", function (require, exports, module) {
            var config;

            function Config(xhr) {
                function loadPreferences(xhr) {
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(xhr.responseText, "application/xml");

                    var preferences = doc.getElementsByTagName("preference");
                    return Array.prototype.slice.call(preferences);
                }

                this.xhr = xhr;
                this.preferences = loadPreferences(this.xhr);
            }

            function readConfig(success, error) {
                var xhr;

                if (typeof config != 'undefined') {
                    success(config);
                }

                function fail(msg) {
                    console.error(msg);

                    if (error) {
                        error(msg);
                    }
                }

                var xhrStatusChangeHandler = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200 || xhr.status == 304 || xhr.status === 0 /* file:// */) {
                            config = new Config(xhr);
                            success(config);
                        } else {
                            fail('[Browser][cordova.js][xhrStatusChangeHandler] Could not XHR config.xml: ' + xhr.statusText);
                        }
                    }
                };

                if ("ActiveXObject" in window) {
                    // Needed for XHR-ing via file:// protocol in IE
                    xhr = new window.ActiveXObject("MSXML2.XMLHTTP");
                    xhr.onreadystatechange = xhrStatusChangeHandler;
                } else {
                    xhr = new XMLHttpRequest();
                    xhr.addEventListener("load", xhrStatusChangeHandler);
                }

                try {
                    xhr.open("get", "config.xml", true);
                    xhr.send();
                } catch (e) {
                    fail('[Browser][cordova.js][readConfig] Could not XHR config.xml: ' + JSON.stringify(e));
                }
            }

            /**
             * Reads a preference value from config.xml.
             * Returns preference value or undefined if it does not exist.
             * @param {String} preferenceName Preference name to read */
            Config.prototype.getPreferenceValue = function getPreferenceValue(preferenceName) {
                var preferenceItem = this.preferences && this.preferences.filter(function (item) {
                    return item.attributes.name && item.attributes.name.value === preferenceName;
                });

                if (preferenceItem && preferenceItem[0] && preferenceItem[0].attributes && preferenceItem[0].attributes.value) {
                    return preferenceItem[0].attributes.value.value;
                }
            };

            exports.readConfig = readConfig;
        });

        // file: src/browser/exec.js
        define("cordova/exec", function (require, exports, module) {
            var cordova = require('cordova');
            var channel = require('cordova/channel');

            var allowedSender = [
                "https://app.dronahq.com",
                "https://dev.app.dronahq.com",
                "https://web.dronahq.com",
                "http://dev.app.dronahq.com",
                "http://web.dronahq.com",
                "http://192.168.2.106",
                "http://192.168.2.144",
                "http://192.168.2.237"
            ];

            //Our way of doing things is using window.postMessage
            //There are 2 parts in any communication
            //1. Listen
            //2. Send

            //Part 2: Send
            function browserExec(success, fail, service, action, args) {
                //Send to the parent side

                // Register the callbacks and add the callbackId to the positional
                // arguments if given.
                var callbackId = service + cordova.callbackId++;
                if (typeof success == "function" || typeof fail == "function") {
                    cordova.callbacks[callbackId] = {
                        success: success,
                        fail: fail
                    };
                }

                var destinationWindow = window.parent;
                if (destinationWindow) {
                    var objMessage = {
                        service: service,
                        action: action,
                        callbackId: callbackId,
                        args: args
                    };
                    destinationWindow.postMessage(objMessage, '*');
                } else {
                    console.log('DronaHQ Webapp missing?');
                }
            }

            //1. Listen
            var fnReceiveMessage = function (e) {
                //TODO: make sure origin is in our whitelist
                var msgData = e.data;
                cordova.callbackFromNative(msgData.callbackId, msgData.success, msgData.status, msgData.payload, msgData.keepCallback);
            };

            browserExec.init = function () {
                window.addEventListener("message", fnReceiveMessage, false);
                channel.onNativeReady.fire();
            };

            module.exports = browserExec;
        });

        // file: src/browser/platform.js
        define("cordova/platform", function (require, exports, module) {
            module.exports = {
                id: 'browser',
                cordovaVersion: '3.4.0',

                bootstrap: function () {
                    var modulemapper = require('cordova/modulemapper');
                    var channel = require('cordova/channel');
                    var exec = require('cordova/exec');

                    exec.init();

                    // FIXME is this the right place to clobber pause/resume? I am guessing not
                    // FIXME pause/resume should be deprecated IN CORDOVA for pagevisiblity api webkitvisibilitychange

                    //CL#3
                    document.addEventListener('resume', function () {
                        if (document.webkitHidden) {
                            channel.onPause.fire();
                        } else {
                            channel.onResume.fire();
                        }
                    }, false);
                    //End of CL#3
                    // End of bootstrap
                }
            };
        });

        _fnCordovaCommon(CORDOVA_JS_BUILD_LABEL);

        //_fnCordovaBrowserPlugin();
    };

    /**
     * Returns if app is running inside iframe
     */
    var _inIFrame = function () {
        try {
            return window.self !== window.top;
        } catch (e) {
            return true;
        }
    };

    var _fnInitCordova = function () {
        if (DronaHQ.onIos) {
            DronaHQ.plugins.geo = true;
            DronaHQ.plugins.keyboard = true;
            DronaHQ.plugins.calendar = true;
            //Initialize the cordova-ios
            _fnCordovaiOS();
        } else if (DronaHQ.onAndroid) {
            //Initialize the cordova-android
            DronaHQ.plugins.keyboard = true;
            DronaHQ.plugins.calendar = true;
            _fnCordovAndroid();
        } else if (DronaHQ.onWindowsPhone) {
            //Initialize the cordova-wp8
            _fnCordovaWP8();
        } else if (DronaHQ.onElectron) {
            // DronaHQ.onWeb = true;
            //Disabled plugins
            // DronaHQ.plugins.camera = true;
            // DronaHQ.plugins.device = true;
            // DronaHQ.plugins.inappbrowser = true;
            // DronaHQ.plugins.dronahq = true;
            // DronaHQ.plugins.file = false;
            // DronaHQ.plugins.filetransfer = false;
            // DronaHQ.plugins.geo = false;
            _fnCordovaElectron();

        } else {
            //On browser most probably
            //The app should be running inside our iFrame
            if (_inIFrame()) {
                DronaHQ.onWeb = true;

                //Disabled plugins
                DronaHQ.plugins.camera = true;
                DronaHQ.plugins.device = true;
                DronaHQ.plugins.inappbrowser = true;
                DronaHQ.plugins.dronahq = true;
                DronaHQ.plugins.file = false;
                DronaHQ.plugins.filetransfer = false;
                DronaHQ.plugins.geo = false;

                _fnCordovaBrowser();
            } else if (DronaHQ.onWin10) {
                _fnCordovaWin10();
            }
        }
    };

    _fnInitCordova();

    window.DronaHQ = DronaHQ;
})();